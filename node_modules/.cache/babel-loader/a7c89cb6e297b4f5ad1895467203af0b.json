{"ast":null,"code":"'use strict';\n\nvar path = require('path'),\n    detectNewline = require('detect-newline');\n\nfunction unixStylePath(filePath) {\n  return filePath.split(path.sep).join('/');\n}\n\nvar PLUGIN_NAME = require('../package.json').name;\n\nvar urlRegex = /^(https?|webpack(-[^:]+)?):\\/\\//;\n\nvar debug = require('debug-fabulous')()(PLUGIN_NAME + ':utils');\n/*\nSo reusing the same ref for a regex (with global (g)) is from a poor decision in js.\nSee http://stackoverflow.com/questions/10229144/bug-with-regexp-in-javascript-when-do-global-search\n\nSo we either need to use a new instance of a regex everywhere.\n*/\n\n\nvar sourceMapUrlRegEx = function () {\n  return /\\/\\/\\# sourceMappingURL\\=.*/g;\n};\n\nvar getCommentFormatter = function (file) {\n  var extension = file.relative.split('.').pop(),\n      fileContents = file.contents.toString(),\n      newline = detectNewline.graceful(fileContents || ''),\n      commentFormatter = function (url) {\n    return '';\n  };\n\n  if (file.sourceMap.preExistingComment) {\n    debug(logCb('preExistingComment commentFormatter'));\n\n    commentFormatter = function (url) {\n      return \"//# sourceMappingURL=\" + url + newline;\n    };\n\n    return commentFormatter;\n  }\n\n  switch (extension) {\n    case 'css':\n      debug(logCb('css commentFormatter'));\n\n      commentFormatter = function (url) {\n        return newline + \"/*# sourceMappingURL=\" + url + \" */\" + newline;\n      };\n\n      break;\n\n    case 'js':\n      debug(logCb('js commentFormatter'));\n\n      commentFormatter = function (url) {\n        return newline + \"//# sourceMappingURL=\" + url + newline;\n      };\n\n      break;\n\n    default:\n      debug(logCb('unknown commentFormatter'));\n  }\n\n  return commentFormatter;\n};\n\nvar getInlinePreExisting = function (fileContent) {\n  if (sourceMapUrlRegEx().test(fileContent)) {\n    debug(logCb('has preExisting'));\n    return fileContent.match(sourceMapUrlRegEx())[0];\n  }\n};\n\nfunction logCb(toLog) {\n  return function () {\n    return toLog;\n  };\n}\n\nmodule.exports = {\n  unixStylePath: unixStylePath,\n  PLUGIN_NAME: PLUGIN_NAME,\n  urlRegex: urlRegex,\n  sourceMapUrlRegEx: sourceMapUrlRegEx,\n  getCommentFormatter: getCommentFormatter,\n  getInlinePreExisting: getInlinePreExisting,\n  logCb: logCb\n};","map":{"version":3,"names":["path","require","detectNewline","unixStylePath","filePath","split","sep","join","PLUGIN_NAME","name","urlRegex","debug","sourceMapUrlRegEx","getCommentFormatter","file","extension","relative","pop","fileContents","contents","toString","newline","graceful","commentFormatter","url","sourceMap","preExistingComment","logCb","getInlinePreExisting","fileContent","test","match","toLog","module","exports"],"sources":["G:/anaconda/project/download files/last down/New folder/desktop/Samrat/protfolio/protfolio/node_modules/gulp-sourcemaps/src/utils.js"],"sourcesContent":["'use strict';\nvar path = require('path'),\n  detectNewline = require('detect-newline');\n\nfunction unixStylePath(filePath) {\n  return filePath.split(path.sep).join('/');\n}\n\nvar PLUGIN_NAME = require('../package.json').name;\n\nvar urlRegex = /^(https?|webpack(-[^:]+)?):\\/\\//;\n\nvar debug = require('debug-fabulous')()(PLUGIN_NAME + ':utils');\n\n/*\nSo reusing the same ref for a regex (with global (g)) is from a poor decision in js.\nSee http://stackoverflow.com/questions/10229144/bug-with-regexp-in-javascript-when-do-global-search\n\nSo we either need to use a new instance of a regex everywhere.\n*/\nvar sourceMapUrlRegEx = function(){ return /\\/\\/\\# sourceMappingURL\\=.*/g;};\n\n\nvar getCommentFormatter = function (file) {\n  var extension = file.relative.split('.').pop(),\n    fileContents =  file.contents.toString(),\n    newline =  detectNewline.graceful(fileContents || ''),\n    commentFormatter = function(url) {\n      return '';\n    };\n\n  if (file.sourceMap.preExistingComment){\n    debug(logCb('preExistingComment commentFormatter'));\n    commentFormatter = function(url) {\n      return \"//# sourceMappingURL=\" + url + newline;\n    };\n    return commentFormatter;\n  }\n\n  switch (extension) {\n    case 'css':\n      debug(logCb('css commentFormatter'));\n      commentFormatter = function(url) {\n        return newline + \"/*# sourceMappingURL=\" + url + \" */\" + newline;\n      };\n      break;\n    case 'js':\n      debug(logCb('js commentFormatter'));\n      commentFormatter = function(url) {\n        return newline + \"//# sourceMappingURL=\" + url + newline;\n      };\n      break;\n    default:\n      debug(logCb('unknown commentFormatter'));\n  }\n\n  return commentFormatter;\n};\n\nvar getInlinePreExisting = function(fileContent){\n  if(sourceMapUrlRegEx().test(fileContent)){\n    debug(logCb('has preExisting'));\n    return fileContent.match(sourceMapUrlRegEx())[0];\n  }\n};\n\nfunction logCb(toLog){\n  return function() {\n    return toLog;\n  };\n}\n\nmodule.exports = {\n  unixStylePath: unixStylePath,\n  PLUGIN_NAME: PLUGIN_NAME,\n  urlRegex: urlRegex,\n  sourceMapUrlRegEx: sourceMapUrlRegEx,\n  getCommentFormatter: getCommentFormatter,\n  getInlinePreExisting: getInlinePreExisting,\n  logCb: logCb\n};\n"],"mappings":"AAAA;;AACA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;AAAA,IACEC,aAAa,GAAGD,OAAO,CAAC,gBAAD,CADzB;;AAGA,SAASE,aAAT,CAAuBC,QAAvB,EAAiC;EAC/B,OAAOA,QAAQ,CAACC,KAAT,CAAeL,IAAI,CAACM,GAApB,EAAyBC,IAAzB,CAA8B,GAA9B,CAAP;AACD;;AAED,IAAIC,WAAW,GAAGP,OAAO,CAAC,iBAAD,CAAP,CAA2BQ,IAA7C;;AAEA,IAAIC,QAAQ,GAAG,iCAAf;;AAEA,IAAIC,KAAK,GAAGV,OAAO,CAAC,gBAAD,CAAP,GAA4BO,WAAW,GAAG,QAA1C,CAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAII,iBAAiB,GAAG,YAAU;EAAE,OAAO,8BAAP;AAAuC,CAA3E;;AAGA,IAAIC,mBAAmB,GAAG,UAAUC,IAAV,EAAgB;EACxC,IAAIC,SAAS,GAAGD,IAAI,CAACE,QAAL,CAAcX,KAAd,CAAoB,GAApB,EAAyBY,GAAzB,EAAhB;EAAA,IACEC,YAAY,GAAIJ,IAAI,CAACK,QAAL,CAAcC,QAAd,EADlB;EAAA,IAEEC,OAAO,GAAInB,aAAa,CAACoB,QAAd,CAAuBJ,YAAY,IAAI,EAAvC,CAFb;EAAA,IAGEK,gBAAgB,GAAG,UAASC,GAAT,EAAc;IAC/B,OAAO,EAAP;EACD,CALH;;EAOA,IAAIV,IAAI,CAACW,SAAL,CAAeC,kBAAnB,EAAsC;IACpCf,KAAK,CAACgB,KAAK,CAAC,qCAAD,CAAN,CAAL;;IACAJ,gBAAgB,GAAG,UAASC,GAAT,EAAc;MAC/B,OAAO,0BAA0BA,GAA1B,GAAgCH,OAAvC;IACD,CAFD;;IAGA,OAAOE,gBAAP;EACD;;EAED,QAAQR,SAAR;IACE,KAAK,KAAL;MACEJ,KAAK,CAACgB,KAAK,CAAC,sBAAD,CAAN,CAAL;;MACAJ,gBAAgB,GAAG,UAASC,GAAT,EAAc;QAC/B,OAAOH,OAAO,GAAG,uBAAV,GAAoCG,GAApC,GAA0C,KAA1C,GAAkDH,OAAzD;MACD,CAFD;;MAGA;;IACF,KAAK,IAAL;MACEV,KAAK,CAACgB,KAAK,CAAC,qBAAD,CAAN,CAAL;;MACAJ,gBAAgB,GAAG,UAASC,GAAT,EAAc;QAC/B,OAAOH,OAAO,GAAG,uBAAV,GAAoCG,GAApC,GAA0CH,OAAjD;MACD,CAFD;;MAGA;;IACF;MACEV,KAAK,CAACgB,KAAK,CAAC,0BAAD,CAAN,CAAL;EAdJ;;EAiBA,OAAOJ,gBAAP;AACD,CAlCD;;AAoCA,IAAIK,oBAAoB,GAAG,UAASC,WAAT,EAAqB;EAC9C,IAAGjB,iBAAiB,GAAGkB,IAApB,CAAyBD,WAAzB,CAAH,EAAyC;IACvClB,KAAK,CAACgB,KAAK,CAAC,iBAAD,CAAN,CAAL;IACA,OAAOE,WAAW,CAACE,KAAZ,CAAkBnB,iBAAiB,EAAnC,EAAuC,CAAvC,CAAP;EACD;AACF,CALD;;AAOA,SAASe,KAAT,CAAeK,KAAf,EAAqB;EACnB,OAAO,YAAW;IAChB,OAAOA,KAAP;EACD,CAFD;AAGD;;AAEDC,MAAM,CAACC,OAAP,GAAiB;EACf/B,aAAa,EAAEA,aADA;EAEfK,WAAW,EAAEA,WAFE;EAGfE,QAAQ,EAAEA,QAHK;EAIfE,iBAAiB,EAAEA,iBAJJ;EAKfC,mBAAmB,EAAEA,mBALN;EAMfe,oBAAoB,EAAEA,oBANP;EAOfD,KAAK,EAAEA;AAPQ,CAAjB"},"metadata":{},"sourceType":"script"}