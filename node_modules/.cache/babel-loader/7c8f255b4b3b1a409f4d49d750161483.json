{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.acorn = global.acorn || {});\n})(this, function (exports) {\n  'use strict'; // Reserved word lists for various dialects of the language\n\n  var reservedWords = {\n    3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n    5: \"class enum extends super const export import\",\n    6: \"enum\",\n    strict: \"implements interface let package private protected public static yield\",\n    strictBind: \"eval arguments\"\n  }; // And the keywords\n\n  var ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";\n  var keywords = {\n    5: ecma5AndLessKeywords,\n    6: ecma5AndLessKeywords + \" const class extends export import super\"\n  }; // ## Character categories\n  // Big ugly regular expressions that match characters in the\n  // whitespace, identifier, and identifier-start categories. These\n  // are only applied when a character is found to actually have a\n  // code point above 128.\n  // Generated by `bin/generate-identifier-regex.js`.\n\n  var nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0-\\u08b4\\u08b6-\\u08bd\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fd5\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ae\\ua7b0-\\ua7b7\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab65\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n  var nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d4-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c03\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d01-\\u0d03\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1cf8\\u1cf9\\u1dc0-\\u1df5\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua900-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n  var nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\n  var nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n  nonASCIIidentifierStartChars = nonASCIIidentifierChars = null; // These are a run-length and offset encoded representation of the\n  // >0xffff code points that are a valid part of identifiers. The\n  // offset starts at 0x10000, and each pair of numbers represents an\n  // offset to the next range, and then a size of the range. They were\n  // generated by bin/generate-identifier-regex.js\n\n  var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 17, 26, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 26, 45, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 785, 52, 76, 44, 33, 24, 27, 35, 42, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 54, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 86, 25, 391, 63, 32, 0, 449, 56, 264, 8, 2, 36, 18, 0, 50, 29, 881, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 881, 68, 12, 0, 67, 12, 65, 0, 32, 6124, 20, 754, 9486, 1, 3071, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 4149, 196, 60, 67, 1213, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 3, 5761, 10591, 541];\n  var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 1306, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 52, 0, 13, 2, 49, 13, 10, 2, 4, 9, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 57, 0, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 87, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 423, 9, 838, 7, 2, 7, 17, 9, 57, 21, 2, 13, 19882, 9, 135, 4, 60, 6, 26, 9, 1016, 45, 17, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 2214, 6, 110, 6, 6, 9, 792487, 239]; // This has a complexity linear to the value of the code. The\n  // assumption is that looking up astral identifier characters is\n  // rare.\n\n  function isInAstralSet(code, set) {\n    var pos = 0x10000;\n\n    for (var i = 0; i < set.length; i += 2) {\n      pos += set[i];\n      if (pos > code) return false;\n      pos += set[i + 1];\n      if (pos >= code) return true;\n    }\n  } // Test whether a given character code starts an identifier.\n\n\n  function isIdentifierStart(code, astral) {\n    if (code < 65) return code === 36;\n    if (code < 91) return true;\n    if (code < 97) return code === 95;\n    if (code < 123) return true;\n    if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n    if (astral === false) return false;\n    return isInAstralSet(code, astralIdentifierStartCodes);\n  } // Test whether a given character is part of an identifier.\n\n\n  function isIdentifierChar(code, astral) {\n    if (code < 48) return code === 36;\n    if (code < 58) return true;\n    if (code < 65) return false;\n    if (code < 91) return true;\n    if (code < 97) return code === 95;\n    if (code < 123) return true;\n    if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n    if (astral === false) return false;\n    return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n  } // ## Token types\n  // The assignment of fine-grained, information-carrying type objects\n  // allows the tokenizer to store the information it has about a\n  // token in a way that is very cheap for the parser to look up.\n  // All token type variables start with an underscore, to make them\n  // easy to recognize.\n  // The `beforeExpr` property is used to disambiguate between regular\n  // expressions and divisions. It is set on all token types that can\n  // be followed by an expression (thus, a slash after them would be a\n  // regular expression).\n  //\n  // The `startsExpr` property is used to check if the token ends a\n  // `yield` expression. It is set on all token types that either can\n  // directly start an expression (like a quotation mark) or can\n  // continue an expression (like the body of a string).\n  //\n  // `isLoop` marks a keyword as starting a loop, which is important\n  // to know when parsing a label, in order to allow or disallow\n  // continue jumps to that label.\n\n\n  var TokenType = function TokenType(label, conf) {\n    if (conf === void 0) conf = {};\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop || null;\n    this.updateContext = null;\n  };\n\n  function binop(name, prec) {\n    return new TokenType(name, {\n      beforeExpr: true,\n      binop: prec\n    });\n  }\n\n  var beforeExpr = {\n    beforeExpr: true\n  };\n  var startsExpr = {\n    startsExpr: true\n  }; // Map keyword names to token types.\n\n  var keywordTypes = {}; // Succinct definitions of keyword token types\n\n  function kw(name, options) {\n    if (options === void 0) options = {};\n    options.keyword = name;\n    return keywordTypes[name] = new TokenType(name, options);\n  }\n\n  var tt = {\n    num: new TokenType(\"num\", startsExpr),\n    regexp: new TokenType(\"regexp\", startsExpr),\n    string: new TokenType(\"string\", startsExpr),\n    name: new TokenType(\"name\", startsExpr),\n    eof: new TokenType(\"eof\"),\n    // Punctuation token types.\n    bracketL: new TokenType(\"[\", {\n      beforeExpr: true,\n      startsExpr: true\n    }),\n    bracketR: new TokenType(\"]\"),\n    braceL: new TokenType(\"{\", {\n      beforeExpr: true,\n      startsExpr: true\n    }),\n    braceR: new TokenType(\"}\"),\n    parenL: new TokenType(\"(\", {\n      beforeExpr: true,\n      startsExpr: true\n    }),\n    parenR: new TokenType(\")\"),\n    comma: new TokenType(\",\", beforeExpr),\n    semi: new TokenType(\";\", beforeExpr),\n    colon: new TokenType(\":\", beforeExpr),\n    dot: new TokenType(\".\"),\n    question: new TokenType(\"?\", beforeExpr),\n    arrow: new TokenType(\"=>\", beforeExpr),\n    template: new TokenType(\"template\"),\n    ellipsis: new TokenType(\"...\", beforeExpr),\n    backQuote: new TokenType(\"`\", startsExpr),\n    dollarBraceL: new TokenType(\"${\", {\n      beforeExpr: true,\n      startsExpr: true\n    }),\n    // Operators. These carry several kinds of properties to help the\n    // parser use them properly (the presence of these properties is\n    // what categorizes them as operators).\n    //\n    // `binop`, when present, specifies that this operator is a binary\n    // operator, and will refer to its precedence.\n    //\n    // `prefix` and `postfix` mark the operator as a prefix or postfix\n    // unary operator.\n    //\n    // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n    // binary operators with a very low precedence, that should result\n    // in AssignmentExpression nodes.\n    eq: new TokenType(\"=\", {\n      beforeExpr: true,\n      isAssign: true\n    }),\n    assign: new TokenType(\"_=\", {\n      beforeExpr: true,\n      isAssign: true\n    }),\n    incDec: new TokenType(\"++/--\", {\n      prefix: true,\n      postfix: true,\n      startsExpr: true\n    }),\n    prefix: new TokenType(\"prefix\", {\n      beforeExpr: true,\n      prefix: true,\n      startsExpr: true\n    }),\n    logicalOR: binop(\"||\", 1),\n    logicalAND: binop(\"&&\", 2),\n    bitwiseOR: binop(\"|\", 3),\n    bitwiseXOR: binop(\"^\", 4),\n    bitwiseAND: binop(\"&\", 5),\n    equality: binop(\"==/!=\", 6),\n    relational: binop(\"</>\", 7),\n    bitShift: binop(\"<</>>\", 8),\n    plusMin: new TokenType(\"+/-\", {\n      beforeExpr: true,\n      binop: 9,\n      prefix: true,\n      startsExpr: true\n    }),\n    modulo: binop(\"%\", 10),\n    star: binop(\"*\", 10),\n    slash: binop(\"/\", 10),\n    starstar: new TokenType(\"**\", {\n      beforeExpr: true\n    }),\n    // Keyword token types.\n    _break: kw(\"break\"),\n    _case: kw(\"case\", beforeExpr),\n    _catch: kw(\"catch\"),\n    _continue: kw(\"continue\"),\n    _debugger: kw(\"debugger\"),\n    _default: kw(\"default\", beforeExpr),\n    _do: kw(\"do\", {\n      isLoop: true,\n      beforeExpr: true\n    }),\n    _else: kw(\"else\", beforeExpr),\n    _finally: kw(\"finally\"),\n    _for: kw(\"for\", {\n      isLoop: true\n    }),\n    _function: kw(\"function\", startsExpr),\n    _if: kw(\"if\"),\n    _return: kw(\"return\", beforeExpr),\n    _switch: kw(\"switch\"),\n    _throw: kw(\"throw\", beforeExpr),\n    _try: kw(\"try\"),\n    _var: kw(\"var\"),\n    _const: kw(\"const\"),\n    _while: kw(\"while\", {\n      isLoop: true\n    }),\n    _with: kw(\"with\"),\n    _new: kw(\"new\", {\n      beforeExpr: true,\n      startsExpr: true\n    }),\n    _this: kw(\"this\", startsExpr),\n    _super: kw(\"super\", startsExpr),\n    _class: kw(\"class\"),\n    _extends: kw(\"extends\", beforeExpr),\n    _export: kw(\"export\"),\n    _import: kw(\"import\"),\n    _null: kw(\"null\", startsExpr),\n    _true: kw(\"true\", startsExpr),\n    _false: kw(\"false\", startsExpr),\n    _in: kw(\"in\", {\n      beforeExpr: true,\n      binop: 7\n    }),\n    _instanceof: kw(\"instanceof\", {\n      beforeExpr: true,\n      binop: 7\n    }),\n    _typeof: kw(\"typeof\", {\n      beforeExpr: true,\n      prefix: true,\n      startsExpr: true\n    }),\n    _void: kw(\"void\", {\n      beforeExpr: true,\n      prefix: true,\n      startsExpr: true\n    }),\n    _delete: kw(\"delete\", {\n      beforeExpr: true,\n      prefix: true,\n      startsExpr: true\n    })\n  }; // Matches a whole line break (where CRLF is considered a single\n  // line break). Used to count lines.\n\n  var lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\n  var lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n  function isNewLine(code) {\n    return code === 10 || code === 13 || code === 0x2028 || code === 0x2029;\n  }\n\n  var nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n  var skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\n  function isArray(obj) {\n    return Object.prototype.toString.call(obj) === \"[object Array]\";\n  } // Checks if an object has a property.\n\n\n  function has(obj, propName) {\n    return Object.prototype.hasOwnProperty.call(obj, propName);\n  } // These are used when `options.locations` is on, for the\n  // `startLoc` and `endLoc` properties.\n\n\n  var Position = function Position(line, col) {\n    this.line = line;\n    this.column = col;\n  };\n\n  Position.prototype.offset = function offset(n) {\n    return new Position(this.line, this.column + n);\n  };\n\n  var SourceLocation = function SourceLocation(p, start, end) {\n    this.start = start;\n    this.end = end;\n    if (p.sourceFile !== null) this.source = p.sourceFile;\n  }; // The `getLineInfo` function is mostly useful when the\n  // `locations` option is off (for performance reasons) and you\n  // want to find the line/column position for a given character\n  // offset. `input` should be the code string that the offset refers\n  // into.\n\n\n  function getLineInfo(input, offset) {\n    for (var line = 1, cur = 0;;) {\n      lineBreakG.lastIndex = cur;\n      var match = lineBreakG.exec(input);\n\n      if (match && match.index < offset) {\n        ++line;\n        cur = match.index + match[0].length;\n      } else {\n        return new Position(line, offset - cur);\n      }\n    }\n  } // A second optional argument can be given to further configure\n  // the parser process. These options are recognized:\n\n\n  var defaultOptions = {\n    // `ecmaVersion` indicates the ECMAScript version to parse. Must\n    // be either 3, 5, 6 (2015), 7 (2016), or 8 (2017). This influences support\n    // for strict mode, the set of reserved words, and support for\n    // new syntax features. The default is 7.\n    ecmaVersion: 7,\n    // `sourceType` indicates the mode the code should be parsed in.\n    // Can be either `\"script\"` or `\"module\"`. This influences global\n    // strict mode and parsing of `import` and `export` declarations.\n    sourceType: \"script\",\n    // `onInsertedSemicolon` can be a callback that will be called\n    // when a semicolon is automatically inserted. It will be passed\n    // th position of the comma as an offset, and if `locations` is\n    // enabled, it is given the location as a `{line, column}` object\n    // as second argument.\n    onInsertedSemicolon: null,\n    // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n    // trailing commas.\n    onTrailingComma: null,\n    // By default, reserved words are only enforced if ecmaVersion >= 5.\n    // Set `allowReserved` to a boolean value to explicitly turn this on\n    // an off. When this option has the value \"never\", reserved words\n    // and keywords can also not be used as property names.\n    allowReserved: null,\n    // When enabled, a return at the top level is not considered an\n    // error.\n    allowReturnOutsideFunction: false,\n    // When enabled, import/export statements are not constrained to\n    // appearing at the top of the program.\n    allowImportExportEverywhere: false,\n    // When enabled, hashbang directive in the beginning of file\n    // is allowed and treated as a line comment.\n    allowHashBang: false,\n    // When `locations` is on, `loc` properties holding objects with\n    // `start` and `end` properties in `{line, column}` form (with\n    // line being 1-based and column 0-based) will be attached to the\n    // nodes.\n    locations: false,\n    // A function can be passed as `onToken` option, which will\n    // cause Acorn to call that function with object in the same\n    // format as tokens returned from `tokenizer().getToken()`. Note\n    // that you are not allowed to call the parser from the\n    // callback—that will corrupt its internal state.\n    onToken: null,\n    // A function can be passed as `onComment` option, which will\n    // cause Acorn to call that function with `(block, text, start,\n    // end)` parameters whenever a comment is skipped. `block` is a\n    // boolean indicating whether this is a block (`/* */`) comment,\n    // `text` is the content of the comment, and `start` and `end` are\n    // character offsets that denote the start and end of the comment.\n    // When the `locations` option is on, two more parameters are\n    // passed, the full `{line, column}` locations of the start and\n    // end of the comments. Note that you are not allowed to call the\n    // parser from the callback—that will corrupt its internal state.\n    onComment: null,\n    // Nodes have their start and end characters offsets recorded in\n    // `start` and `end` properties (directly on the node, rather than\n    // the `loc` object, which holds line/column data. To also add a\n    // [semi-standardized][range] `range` property holding a `[start,\n    // end]` array with the same numbers, set the `ranges` option to\n    // `true`.\n    //\n    // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n    ranges: false,\n    // It is possible to parse multiple files into a single AST by\n    // passing the tree produced by parsing the first file as\n    // `program` option in subsequent parses. This will add the\n    // toplevel forms of the parsed file to the `Program` (top) node\n    // of an existing parse tree.\n    program: null,\n    // When `locations` is on, you can pass this to record the source\n    // file in every node's `loc` object.\n    sourceFile: null,\n    // This value, if given, is stored in every node, whether\n    // `locations` is on or off.\n    directSourceFile: null,\n    // When enabled, parenthesized expressions are represented by\n    // (non-standard) ParenthesizedExpression nodes\n    preserveParens: false,\n    plugins: {}\n  }; // Interpret and default an options object\n\n  function getOptions(opts) {\n    var options = {};\n\n    for (var opt in defaultOptions) options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt];\n\n    if (options.ecmaVersion >= 2015) options.ecmaVersion -= 2009;\n    if (options.allowReserved == null) options.allowReserved = options.ecmaVersion < 5;\n\n    if (isArray(options.onToken)) {\n      var tokens = options.onToken;\n\n      options.onToken = function (token) {\n        return tokens.push(token);\n      };\n    }\n\n    if (isArray(options.onComment)) options.onComment = pushComment(options, options.onComment);\n    return options;\n  }\n\n  function pushComment(options, array) {\n    return function (block, text, start, end, startLoc, endLoc) {\n      var comment = {\n        type: block ? 'Block' : 'Line',\n        value: text,\n        start: start,\n        end: end\n      };\n      if (options.locations) comment.loc = new SourceLocation(this, startLoc, endLoc);\n      if (options.ranges) comment.range = [start, end];\n      array.push(comment);\n    };\n  } // Registered plugins\n\n\n  var plugins = {};\n\n  function keywordRegexp(words) {\n    return new RegExp(\"^(\" + words.replace(/ /g, \"|\") + \")$\");\n  }\n\n  var Parser = function Parser(options, input, startPos) {\n    this.options = options = getOptions(options);\n    this.sourceFile = options.sourceFile;\n    this.keywords = keywordRegexp(keywords[options.ecmaVersion >= 6 ? 6 : 5]);\n    var reserved = \"\";\n\n    if (!options.allowReserved) {\n      for (var v = options.ecmaVersion;; v--) if (reserved = reservedWords[v]) break;\n\n      if (options.sourceType == \"module\") reserved += \" await\";\n    }\n\n    this.reservedWords = keywordRegexp(reserved);\n    var reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict;\n    this.reservedWordsStrict = keywordRegexp(reservedStrict);\n    this.reservedWordsStrictBind = keywordRegexp(reservedStrict + \" \" + reservedWords.strictBind);\n    this.input = String(input); // Used to signal to callers of `readWord1` whether the word\n    // contained any escape sequences. This is needed because words with\n    // escape sequences must not be interpreted as keywords.\n\n    this.containsEsc = false; // Load plugins\n\n    this.loadPlugins(options.plugins); // Set up token state\n    // The current position of the tokenizer in the input.\n\n    if (startPos) {\n      this.pos = startPos;\n      this.lineStart = this.input.lastIndexOf(\"\\n\", startPos - 1) + 1;\n      this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;\n    } else {\n      this.pos = this.lineStart = 0;\n      this.curLine = 1;\n    } // Properties of the current token:\n    // Its type\n\n\n    this.type = tt.eof; // For tokens that include more information than their type, the value\n\n    this.value = null; // Its start and end offset\n\n    this.start = this.end = this.pos; // And, if locations are used, the {line, column} object\n    // corresponding to those offsets\n\n    this.startLoc = this.endLoc = this.curPosition(); // Position information for the previous token\n\n    this.lastTokEndLoc = this.lastTokStartLoc = null;\n    this.lastTokStart = this.lastTokEnd = this.pos; // The context stack is used to superficially track syntactic\n    // context to predict whether a regular expression is allowed in a\n    // given position.\n\n    this.context = this.initialContext();\n    this.exprAllowed = true; // Figure out if it's a module code.\n\n    this.inModule = options.sourceType === \"module\";\n    this.strict = this.inModule || this.strictDirective(this.pos); // Used to signify the start of a potential arrow function\n\n    this.potentialArrowAt = -1; // Flags to track whether we are in a function, a generator, an async function.\n\n    this.inFunction = this.inGenerator = this.inAsync = false; // Positions to delayed-check that yield/await does not exist in default parameters.\n\n    this.yieldPos = this.awaitPos = 0; // Labels in scope.\n\n    this.labels = []; // If enabled, skip leading hashbang line.\n\n    if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === '#!') this.skipLineComment(2);\n  }; // DEPRECATED Kept for backwards compatibility until 3.0 in case a plugin uses them\n\n\n  Parser.prototype.isKeyword = function isKeyword(word) {\n    return this.keywords.test(word);\n  };\n\n  Parser.prototype.isReservedWord = function isReservedWord(word) {\n    return this.reservedWords.test(word);\n  };\n\n  Parser.prototype.extend = function extend(name, f) {\n    this[name] = f(this[name]);\n  };\n\n  Parser.prototype.loadPlugins = function loadPlugins(pluginConfigs) {\n    var this$1 = this;\n\n    for (var name in pluginConfigs) {\n      var plugin = plugins[name];\n      if (!plugin) throw new Error(\"Plugin '\" + name + \"' not found\");\n      plugin(this$1, pluginConfigs[name]);\n    }\n  };\n\n  Parser.prototype.parse = function parse() {\n    var node = this.options.program || this.startNode();\n    this.nextToken();\n    return this.parseTopLevel(node);\n  };\n\n  var pp = Parser.prototype; // ## Parser utilities\n\n  var literal = /^(?:'((?:[^\\']|\\.)*)'|\"((?:[^\\\"]|\\.)*)\"|;)/;\n\n  pp.strictDirective = function (start) {\n    var this$1 = this;\n\n    for (;;) {\n      skipWhiteSpace.lastIndex = start;\n      start += skipWhiteSpace.exec(this$1.input)[0].length;\n      var match = literal.exec(this$1.input.slice(start));\n      if (!match) return false;\n      if ((match[1] || match[2]) == \"use strict\") return true;\n      start += match[0].length;\n    }\n  }; // Predicate that tests whether the next token is of the given\n  // type, and if yes, consumes it as a side effect.\n\n\n  pp.eat = function (type) {\n    if (this.type === type) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }; // Tests whether parsed token is a contextual keyword.\n\n\n  pp.isContextual = function (name) {\n    return this.type === tt.name && this.value === name;\n  }; // Consumes contextual keyword if possible.\n\n\n  pp.eatContextual = function (name) {\n    return this.value === name && this.eat(tt.name);\n  }; // Asserts that following token is given contextual keyword.\n\n\n  pp.expectContextual = function (name) {\n    if (!this.eatContextual(name)) this.unexpected();\n  }; // Test whether a semicolon can be inserted at the current position.\n\n\n  pp.canInsertSemicolon = function () {\n    return this.type === tt.eof || this.type === tt.braceR || lineBreak.test(this.input.slice(this.lastTokEnd, this.start));\n  };\n\n  pp.insertSemicolon = function () {\n    if (this.canInsertSemicolon()) {\n      if (this.options.onInsertedSemicolon) this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);\n      return true;\n    }\n  }; // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n\n  pp.semicolon = function () {\n    if (!this.eat(tt.semi) && !this.insertSemicolon()) this.unexpected();\n  };\n\n  pp.afterTrailingComma = function (tokType, notNext) {\n    if (this.type == tokType) {\n      if (this.options.onTrailingComma) this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);\n      if (!notNext) this.next();\n      return true;\n    }\n  }; // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error.\n\n\n  pp.expect = function (type) {\n    this.eat(type) || this.unexpected();\n  }; // Raise an unexpected token error.\n\n\n  pp.unexpected = function (pos) {\n    this.raise(pos != null ? pos : this.start, \"Unexpected token\");\n  };\n\n  var DestructuringErrors = function DestructuringErrors() {\n    this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = -1;\n  };\n\n  pp.checkPatternErrors = function (refDestructuringErrors, isAssign) {\n    if (!refDestructuringErrors) return;\n    if (refDestructuringErrors.trailingComma > -1) this.raiseRecoverable(refDestructuringErrors.trailingComma, \"Comma is not permitted after the rest element\");\n    var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;\n    if (parens > -1) this.raiseRecoverable(parens, \"Parenthesized pattern\");\n  };\n\n  pp.checkExpressionErrors = function (refDestructuringErrors, andThrow) {\n    var pos = refDestructuringErrors ? refDestructuringErrors.shorthandAssign : -1;\n    if (!andThrow) return pos >= 0;\n    if (pos > -1) this.raise(pos, \"Shorthand property assignments are valid only in destructuring patterns\");\n  };\n\n  pp.checkYieldAwaitInDefaultParams = function () {\n    if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos)) this.raise(this.yieldPos, \"Yield expression cannot be a default value\");\n    if (this.awaitPos) this.raise(this.awaitPos, \"Await expression cannot be a default value\");\n  };\n\n  pp.isSimpleAssignTarget = function (expr) {\n    if (expr.type === \"ParenthesizedExpression\") return this.isSimpleAssignTarget(expr.expression);\n    return expr.type === \"Identifier\" || expr.type === \"MemberExpression\";\n  };\n\n  var pp$1 = Parser.prototype; // ### Statement parsing\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  pp$1.parseTopLevel = function (node) {\n    var this$1 = this;\n    var exports = {};\n    if (!node.body) node.body = [];\n\n    while (this.type !== tt.eof) {\n      var stmt = this$1.parseStatement(true, true, exports);\n      node.body.push(stmt);\n    }\n\n    this.next();\n\n    if (this.options.ecmaVersion >= 6) {\n      node.sourceType = this.options.sourceType;\n    }\n\n    return this.finishNode(node, \"Program\");\n  };\n\n  var loopLabel = {\n    kind: \"loop\"\n  };\n  var switchLabel = {\n    kind: \"switch\"\n  };\n\n  pp$1.isLet = function () {\n    if (this.type !== tt.name || this.options.ecmaVersion < 6 || this.value != \"let\") return false;\n    skipWhiteSpace.lastIndex = this.pos;\n    var skip = skipWhiteSpace.exec(this.input);\n    var next = this.pos + skip[0].length,\n        nextCh = this.input.charCodeAt(next);\n    if (nextCh === 91 || nextCh == 123) return true; // '{' and '['\n\n    if (isIdentifierStart(nextCh, true)) {\n      for (var pos = next + 1; isIdentifierChar(this.input.charCodeAt(pos), true); ++pos) {}\n\n      var ident = this.input.slice(next, pos);\n      if (!this.isKeyword(ident)) return true;\n    }\n\n    return false;\n  }; // check 'async [no LineTerminator here] function'\n  // - 'async /*foo*/ function' is OK.\n  // - 'async /*\\n*/ function' is invalid.\n\n\n  pp$1.isAsyncFunction = function () {\n    if (this.type !== tt.name || this.options.ecmaVersion < 8 || this.value != \"async\") return false;\n    skipWhiteSpace.lastIndex = this.pos;\n    var skip = skipWhiteSpace.exec(this.input);\n    var next = this.pos + skip[0].length;\n    return !lineBreak.test(this.input.slice(this.pos, next)) && this.input.slice(next, next + 8) === \"function\" && (next + 8 == this.input.length || !isIdentifierChar(this.input.charAt(next + 8)));\n  }; // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n\n\n  pp$1.parseStatement = function (declaration, topLevel, exports) {\n    var starttype = this.type,\n        node = this.startNode(),\n        kind;\n\n    if (this.isLet()) {\n      starttype = tt._var;\n      kind = \"let\";\n    } // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n\n    switch (starttype) {\n      case tt._break:\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n\n      case tt._debugger:\n        return this.parseDebuggerStatement(node);\n\n      case tt._do:\n        return this.parseDoStatement(node);\n\n      case tt._for:\n        return this.parseForStatement(node);\n\n      case tt._function:\n        if (!declaration && this.options.ecmaVersion >= 6) this.unexpected();\n        return this.parseFunctionStatement(node, false);\n\n      case tt._class:\n        if (!declaration) this.unexpected();\n        return this.parseClass(node, true);\n\n      case tt._if:\n        return this.parseIfStatement(node);\n\n      case tt._return:\n        return this.parseReturnStatement(node);\n\n      case tt._switch:\n        return this.parseSwitchStatement(node);\n\n      case tt._throw:\n        return this.parseThrowStatement(node);\n\n      case tt._try:\n        return this.parseTryStatement(node);\n\n      case tt._const:\n      case tt._var:\n        kind = kind || this.value;\n        if (!declaration && kind != \"var\") this.unexpected();\n        return this.parseVarStatement(node, kind);\n\n      case tt._while:\n        return this.parseWhileStatement(node);\n\n      case tt._with:\n        return this.parseWithStatement(node);\n\n      case tt.braceL:\n        return this.parseBlock();\n\n      case tt.semi:\n        return this.parseEmptyStatement(node);\n\n      case tt._export:\n      case tt._import:\n        if (!this.options.allowImportExportEverywhere) {\n          if (!topLevel) this.raise(this.start, \"'import' and 'export' may only appear at the top level\");\n          if (!this.inModule) this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\");\n        }\n\n        return starttype === tt._import ? this.parseImport(node) : this.parseExport(node, exports);\n      // If the statement does not start with a statement keyword or a\n      // brace, it's an ExpressionStatement or LabeledStatement. We\n      // simply start parsing an expression, and afterwards, if the\n      // next token is a colon and the expression was a simple\n      // Identifier node, we switch to interpreting it as a label.\n\n      default:\n        if (this.isAsyncFunction() && declaration) {\n          this.next();\n          return this.parseFunctionStatement(node, true);\n        }\n\n        var maybeName = this.value,\n            expr = this.parseExpression();\n        if (starttype === tt.name && expr.type === \"Identifier\" && this.eat(tt.colon)) return this.parseLabeledStatement(node, maybeName, expr);else return this.parseExpressionStatement(node, expr);\n    }\n  };\n\n  pp$1.parseBreakContinueStatement = function (node, keyword) {\n    var this$1 = this;\n    var isBreak = keyword == \"break\";\n    this.next();\n    if (this.eat(tt.semi) || this.insertSemicolon()) node.label = null;else if (this.type !== tt.name) this.unexpected();else {\n      node.label = this.parseIdent();\n      this.semicolon();\n    } // Verify that there is an actual destination to break or\n    // continue to.\n\n    for (var i = 0; i < this.labels.length; ++i) {\n      var lab = this$1.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.labels.length) this.raise(node.start, \"Unsyntactic \" + keyword);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  };\n\n  pp$1.parseDebuggerStatement = function (node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  };\n\n  pp$1.parseDoStatement = function (node) {\n    this.next();\n    this.labels.push(loopLabel);\n    node.body = this.parseStatement(false);\n    this.labels.pop();\n    this.expect(tt._while);\n    node.test = this.parseParenExpression();\n    if (this.options.ecmaVersion >= 6) this.eat(tt.semi);else this.semicolon();\n    return this.finishNode(node, \"DoWhileStatement\");\n  }; // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n\n  pp$1.parseForStatement = function (node) {\n    this.next();\n    this.labels.push(loopLabel);\n    this.expect(tt.parenL);\n    if (this.type === tt.semi) return this.parseFor(node, null);\n    var isLet = this.isLet();\n\n    if (this.type === tt._var || this.type === tt._const || isLet) {\n      var init$1 = this.startNode(),\n          kind = isLet ? \"let\" : this.value;\n      this.next();\n      this.parseVar(init$1, true, kind);\n      this.finishNode(init$1, \"VariableDeclaration\");\n      if ((this.type === tt._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\")) && init$1.declarations.length === 1 && !(kind !== \"var\" && init$1.declarations[0].init)) return this.parseForIn(node, init$1);\n      return this.parseFor(node, init$1);\n    }\n\n    var refDestructuringErrors = new DestructuringErrors();\n    var init = this.parseExpression(true, refDestructuringErrors);\n\n    if (this.type === tt._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\")) {\n      this.toAssignable(init);\n      this.checkLVal(init);\n      this.checkPatternErrors(refDestructuringErrors, true);\n      return this.parseForIn(node, init);\n    } else {\n      this.checkExpressionErrors(refDestructuringErrors, true);\n    }\n\n    return this.parseFor(node, init);\n  };\n\n  pp$1.parseFunctionStatement = function (node, isAsync) {\n    this.next();\n    return this.parseFunction(node, true, false, isAsync);\n  };\n\n  pp$1.isFunction = function () {\n    return this.type === tt._function || this.isAsyncFunction();\n  };\n\n  pp$1.parseIfStatement = function (node) {\n    this.next();\n    node.test = this.parseParenExpression(); // allow function declarations in branches, but only in non-strict mode\n\n    node.consequent = this.parseStatement(!this.strict && this.isFunction());\n    node.alternate = this.eat(tt._else) ? this.parseStatement(!this.strict && this.isFunction()) : null;\n    return this.finishNode(node, \"IfStatement\");\n  };\n\n  pp$1.parseReturnStatement = function (node) {\n    if (!this.inFunction && !this.options.allowReturnOutsideFunction) this.raise(this.start, \"'return' outside of function\");\n    this.next(); // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.eat(tt.semi) || this.insertSemicolon()) node.argument = null;else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n    return this.finishNode(node, \"ReturnStatement\");\n  };\n\n  pp$1.parseSwitchStatement = function (node) {\n    var this$1 = this;\n    this.next();\n    node.discriminant = this.parseParenExpression();\n    node.cases = [];\n    this.expect(tt.braceL);\n    this.labels.push(switchLabel); // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    for (var cur, sawDefault = false; this.type != tt.braceR;) {\n      if (this$1.type === tt._case || this$1.type === tt._default) {\n        var isCase = this$1.type === tt._case;\n        if (cur) this$1.finishNode(cur, \"SwitchCase\");\n        node.cases.push(cur = this$1.startNode());\n        cur.consequent = [];\n        this$1.next();\n\n        if (isCase) {\n          cur.test = this$1.parseExpression();\n        } else {\n          if (sawDefault) this$1.raiseRecoverable(this$1.lastTokStart, \"Multiple default clauses\");\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this$1.expect(tt.colon);\n      } else {\n        if (!cur) this$1.unexpected();\n        cur.consequent.push(this$1.parseStatement(true));\n      }\n    }\n\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n\n    this.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  };\n\n  pp$1.parseThrowStatement = function (node) {\n    this.next();\n    if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) this.raise(this.lastTokEnd, \"Illegal newline after throw\");\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }; // Reused empty array added for node fields that are always empty.\n\n\n  var empty = [];\n\n  pp$1.parseTryStatement = function (node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.type === tt._catch) {\n      var clause = this.startNode();\n      this.next();\n      this.expect(tt.parenL);\n      clause.param = this.parseBindingAtom();\n      this.checkLVal(clause.param, true);\n      this.expect(tt.parenR);\n      clause.body = this.parseBlock();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n    if (!node.handler && !node.finalizer) this.raise(node.start, \"Missing catch or finally clause\");\n    return this.finishNode(node, \"TryStatement\");\n  };\n\n  pp$1.parseVarStatement = function (node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  };\n\n  pp$1.parseWhileStatement = function (node) {\n    this.next();\n    node.test = this.parseParenExpression();\n    this.labels.push(loopLabel);\n    node.body = this.parseStatement(false);\n    this.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  };\n\n  pp$1.parseWithStatement = function (node) {\n    if (this.strict) this.raise(this.start, \"'with' in strict mode\");\n    this.next();\n    node.object = this.parseParenExpression();\n    node.body = this.parseStatement(false);\n    return this.finishNode(node, \"WithStatement\");\n  };\n\n  pp$1.parseEmptyStatement = function (node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  };\n\n  pp$1.parseLabeledStatement = function (node, maybeName, expr) {\n    var this$1 = this;\n\n    for (var i = 0; i < this.labels.length; ++i) if (this$1.labels[i].name === maybeName) this$1.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n\n    var kind = this.type.isLoop ? \"loop\" : this.type === tt._switch ? \"switch\" : null;\n\n    for (var i$1 = this.labels.length - 1; i$1 >= 0; i$1--) {\n      var label = this$1.labels[i$1];\n\n      if (label.statementStart == node.start) {\n        label.statementStart = this$1.start;\n        label.kind = kind;\n      } else break;\n    }\n\n    this.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.start\n    });\n    node.body = this.parseStatement(true);\n    if (node.body.type == \"ClassDeclaration\" || node.body.type == \"VariableDeclaration\" && (this.strict || node.body.kind != \"var\") || node.body.type == \"FunctionDeclaration\" && (this.strict || node.body.generator)) this.raiseRecoverable(node.body.start, \"Invalid labeled declaration\");\n    this.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  };\n\n  pp$1.parseExpressionStatement = function (node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }; // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowStrict` is true (used for\n  // function bodies).\n\n\n  pp$1.parseBlock = function () {\n    var this$1 = this;\n    var node = this.startNode();\n    node.body = [];\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      var stmt = this$1.parseStatement(true);\n      node.body.push(stmt);\n    }\n\n    return this.finishNode(node, \"BlockStatement\");\n  }; // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n\n  pp$1.parseFor = function (node, init) {\n    node.init = init;\n    this.expect(tt.semi);\n    node.test = this.type === tt.semi ? null : this.parseExpression();\n    this.expect(tt.semi);\n    node.update = this.type === tt.parenR ? null : this.parseExpression();\n    this.expect(tt.parenR);\n    node.body = this.parseStatement(false);\n    this.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }; // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n\n  pp$1.parseForIn = function (node, init) {\n    var type = this.type === tt._in ? \"ForInStatement\" : \"ForOfStatement\";\n    this.next();\n    node.left = init;\n    node.right = this.parseExpression();\n    this.expect(tt.parenR);\n    node.body = this.parseStatement(false);\n    this.labels.pop();\n    return this.finishNode(node, type);\n  }; // Parse a list of variable declarations.\n\n\n  pp$1.parseVar = function (node, isFor, kind) {\n    var this$1 = this;\n    node.declarations = [];\n    node.kind = kind;\n\n    for (;;) {\n      var decl = this$1.startNode();\n      this$1.parseVarId(decl);\n\n      if (this$1.eat(tt.eq)) {\n        decl.init = this$1.parseMaybeAssign(isFor);\n      } else if (kind === \"const\" && !(this$1.type === tt._in || this$1.options.ecmaVersion >= 6 && this$1.isContextual(\"of\"))) {\n        this$1.unexpected();\n      } else if (decl.id.type != \"Identifier\" && !(isFor && (this$1.type === tt._in || this$1.isContextual(\"of\")))) {\n        this$1.raise(this$1.lastTokEnd, \"Complex binding patterns require an initialization value\");\n      } else {\n        decl.init = null;\n      }\n\n      node.declarations.push(this$1.finishNode(decl, \"VariableDeclarator\"));\n      if (!this$1.eat(tt.comma)) break;\n    }\n\n    return node;\n  };\n\n  pp$1.parseVarId = function (decl) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, true);\n  }; // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n\n  pp$1.parseFunction = function (node, isStatement, allowExpressionBody, isAsync) {\n    this.initFunction(node);\n    if (this.options.ecmaVersion >= 6 && !isAsync) node.generator = this.eat(tt.star);\n    if (this.options.ecmaVersion >= 8) node.async = !!isAsync;\n    if (isStatement == null) isStatement = this.type == tt.name;\n    if (isStatement) node.id = this.parseIdent();\n    var oldInGen = this.inGenerator,\n        oldInAsync = this.inAsync,\n        oldYieldPos = this.yieldPos,\n        oldAwaitPos = this.awaitPos,\n        oldInFunc = this.inFunction;\n    this.inGenerator = node.generator;\n    this.inAsync = node.async;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.inFunction = true;\n    if (!isStatement && this.type === tt.name) node.id = this.parseIdent();\n    this.parseFunctionParams(node);\n    this.parseFunctionBody(node, allowExpressionBody);\n    this.inGenerator = oldInGen;\n    this.inAsync = oldInAsync;\n    this.yieldPos = oldYieldPos;\n    this.awaitPos = oldAwaitPos;\n    this.inFunction = oldInFunc;\n    return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n  };\n\n  pp$1.parseFunctionParams = function (node) {\n    this.expect(tt.parenL);\n    node.params = this.parseBindingList(tt.parenR, false, this.options.ecmaVersion >= 8, true);\n    this.checkYieldAwaitInDefaultParams();\n  }; // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n\n  pp$1.parseClass = function (node, isStatement) {\n    var this$1 = this;\n    this.next();\n    if (isStatement == null) isStatement = this.type === tt.name;\n    this.parseClassId(node, isStatement);\n    this.parseClassSuper(node);\n    var classBody = this.startNode();\n    var hadConstructor = false;\n    classBody.body = [];\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (this$1.eat(tt.semi)) continue;\n      var method = this$1.startNode();\n      var isGenerator = this$1.eat(tt.star);\n      var isAsync = false;\n      var isMaybeStatic = this$1.type === tt.name && this$1.value === \"static\";\n      this$1.parsePropertyName(method);\n      method.static = isMaybeStatic && this$1.type !== tt.parenL;\n\n      if (method.static) {\n        if (isGenerator) this$1.unexpected();\n        isGenerator = this$1.eat(tt.star);\n        this$1.parsePropertyName(method);\n      }\n\n      if (this$1.options.ecmaVersion >= 8 && !isGenerator && !method.computed && method.key.type === \"Identifier\" && method.key.name === \"async\" && this$1.type !== tt.parenL && !this$1.canInsertSemicolon()) {\n        isAsync = true;\n        this$1.parsePropertyName(method);\n      }\n\n      method.kind = \"method\";\n      var isGetSet = false;\n\n      if (!method.computed) {\n        var key = method.key;\n\n        if (!isGenerator && !isAsync && key.type === \"Identifier\" && this$1.type !== tt.parenL && (key.name === \"get\" || key.name === \"set\")) {\n          isGetSet = true;\n          method.kind = key.name;\n          key = this$1.parsePropertyName(method);\n        }\n\n        if (!method.static && (key.type === \"Identifier\" && key.name === \"constructor\" || key.type === \"Literal\" && key.value === \"constructor\")) {\n          if (hadConstructor) this$1.raise(key.start, \"Duplicate constructor in the same class\");\n          if (isGetSet) this$1.raise(key.start, \"Constructor can't have get/set modifier\");\n          if (isGenerator) this$1.raise(key.start, \"Constructor can't be a generator\");\n          if (isAsync) this$1.raise(key.start, \"Constructor can't be an async method\");\n          method.kind = \"constructor\";\n          hadConstructor = true;\n        }\n      }\n\n      this$1.parseClassMethod(classBody, method, isGenerator, isAsync);\n\n      if (isGetSet) {\n        var paramCount = method.kind === \"get\" ? 0 : 1;\n\n        if (method.value.params.length !== paramCount) {\n          var start = method.value.start;\n          if (method.kind === \"get\") this$1.raiseRecoverable(start, \"getter should have no params\");else this$1.raiseRecoverable(start, \"setter should have exactly one param\");\n        } else {\n          if (method.kind === \"set\" && method.value.params[0].type === \"RestElement\") this$1.raiseRecoverable(method.value.params[0].start, \"Setter cannot use rest params\");\n        }\n      }\n    }\n\n    node.body = this.finishNode(classBody, \"ClassBody\");\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  };\n\n  pp$1.parseClassMethod = function (classBody, method, isGenerator, isAsync) {\n    method.value = this.parseMethod(isGenerator, isAsync);\n    classBody.body.push(this.finishNode(method, \"MethodDefinition\"));\n  };\n\n  pp$1.parseClassId = function (node, isStatement) {\n    node.id = this.type === tt.name ? this.parseIdent() : isStatement ? this.unexpected() : null;\n  };\n\n  pp$1.parseClassSuper = function (node) {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }; // Parses module export declaration.\n\n\n  pp$1.parseExport = function (node, exports) {\n    var this$1 = this;\n    this.next(); // export * from '...'\n\n    if (this.eat(tt.star)) {\n      this.expectContextual(\"from\");\n      node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected();\n      this.semicolon();\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      // export default ...\n      this.checkExport(exports, \"default\", this.lastTokStart);\n      var isAsync;\n\n      if (this.type === tt._function || (isAsync = this.isAsyncFunction())) {\n        var fNode = this.startNode();\n        this.next();\n        if (isAsync) this.next();\n        node.declaration = this.parseFunction(fNode, null, false, isAsync);\n      } else if (this.type === tt._class) {\n        var cNode = this.startNode();\n        node.declaration = this.parseClass(cNode, null);\n      } else {\n        node.declaration = this.parseMaybeAssign();\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    } // export var|const|let|function|class ...\n\n\n    if (this.shouldParseExportStatement()) {\n      node.declaration = this.parseStatement(true);\n      if (node.declaration.type === \"VariableDeclaration\") this.checkVariableExport(exports, node.declaration.declarations);else this.checkExport(exports, node.declaration.id.name, node.declaration.id.start);\n      node.specifiers = [];\n      node.source = null;\n    } else {\n      // export { x, y as z } [from '...']\n      node.declaration = null;\n      node.specifiers = this.parseExportSpecifiers(exports);\n\n      if (this.eatContextual(\"from\")) {\n        node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected();\n      } else {\n        // check for keywords used as local names\n        for (var i = 0; i < node.specifiers.length; i++) {\n          if (this$1.keywords.test(node.specifiers[i].local.name) || this$1.reservedWords.test(node.specifiers[i].local.name)) {\n            this$1.unexpected(node.specifiers[i].local.start);\n          }\n        }\n\n        node.source = null;\n      }\n\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ExportNamedDeclaration\");\n  };\n\n  pp$1.checkExport = function (exports, name, pos) {\n    if (!exports) return;\n    if (Object.prototype.hasOwnProperty.call(exports, name)) this.raiseRecoverable(pos, \"Duplicate export '\" + name + \"'\");\n    exports[name] = true;\n  };\n\n  pp$1.checkPatternExport = function (exports, pat) {\n    var this$1 = this;\n    var type = pat.type;\n    if (type == \"Identifier\") this.checkExport(exports, pat.name, pat.start);else if (type == \"ObjectPattern\") for (var i = 0; i < pat.properties.length; ++i) this$1.checkPatternExport(exports, pat.properties[i].value);else if (type == \"ArrayPattern\") for (var i$1 = 0; i$1 < pat.elements.length; ++i$1) {\n      var elt = pat.elements[i$1];\n      if (elt) this$1.checkPatternExport(exports, elt);\n    } else if (type == \"AssignmentPattern\") this.checkPatternExport(exports, pat.left);else if (type == \"ParenthesizedExpression\") this.checkPatternExport(exports, pat.expression);\n  };\n\n  pp$1.checkVariableExport = function (exports, decls) {\n    var this$1 = this;\n    if (!exports) return;\n\n    for (var i = 0; i < decls.length; i++) this$1.checkPatternExport(exports, decls[i].id);\n  };\n\n  pp$1.shouldParseExportStatement = function () {\n    return this.type.keyword === \"var\" || this.type.keyword === \"const\" || this.type.keyword === \"class\" || this.type.keyword === \"function\" || this.isLet() || this.isAsyncFunction();\n  }; // Parses a comma-separated list of module exports.\n\n\n  pp$1.parseExportSpecifiers = function (exports) {\n    var this$1 = this;\n    var nodes = [],\n        first = true; // export { x, y as z } [from '...']\n\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (!first) {\n        this$1.expect(tt.comma);\n        if (this$1.afterTrailingComma(tt.braceR)) break;\n      } else first = false;\n\n      var node = this$1.startNode();\n      node.local = this$1.parseIdent(true);\n      node.exported = this$1.eatContextual(\"as\") ? this$1.parseIdent(true) : node.local;\n      this$1.checkExport(exports, node.exported.name, node.exported.start);\n      nodes.push(this$1.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }; // Parses import declaration.\n\n\n  pp$1.parseImport = function (node) {\n    this.next(); // import '...'\n\n    if (this.type === tt.string) {\n      node.specifiers = empty;\n      node.source = this.parseExprAtom();\n    } else {\n      node.specifiers = this.parseImportSpecifiers();\n      this.expectContextual(\"from\");\n      node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected();\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }; // Parses a comma-separated list of module imports.\n\n\n  pp$1.parseImportSpecifiers = function () {\n    var this$1 = this;\n    var nodes = [],\n        first = true;\n\n    if (this.type === tt.name) {\n      // import defaultObj, { x, y as z } from '...'\n      var node = this.startNode();\n      node.local = this.parseIdent();\n      this.checkLVal(node.local, true);\n      nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"));\n      if (!this.eat(tt.comma)) return nodes;\n    }\n\n    if (this.type === tt.star) {\n      var node$1 = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n      node$1.local = this.parseIdent();\n      this.checkLVal(node$1.local, true);\n      nodes.push(this.finishNode(node$1, \"ImportNamespaceSpecifier\"));\n      return nodes;\n    }\n\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (!first) {\n        this$1.expect(tt.comma);\n        if (this$1.afterTrailingComma(tt.braceR)) break;\n      } else first = false;\n\n      var node$2 = this$1.startNode();\n      node$2.imported = this$1.parseIdent(true);\n\n      if (this$1.eatContextual(\"as\")) {\n        node$2.local = this$1.parseIdent();\n      } else {\n        node$2.local = node$2.imported;\n        if (this$1.isKeyword(node$2.local.name)) this$1.unexpected(node$2.local.start);\n        if (this$1.reservedWordsStrict.test(node$2.local.name)) this$1.raiseRecoverable(node$2.local.start, \"The keyword '\" + node$2.local.name + \"' is reserved\");\n      }\n\n      this$1.checkLVal(node$2.local, true);\n      nodes.push(this$1.finishNode(node$2, \"ImportSpecifier\"));\n    }\n\n    return nodes;\n  };\n\n  var pp$2 = Parser.prototype; // Convert existing expression atom to assignable pattern\n  // if possible.\n\n  pp$2.toAssignable = function (node, isBinding) {\n    var this$1 = this;\n\n    if (this.options.ecmaVersion >= 6 && node) {\n      switch (node.type) {\n        case \"Identifier\":\n          if (this.inAsync && node.name === \"await\") this.raise(node.start, \"Can not use 'await' as identifier inside an async function\");\n          break;\n\n        case \"ObjectPattern\":\n        case \"ArrayPattern\":\n          break;\n\n        case \"ObjectExpression\":\n          node.type = \"ObjectPattern\";\n\n          for (var i = 0; i < node.properties.length; i++) {\n            var prop = node.properties[i];\n            if (prop.kind !== \"init\") this$1.raise(prop.key.start, \"Object pattern can't contain getter or setter\");\n            this$1.toAssignable(prop.value, isBinding);\n          }\n\n          break;\n\n        case \"ArrayExpression\":\n          node.type = \"ArrayPattern\";\n          this.toAssignableList(node.elements, isBinding);\n          break;\n\n        case \"AssignmentExpression\":\n          if (node.operator === \"=\") {\n            node.type = \"AssignmentPattern\";\n            delete node.operator;\n            this.toAssignable(node.left, isBinding); // falls through to AssignmentPattern\n          } else {\n            this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\");\n            break;\n          }\n\n        case \"AssignmentPattern\":\n          break;\n\n        case \"ParenthesizedExpression\":\n          node.expression = this.toAssignable(node.expression, isBinding);\n          break;\n\n        case \"MemberExpression\":\n          if (!isBinding) break;\n\n        default:\n          this.raise(node.start, \"Assigning to rvalue\");\n      }\n    }\n\n    return node;\n  }; // Convert list of expression atoms to binding list.\n\n\n  pp$2.toAssignableList = function (exprList, isBinding) {\n    var this$1 = this;\n    var end = exprList.length;\n\n    if (end) {\n      var last = exprList[end - 1];\n\n      if (last && last.type == \"RestElement\") {\n        --end;\n      } else if (last && last.type == \"SpreadElement\") {\n        last.type = \"RestElement\";\n        var arg = last.argument;\n        this.toAssignable(arg, isBinding);\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\") this.unexpected(arg.start);\n        --end;\n      }\n\n      if (isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\") this.unexpected(last.argument.start);\n    }\n\n    for (var i = 0; i < end; i++) {\n      var elt = exprList[i];\n      if (elt) this$1.toAssignable(elt, isBinding);\n    }\n\n    return exprList;\n  }; // Parses spread element.\n\n\n  pp$2.parseSpread = function (refDestructuringErrors) {\n    var node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n    return this.finishNode(node, \"SpreadElement\");\n  };\n\n  pp$2.parseRest = function (allowNonIdent) {\n    var node = this.startNode();\n    this.next(); // RestElement inside of a function parameter must be an identifier\n\n    if (allowNonIdent) node.argument = this.type === tt.name ? this.parseIdent() : this.unexpected();else node.argument = this.type === tt.name || this.type === tt.bracketL ? this.parseBindingAtom() : this.unexpected();\n    return this.finishNode(node, \"RestElement\");\n  }; // Parses lvalue (assignable) atom.\n\n\n  pp$2.parseBindingAtom = function () {\n    if (this.options.ecmaVersion < 6) return this.parseIdent();\n\n    switch (this.type) {\n      case tt.name:\n        return this.parseIdent();\n\n      case tt.bracketL:\n        var node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(tt.bracketR, true, true);\n        return this.finishNode(node, \"ArrayPattern\");\n\n      case tt.braceL:\n        return this.parseObj(true);\n\n      default:\n        this.unexpected();\n    }\n  };\n\n  pp$2.parseBindingList = function (close, allowEmpty, allowTrailingComma, allowNonIdent) {\n    var this$1 = this;\n    var elts = [],\n        first = true;\n\n    while (!this.eat(close)) {\n      if (first) first = false;else this$1.expect(tt.comma);\n\n      if (allowEmpty && this$1.type === tt.comma) {\n        elts.push(null);\n      } else if (allowTrailingComma && this$1.afterTrailingComma(close)) {\n        break;\n      } else if (this$1.type === tt.ellipsis) {\n        var rest = this$1.parseRest(allowNonIdent);\n        this$1.parseBindingListItem(rest);\n        elts.push(rest);\n        if (this$1.type === tt.comma) this$1.raise(this$1.start, \"Comma is not permitted after the rest element\");\n        this$1.expect(close);\n        break;\n      } else {\n        var elem = this$1.parseMaybeDefault(this$1.start, this$1.startLoc);\n        this$1.parseBindingListItem(elem);\n        elts.push(elem);\n      }\n    }\n\n    return elts;\n  };\n\n  pp$2.parseBindingListItem = function (param) {\n    return param;\n  }; // Parses assignment pattern around given atom if possible.\n\n\n  pp$2.parseMaybeDefault = function (startPos, startLoc, left) {\n    left = left || this.parseBindingAtom();\n    if (this.options.ecmaVersion < 6 || !this.eat(tt.eq)) return left;\n    var node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssign();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }; // Verify that a node is an lval — something that can be assigned\n  // to.\n\n\n  pp$2.checkLVal = function (expr, isBinding, checkClashes) {\n    var this$1 = this;\n\n    switch (expr.type) {\n      case \"Identifier\":\n        if (this.strict && this.reservedWordsStrictBind.test(expr.name)) this.raiseRecoverable(expr.start, (isBinding ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\");\n\n        if (checkClashes) {\n          if (has(checkClashes, expr.name)) this.raiseRecoverable(expr.start, \"Argument name clash\");\n          checkClashes[expr.name] = true;\n        }\n\n        break;\n\n      case \"MemberExpression\":\n        if (isBinding) this.raiseRecoverable(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" member expression\");\n        break;\n\n      case \"ObjectPattern\":\n        for (var i = 0; i < expr.properties.length; i++) this$1.checkLVal(expr.properties[i].value, isBinding, checkClashes);\n\n        break;\n\n      case \"ArrayPattern\":\n        for (var i$1 = 0; i$1 < expr.elements.length; i$1++) {\n          var elem = expr.elements[i$1];\n          if (elem) this$1.checkLVal(elem, isBinding, checkClashes);\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(expr.left, isBinding, checkClashes);\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(expr.argument, isBinding, checkClashes);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(expr.expression, isBinding, checkClashes);\n        break;\n\n      default:\n        this.raise(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" rvalue\");\n    }\n  }; // A recursive descent parser operates by defining functions for all\n  // syntactic elements, and recursively calling those, each function\n  // advancing the input stream and returning an AST node. Precedence\n  // of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n  // instead of `(!x)[1]` is handled by the fact that the parser\n  // function that parses unary prefix operators is called first, and\n  // in turn calls the function that parses `[]` subscripts — that\n  // way, it'll receive the node for `x[1]` already parsed, and wraps\n  // *that* in the unary operator node.\n  //\n  // Acorn uses an [operator precedence parser][opp] to handle binary\n  // operator precedence, because it is much more compact than using\n  // the technique outlined above, which uses different, nesting\n  // functions to specify precedence, for all of the ten binary\n  // precedence levels that JavaScript defines.\n  //\n  // [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\n\n  var pp$3 = Parser.prototype; // Check if property name clashes with already added.\n  // Object/class getters and setters are not allowed to clash —\n  // either with each other or with an init property — and in\n  // strict mode, init properties are also not allowed to be repeated.\n\n  pp$3.checkPropClash = function (prop, propHash) {\n    if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) return;\n    var key = prop.key;\n    var name;\n\n    switch (key.type) {\n      case \"Identifier\":\n        name = key.name;\n        break;\n\n      case \"Literal\":\n        name = String(key.value);\n        break;\n\n      default:\n        return;\n    }\n\n    var kind = prop.kind;\n\n    if (this.options.ecmaVersion >= 6) {\n      if (name === \"__proto__\" && kind === \"init\") {\n        if (propHash.proto) this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\");\n        propHash.proto = true;\n      }\n\n      return;\n    }\n\n    name = \"$\" + name;\n    var other = propHash[name];\n\n    if (other) {\n      var isGetSet = kind !== \"init\";\n      if ((this.strict || isGetSet) && other[kind] || !(isGetSet ^ other.init)) this.raiseRecoverable(key.start, \"Redefinition of property\");\n    } else {\n      other = propHash[name] = {\n        init: false,\n        get: false,\n        set: false\n      };\n    }\n\n    other[kind] = true;\n  }; // ### Expression parsing\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function(s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n  // Parse a full expression. The optional arguments are used to\n  // forbid the `in` operator (in for loops initalization expressions)\n  // and provide reference for storing '=' operator inside shorthand\n  // property assignment in contexts where both object expression\n  // and object pattern might appear (so it's possible to raise\n  // delayed syntax error at correct position).\n\n\n  pp$3.parseExpression = function (noIn, refDestructuringErrors) {\n    var this$1 = this;\n    var startPos = this.start,\n        startLoc = this.startLoc;\n    var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);\n\n    if (this.type === tt.comma) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(tt.comma)) node.expressions.push(this$1.parseMaybeAssign(noIn, refDestructuringErrors));\n\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }; // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n\n\n  pp$3.parseMaybeAssign = function (noIn, refDestructuringErrors, afterLeftParse) {\n    if (this.inGenerator && this.isContextual(\"yield\")) return this.parseYield();\n    var ownDestructuringErrors = false,\n        oldParenAssign = -1;\n\n    if (refDestructuringErrors) {\n      oldParenAssign = refDestructuringErrors.parenthesizedAssign;\n      refDestructuringErrors.parenthesizedAssign = -1;\n    } else {\n      refDestructuringErrors = new DestructuringErrors();\n      ownDestructuringErrors = true;\n    }\n\n    var startPos = this.start,\n        startLoc = this.startLoc;\n    if (this.type == tt.parenL || this.type == tt.name) this.potentialArrowAt = this.start;\n    var left = this.parseMaybeConditional(noIn, refDestructuringErrors);\n    if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc);\n\n    if (this.type.isAssign) {\n      this.checkPatternErrors(refDestructuringErrors, true);\n      if (!ownDestructuringErrors) DestructuringErrors.call(refDestructuringErrors);\n      var node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.value;\n      node.left = this.type === tt.eq ? this.toAssignable(left) : left;\n      refDestructuringErrors.shorthandAssign = -1; // reset because shorthand default was used correctly\n\n      this.checkLVal(left);\n      this.next();\n      node.right = this.parseMaybeAssign(noIn);\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else {\n      if (ownDestructuringErrors) this.checkExpressionErrors(refDestructuringErrors, true);\n    }\n\n    if (oldParenAssign > -1) refDestructuringErrors.parenthesizedAssign = oldParenAssign;\n    return left;\n  }; // Parse a ternary conditional (`?:`) operator.\n\n\n  pp$3.parseMaybeConditional = function (noIn, refDestructuringErrors) {\n    var startPos = this.start,\n        startLoc = this.startLoc;\n    var expr = this.parseExprOps(noIn, refDestructuringErrors);\n    if (this.checkExpressionErrors(refDestructuringErrors)) return expr;\n\n    if (this.eat(tt.question)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssign();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign(noIn);\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }; // Start the precedence parser.\n\n\n  pp$3.parseExprOps = function (noIn, refDestructuringErrors) {\n    var startPos = this.start,\n        startLoc = this.startLoc;\n    var expr = this.parseMaybeUnary(refDestructuringErrors, false);\n    if (this.checkExpressionErrors(refDestructuringErrors)) return expr;\n    return this.parseExprOp(expr, startPos, startLoc, -1, noIn);\n  }; // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n\n  pp$3.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, noIn) {\n    var prec = this.type.binop;\n\n    if (prec != null && (!noIn || this.type !== tt._in)) {\n      if (prec > minPrec) {\n        var logical = this.type === tt.logicalOR || this.type === tt.logicalAND;\n        var op = this.value;\n        this.next();\n        var startPos = this.start,\n            startLoc = this.startLoc;\n        var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);\n        var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical);\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);\n      }\n    }\n\n    return left;\n  };\n\n  pp$3.buildBinary = function (startPos, startLoc, left, right, op, logical) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.operator = op;\n    node.right = right;\n    return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\");\n  }; // Parse unary operators, both prefix and postfix.\n\n\n  pp$3.parseMaybeUnary = function (refDestructuringErrors, sawUnary) {\n    var this$1 = this;\n    var startPos = this.start,\n        startLoc = this.startLoc,\n        expr;\n\n    if (this.inAsync && this.isContextual(\"await\")) {\n      expr = this.parseAwait(refDestructuringErrors);\n      sawUnary = true;\n    } else if (this.type.prefix) {\n      var node = this.startNode(),\n          update = this.type === tt.incDec;\n      node.operator = this.value;\n      node.prefix = true;\n      this.next();\n      node.argument = this.parseMaybeUnary(null, true);\n      this.checkExpressionErrors(refDestructuringErrors, true);\n      if (update) this.checkLVal(node.argument);else if (this.strict && node.operator === \"delete\" && node.argument.type === \"Identifier\") this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\");else sawUnary = true;\n      expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n    } else {\n      expr = this.parseExprSubscripts(refDestructuringErrors);\n      if (this.checkExpressionErrors(refDestructuringErrors)) return expr;\n\n      while (this.type.postfix && !this.canInsertSemicolon()) {\n        var node$1 = this$1.startNodeAt(startPos, startLoc);\n        node$1.operator = this$1.value;\n        node$1.prefix = false;\n        node$1.argument = expr;\n        this$1.checkLVal(expr);\n        this$1.next();\n        expr = this$1.finishNode(node$1, \"UpdateExpression\");\n      }\n    }\n\n    if (!sawUnary && this.eat(tt.starstar)) return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), \"**\", false);else return expr;\n  }; // Parse call, dot, and `[]`-subscript expressions.\n\n\n  pp$3.parseExprSubscripts = function (refDestructuringErrors) {\n    var startPos = this.start,\n        startLoc = this.startLoc;\n    var expr = this.parseExprAtom(refDestructuringErrors);\n    var skipArrowSubscripts = expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\";\n    if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) return expr;\n    var result = this.parseSubscripts(expr, startPos, startLoc);\n\n    if (refDestructuringErrors && result.type === \"MemberExpression\") {\n      if (refDestructuringErrors.parenthesizedAssign >= result.start) refDestructuringErrors.parenthesizedAssign = -1;\n      if (refDestructuringErrors.parenthesizedBind >= result.start) refDestructuringErrors.parenthesizedBind = -1;\n    }\n\n    return result;\n  };\n\n  pp$3.parseSubscripts = function (base, startPos, startLoc, noCalls) {\n    var this$1 = this;\n    var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === \"Identifier\" && base.name === \"async\" && this.lastTokEnd == base.end && !this.canInsertSemicolon();\n\n    for (var computed;;) {\n      if ((computed = this$1.eat(tt.bracketL)) || this$1.eat(tt.dot)) {\n        var node = this$1.startNodeAt(startPos, startLoc);\n        node.object = base;\n        node.property = computed ? this$1.parseExpression() : this$1.parseIdent(true);\n        node.computed = !!computed;\n        if (computed) this$1.expect(tt.bracketR);\n        base = this$1.finishNode(node, \"MemberExpression\");\n      } else if (!noCalls && this$1.eat(tt.parenL)) {\n        var refDestructuringErrors = new DestructuringErrors(),\n            oldYieldPos = this$1.yieldPos,\n            oldAwaitPos = this$1.awaitPos;\n        this$1.yieldPos = 0;\n        this$1.awaitPos = 0;\n        var exprList = this$1.parseExprList(tt.parenR, this$1.options.ecmaVersion >= 8, false, refDestructuringErrors);\n\n        if (maybeAsyncArrow && !this$1.canInsertSemicolon() && this$1.eat(tt.arrow)) {\n          this$1.checkPatternErrors(refDestructuringErrors, false);\n          this$1.checkYieldAwaitInDefaultParams();\n          this$1.yieldPos = oldYieldPos;\n          this$1.awaitPos = oldAwaitPos;\n          return this$1.parseArrowExpression(this$1.startNodeAt(startPos, startLoc), exprList, true);\n        }\n\n        this$1.checkExpressionErrors(refDestructuringErrors, true);\n        this$1.yieldPos = oldYieldPos || this$1.yieldPos;\n        this$1.awaitPos = oldAwaitPos || this$1.awaitPos;\n        var node$1 = this$1.startNodeAt(startPos, startLoc);\n        node$1.callee = base;\n        node$1.arguments = exprList;\n        base = this$1.finishNode(node$1, \"CallExpression\");\n      } else if (this$1.type === tt.backQuote) {\n        var node$2 = this$1.startNodeAt(startPos, startLoc);\n        node$2.tag = base;\n        node$2.quasi = this$1.parseTemplate();\n        base = this$1.finishNode(node$2, \"TaggedTemplateExpression\");\n      } else {\n        return base;\n      }\n    }\n  }; // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n\n  pp$3.parseExprAtom = function (refDestructuringErrors) {\n    var node,\n        canBeArrow = this.potentialArrowAt == this.start;\n\n    switch (this.type) {\n      case tt._super:\n        if (!this.inFunction) this.raise(this.start, \"'super' outside of function or class\");\n\n      case tt._this:\n        var type = this.type === tt._this ? \"ThisExpression\" : \"Super\";\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, type);\n\n      case tt.name:\n        var startPos = this.start,\n            startLoc = this.startLoc;\n        var id = this.parseIdent(this.type !== tt.name);\n        if (this.options.ecmaVersion >= 8 && id.name === \"async\" && !this.canInsertSemicolon() && this.eat(tt._function)) return this.parseFunction(this.startNodeAt(startPos, startLoc), false, false, true);\n\n        if (canBeArrow && !this.canInsertSemicolon()) {\n          if (this.eat(tt.arrow)) return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false);\n\n          if (this.options.ecmaVersion >= 8 && id.name === \"async\" && this.type === tt.name) {\n            id = this.parseIdent();\n            if (this.canInsertSemicolon() || !this.eat(tt.arrow)) this.unexpected();\n            return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true);\n          }\n        }\n\n        return id;\n\n      case tt.regexp:\n        var value = this.value;\n        node = this.parseLiteral(value.value);\n        node.regex = {\n          pattern: value.pattern,\n          flags: value.flags\n        };\n        return node;\n\n      case tt.num:\n      case tt.string:\n        return this.parseLiteral(this.value);\n\n      case tt._null:\n      case tt._true:\n      case tt._false:\n        node = this.startNode();\n        node.value = this.type === tt._null ? null : this.type === tt._true;\n        node.raw = this.type.keyword;\n        this.next();\n        return this.finishNode(node, \"Literal\");\n\n      case tt.parenL:\n        var start = this.start,\n            expr = this.parseParenAndDistinguishExpression(canBeArrow);\n\n        if (refDestructuringErrors) {\n          if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr)) refDestructuringErrors.parenthesizedAssign = start;\n          if (refDestructuringErrors.parenthesizedBind < 0) refDestructuringErrors.parenthesizedBind = start;\n        }\n\n        return expr;\n\n      case tt.bracketL:\n        node = this.startNode();\n        this.next();\n        node.elements = this.parseExprList(tt.bracketR, true, true, refDestructuringErrors);\n        return this.finishNode(node, \"ArrayExpression\");\n\n      case tt.braceL:\n        return this.parseObj(false, refDestructuringErrors);\n\n      case tt._function:\n        node = this.startNode();\n        this.next();\n        return this.parseFunction(node, false);\n\n      case tt._class:\n        return this.parseClass(this.startNode(), false);\n\n      case tt._new:\n        return this.parseNew();\n\n      case tt.backQuote:\n        return this.parseTemplate();\n\n      default:\n        this.unexpected();\n    }\n  };\n\n  pp$3.parseLiteral = function (value) {\n    var node = this.startNode();\n    node.value = value;\n    node.raw = this.input.slice(this.start, this.end);\n    this.next();\n    return this.finishNode(node, \"Literal\");\n  };\n\n  pp$3.parseParenExpression = function () {\n    this.expect(tt.parenL);\n    var val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  };\n\n  pp$3.parseParenAndDistinguishExpression = function (canBeArrow) {\n    var this$1 = this;\n    var startPos = this.start,\n        startLoc = this.startLoc,\n        val,\n        allowTrailingComma = this.options.ecmaVersion >= 8;\n\n    if (this.options.ecmaVersion >= 6) {\n      this.next();\n      var innerStartPos = this.start,\n          innerStartLoc = this.startLoc;\n      var exprList = [],\n          first = true,\n          lastIsComma = false;\n      var refDestructuringErrors = new DestructuringErrors(),\n          oldYieldPos = this.yieldPos,\n          oldAwaitPos = this.awaitPos,\n          spreadStart,\n          innerParenStart;\n      this.yieldPos = 0;\n      this.awaitPos = 0;\n\n      while (this.type !== tt.parenR) {\n        first ? first = false : this$1.expect(tt.comma);\n\n        if (allowTrailingComma && this$1.afterTrailingComma(tt.parenR, true)) {\n          lastIsComma = true;\n          break;\n        } else if (this$1.type === tt.ellipsis) {\n          spreadStart = this$1.start;\n          exprList.push(this$1.parseParenItem(this$1.parseRest()));\n          if (this$1.type === tt.comma) this$1.raise(this$1.start, \"Comma is not permitted after the rest element\");\n          break;\n        } else {\n          if (this$1.type === tt.parenL && !innerParenStart) {\n            innerParenStart = this$1.start;\n          }\n\n          exprList.push(this$1.parseMaybeAssign(false, refDestructuringErrors, this$1.parseParenItem));\n        }\n      }\n\n      var innerEndPos = this.start,\n          innerEndLoc = this.startLoc;\n      this.expect(tt.parenR);\n\n      if (canBeArrow && !this.canInsertSemicolon() && this.eat(tt.arrow)) {\n        this.checkPatternErrors(refDestructuringErrors, false);\n        this.checkYieldAwaitInDefaultParams();\n        if (innerParenStart) this.unexpected(innerParenStart);\n        this.yieldPos = oldYieldPos;\n        this.awaitPos = oldAwaitPos;\n        return this.parseParenArrowList(startPos, startLoc, exprList);\n      }\n\n      if (!exprList.length || lastIsComma) this.unexpected(this.lastTokStart);\n      if (spreadStart) this.unexpected(spreadStart);\n      this.checkExpressionErrors(refDestructuringErrors, true);\n      this.yieldPos = oldYieldPos || this.yieldPos;\n      this.awaitPos = oldAwaitPos || this.awaitPos;\n\n      if (exprList.length > 1) {\n        val = this.startNodeAt(innerStartPos, innerStartLoc);\n        val.expressions = exprList;\n        this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n      } else {\n        val = exprList[0];\n      }\n    } else {\n      val = this.parseParenExpression();\n    }\n\n    if (this.options.preserveParens) {\n      var par = this.startNodeAt(startPos, startLoc);\n      par.expression = val;\n      return this.finishNode(par, \"ParenthesizedExpression\");\n    } else {\n      return val;\n    }\n  };\n\n  pp$3.parseParenItem = function (item) {\n    return item;\n  };\n\n  pp$3.parseParenArrowList = function (startPos, startLoc, exprList) {\n    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList);\n  }; // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n\n\n  var empty$1 = [];\n\n  pp$3.parseNew = function () {\n    var node = this.startNode();\n    var meta = this.parseIdent(true);\n\n    if (this.options.ecmaVersion >= 6 && this.eat(tt.dot)) {\n      node.meta = meta;\n      node.property = this.parseIdent(true);\n      if (node.property.name !== \"target\") this.raiseRecoverable(node.property.start, \"The only valid meta property for new is new.target\");\n      if (!this.inFunction) this.raiseRecoverable(node.start, \"new.target can only be used in functions\");\n      return this.finishNode(node, \"MetaProperty\");\n    }\n\n    var startPos = this.start,\n        startLoc = this.startLoc;\n    node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n    if (this.eat(tt.parenL)) node.arguments = this.parseExprList(tt.parenR, this.options.ecmaVersion >= 8, false);else node.arguments = empty$1;\n    return this.finishNode(node, \"NewExpression\");\n  }; // Parse template expression.\n\n\n  pp$3.parseTemplateElement = function () {\n    var elem = this.startNode();\n    elem.value = {\n      raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, '\\n'),\n      cooked: this.value\n    };\n    this.next();\n    elem.tail = this.type === tt.backQuote;\n    return this.finishNode(elem, \"TemplateElement\");\n  };\n\n  pp$3.parseTemplate = function () {\n    var this$1 = this;\n    var node = this.startNode();\n    this.next();\n    node.expressions = [];\n    var curElt = this.parseTemplateElement();\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      this$1.expect(tt.dollarBraceL);\n      node.expressions.push(this$1.parseExpression());\n      this$1.expect(tt.braceR);\n      node.quasis.push(curElt = this$1.parseTemplateElement());\n    }\n\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }; // Parse an object literal or binding pattern.\n\n\n  pp$3.parseObj = function (isPattern, refDestructuringErrors) {\n    var this$1 = this;\n    var node = this.startNode(),\n        first = true,\n        propHash = {};\n    node.properties = [];\n    this.next();\n\n    while (!this.eat(tt.braceR)) {\n      if (!first) {\n        this$1.expect(tt.comma);\n        if (this$1.afterTrailingComma(tt.braceR)) break;\n      } else first = false;\n\n      var prop = this$1.startNode(),\n          isGenerator,\n          isAsync,\n          startPos,\n          startLoc;\n\n      if (this$1.options.ecmaVersion >= 6) {\n        prop.method = false;\n        prop.shorthand = false;\n\n        if (isPattern || refDestructuringErrors) {\n          startPos = this$1.start;\n          startLoc = this$1.startLoc;\n        }\n\n        if (!isPattern) isGenerator = this$1.eat(tt.star);\n      }\n\n      this$1.parsePropertyName(prop);\n\n      if (!isPattern && this$1.options.ecmaVersion >= 8 && !isGenerator && !prop.computed && prop.key.type === \"Identifier\" && prop.key.name === \"async\" && this$1.type !== tt.parenL && this$1.type !== tt.colon && !this$1.canInsertSemicolon()) {\n        isAsync = true;\n        this$1.parsePropertyName(prop, refDestructuringErrors);\n      } else {\n        isAsync = false;\n      }\n\n      this$1.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors);\n      this$1.checkPropClash(prop, propHash);\n      node.properties.push(this$1.finishNode(prop, \"Property\"));\n    }\n\n    return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\");\n  };\n\n  pp$3.parsePropertyValue = function (prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors) {\n    if ((isGenerator || isAsync) && this.type === tt.colon) this.unexpected();\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);\n      prop.kind = \"init\";\n    } else if (this.options.ecmaVersion >= 6 && this.type === tt.parenL) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"init\";\n      prop.method = true;\n      prop.value = this.parseMethod(isGenerator, isAsync);\n    } else if (this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" && (prop.key.name === \"get\" || prop.key.name === \"set\") && this.type != tt.comma && this.type != tt.braceR) {\n      if (isGenerator || isAsync || isPattern) this.unexpected();\n      prop.kind = prop.key.name;\n      this.parsePropertyName(prop);\n      prop.value = this.parseMethod(false);\n      var paramCount = prop.kind === \"get\" ? 0 : 1;\n\n      if (prop.value.params.length !== paramCount) {\n        var start = prop.value.start;\n        if (prop.kind === \"get\") this.raiseRecoverable(start, \"getter should have no params\");else this.raiseRecoverable(start, \"setter should have exactly one param\");\n      } else {\n        if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\") this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\");\n      }\n    } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n      if (this.keywords.test(prop.key.name) || (this.strict ? this.reservedWordsStrict : this.reservedWords).test(prop.key.name) || this.inGenerator && prop.key.name == \"yield\" || this.inAsync && prop.key.name == \"await\") this.raiseRecoverable(prop.key.start, \"'\" + prop.key.name + \"' can not be used as shorthand property\");\n      prop.kind = \"init\";\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n      } else if (this.type === tt.eq && refDestructuringErrors) {\n        if (refDestructuringErrors.shorthandAssign < 0) refDestructuringErrors.shorthandAssign = this.start;\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n      } else {\n        prop.value = prop.key;\n      }\n\n      prop.shorthand = true;\n    } else this.unexpected();\n  };\n\n  pp$3.parsePropertyName = function (prop) {\n    if (this.options.ecmaVersion >= 6) {\n      if (this.eat(tt.bracketL)) {\n        prop.computed = true;\n        prop.key = this.parseMaybeAssign();\n        this.expect(tt.bracketR);\n        return prop.key;\n      } else {\n        prop.computed = false;\n      }\n    }\n\n    return prop.key = this.type === tt.num || this.type === tt.string ? this.parseExprAtom() : this.parseIdent(true);\n  }; // Initialize empty function node.\n\n\n  pp$3.initFunction = function (node) {\n    node.id = null;\n\n    if (this.options.ecmaVersion >= 6) {\n      node.generator = false;\n      node.expression = false;\n    }\n\n    if (this.options.ecmaVersion >= 8) node.async = false;\n  }; // Parse object or class method.\n\n\n  pp$3.parseMethod = function (isGenerator, isAsync) {\n    var node = this.startNode(),\n        oldInGen = this.inGenerator,\n        oldInAsync = this.inAsync,\n        oldYieldPos = this.yieldPos,\n        oldAwaitPos = this.awaitPos,\n        oldInFunc = this.inFunction;\n    this.initFunction(node);\n    if (this.options.ecmaVersion >= 6) node.generator = isGenerator;\n    if (this.options.ecmaVersion >= 8) node.async = !!isAsync;\n    this.inGenerator = node.generator;\n    this.inAsync = node.async;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.inFunction = true;\n    this.expect(tt.parenL);\n    node.params = this.parseBindingList(tt.parenR, false, this.options.ecmaVersion >= 8);\n    this.checkYieldAwaitInDefaultParams();\n    this.parseFunctionBody(node, false);\n    this.inGenerator = oldInGen;\n    this.inAsync = oldInAsync;\n    this.yieldPos = oldYieldPos;\n    this.awaitPos = oldAwaitPos;\n    this.inFunction = oldInFunc;\n    return this.finishNode(node, \"FunctionExpression\");\n  }; // Parse arrow function expression with given parameters.\n\n\n  pp$3.parseArrowExpression = function (node, params, isAsync) {\n    var oldInGen = this.inGenerator,\n        oldInAsync = this.inAsync,\n        oldYieldPos = this.yieldPos,\n        oldAwaitPos = this.awaitPos,\n        oldInFunc = this.inFunction;\n    this.initFunction(node);\n    if (this.options.ecmaVersion >= 8) node.async = !!isAsync;\n    this.inGenerator = false;\n    this.inAsync = node.async;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.inFunction = true;\n    node.params = this.toAssignableList(params, true);\n    this.parseFunctionBody(node, true);\n    this.inGenerator = oldInGen;\n    this.inAsync = oldInAsync;\n    this.yieldPos = oldYieldPos;\n    this.awaitPos = oldAwaitPos;\n    this.inFunction = oldInFunc;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }; // Parse function body and check parameters.\n\n\n  pp$3.parseFunctionBody = function (node, isArrowFunction) {\n    var isExpression = isArrowFunction && this.type !== tt.braceL;\n    var oldStrict = this.strict,\n        useStrict = false;\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      node.expression = true;\n    } else {\n      var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);\n\n      if (!oldStrict || nonSimple) {\n        useStrict = this.strictDirective(this.end); // If this is a strict mode function, verify that argument names\n        // are not repeated, and it does not try to bind the words `eval`\n        // or `arguments`.\n\n        if (useStrict && nonSimple) this.raiseRecoverable(node.start, \"Illegal 'use strict' directive in function with non-simple parameter list\");\n      } // Start a new scope with regard to labels and the `inFunction`\n      // flag (restore them to their old value afterwards).\n\n\n      var oldLabels = this.labels;\n      this.labels = [];\n      if (useStrict) this.strict = true;\n      node.body = this.parseBlock(true);\n      node.expression = false;\n      this.labels = oldLabels;\n    }\n\n    if (oldStrict || useStrict) {\n      this.strict = true;\n      if (node.id) this.checkLVal(node.id, true);\n      this.checkParams(node);\n      this.strict = oldStrict;\n    } else if (isArrowFunction || !this.isSimpleParamList(node.params)) {\n      this.checkParams(node);\n    }\n  };\n\n  pp$3.isSimpleParamList = function (params) {\n    for (var i = 0; i < params.length; i++) if (params[i].type !== \"Identifier\") return false;\n\n    return true;\n  }; // Checks function params for various disallowed patterns such as using \"eval\"\n  // or \"arguments\" and duplicate parameters.\n\n\n  pp$3.checkParams = function (node) {\n    var this$1 = this;\n    var nameHash = {};\n\n    for (var i = 0; i < node.params.length; i++) this$1.checkLVal(node.params[i], true, nameHash);\n  }; // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n\n  pp$3.parseExprList = function (close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n    var this$1 = this;\n    var elts = [],\n        first = true;\n\n    while (!this.eat(close)) {\n      if (!first) {\n        this$1.expect(tt.comma);\n        if (allowTrailingComma && this$1.afterTrailingComma(close)) break;\n      } else first = false;\n\n      var elt;\n      if (allowEmpty && this$1.type === tt.comma) elt = null;else if (this$1.type === tt.ellipsis) {\n        elt = this$1.parseSpread(refDestructuringErrors);\n        if (refDestructuringErrors && this$1.type === tt.comma && refDestructuringErrors.trailingComma < 0) refDestructuringErrors.trailingComma = this$1.start;\n      } else {\n        elt = this$1.parseMaybeAssign(false, refDestructuringErrors);\n      }\n      elts.push(elt);\n    }\n\n    return elts;\n  }; // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n\n\n  pp$3.parseIdent = function (liberal) {\n    var node = this.startNode();\n    if (liberal && this.options.allowReserved == \"never\") liberal = false;\n\n    if (this.type === tt.name) {\n      if (!liberal && (this.strict ? this.reservedWordsStrict : this.reservedWords).test(this.value) && (this.options.ecmaVersion >= 6 || this.input.slice(this.start, this.end).indexOf(\"\\\\\") == -1)) this.raiseRecoverable(this.start, \"The keyword '\" + this.value + \"' is reserved\");\n      if (this.inGenerator && this.value === \"yield\") this.raiseRecoverable(this.start, \"Can not use 'yield' as identifier inside a generator\");\n      if (this.inAsync && this.value === \"await\") this.raiseRecoverable(this.start, \"Can not use 'await' as identifier inside an async function\");\n      node.name = this.value;\n    } else if (liberal && this.type.keyword) {\n      node.name = this.type.keyword;\n    } else {\n      this.unexpected();\n    }\n\n    this.next();\n    return this.finishNode(node, \"Identifier\");\n  }; // Parses yield expression inside generator.\n\n\n  pp$3.parseYield = function () {\n    if (!this.yieldPos) this.yieldPos = this.start;\n    var node = this.startNode();\n    this.next();\n\n    if (this.type == tt.semi || this.canInsertSemicolon() || this.type != tt.star && !this.type.startsExpr) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(tt.star);\n      node.argument = this.parseMaybeAssign();\n    }\n\n    return this.finishNode(node, \"YieldExpression\");\n  };\n\n  pp$3.parseAwait = function () {\n    if (!this.awaitPos) this.awaitPos = this.start;\n    var node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeUnary(null, true);\n    return this.finishNode(node, \"AwaitExpression\");\n  };\n\n  var pp$4 = Parser.prototype; // This function is used to raise exceptions on parse errors. It\n  // takes an offset integer (into the current `input`) to indicate\n  // the location of the error, attaches the position to the end\n  // of the error message, and then raises a `SyntaxError` with that\n  // message.\n\n  pp$4.raise = function (pos, message) {\n    var loc = getLineInfo(this.input, pos);\n    message += \" (\" + loc.line + \":\" + loc.column + \")\";\n    var err = new SyntaxError(message);\n    err.pos = pos;\n    err.loc = loc;\n    err.raisedAt = this.pos;\n    throw err;\n  };\n\n  pp$4.raiseRecoverable = pp$4.raise;\n\n  pp$4.curPosition = function () {\n    if (this.options.locations) {\n      return new Position(this.curLine, this.pos - this.lineStart);\n    }\n  };\n\n  var Node = function Node(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    if (parser.options.locations) this.loc = new SourceLocation(parser, loc);\n    if (parser.options.directSourceFile) this.sourceFile = parser.options.directSourceFile;\n    if (parser.options.ranges) this.range = [pos, 0];\n  }; // Start an AST node, attaching a start offset.\n\n\n  var pp$5 = Parser.prototype;\n\n  pp$5.startNode = function () {\n    return new Node(this, this.start, this.startLoc);\n  };\n\n  pp$5.startNodeAt = function (pos, loc) {\n    return new Node(this, pos, loc);\n  }; // Finish an AST node, adding `type` and `end` properties.\n\n\n  function finishNodeAt(node, type, pos, loc) {\n    node.type = type;\n    node.end = pos;\n    if (this.options.locations) node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    return node;\n  }\n\n  pp$5.finishNode = function (node, type) {\n    return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);\n  }; // Finish node at given position\n\n\n  pp$5.finishNodeAt = function (node, type, pos, loc) {\n    return finishNodeAt.call(this, node, type, pos, loc);\n  }; // The algorithm used to determine whether a regexp can appear at a\n  // given point in the program is loosely based on sweet.js' approach.\n  // See https://github.com/mozilla/sweet.js/wiki/design\n\n\n  var TokContext = function TokContext(token, isExpr, preserveSpace, override) {\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n  };\n\n  var types = {\n    b_stat: new TokContext(\"{\", false),\n    b_expr: new TokContext(\"{\", true),\n    b_tmpl: new TokContext(\"${\", true),\n    p_stat: new TokContext(\"(\", false),\n    p_expr: new TokContext(\"(\", true),\n    q_tmpl: new TokContext(\"`\", true, true, function (p) {\n      return p.readTmplToken();\n    }),\n    f_expr: new TokContext(\"function\", true)\n  };\n  var pp$6 = Parser.prototype;\n\n  pp$6.initialContext = function () {\n    return [types.b_stat];\n  };\n\n  pp$6.braceIsBlock = function (prevType) {\n    if (prevType === tt.colon) {\n      var parent = this.curContext();\n      if (parent === types.b_stat || parent === types.b_expr) return !parent.isExpr;\n    }\n\n    if (prevType === tt._return) return lineBreak.test(this.input.slice(this.lastTokEnd, this.start));\n    if (prevType === tt._else || prevType === tt.semi || prevType === tt.eof || prevType === tt.parenR) return true;\n    if (prevType == tt.braceL) return this.curContext() === types.b_stat;\n    return !this.exprAllowed;\n  };\n\n  pp$6.updateContext = function (prevType) {\n    var update,\n        type = this.type;\n    if (type.keyword && prevType == tt.dot) this.exprAllowed = false;else if (update = type.updateContext) update.call(this, prevType);else this.exprAllowed = type.beforeExpr;\n  }; // Token-specific context update code\n\n\n  tt.parenR.updateContext = tt.braceR.updateContext = function () {\n    if (this.context.length == 1) {\n      this.exprAllowed = true;\n      return;\n    }\n\n    var out = this.context.pop();\n\n    if (out === types.b_stat && this.curContext() === types.f_expr) {\n      this.context.pop();\n      this.exprAllowed = false;\n    } else if (out === types.b_tmpl) {\n      this.exprAllowed = true;\n    } else {\n      this.exprAllowed = !out.isExpr;\n    }\n  };\n\n  tt.braceL.updateContext = function (prevType) {\n    this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);\n    this.exprAllowed = true;\n  };\n\n  tt.dollarBraceL.updateContext = function () {\n    this.context.push(types.b_tmpl);\n    this.exprAllowed = true;\n  };\n\n  tt.parenL.updateContext = function (prevType) {\n    var statementParens = prevType === tt._if || prevType === tt._for || prevType === tt._with || prevType === tt._while;\n    this.context.push(statementParens ? types.p_stat : types.p_expr);\n    this.exprAllowed = true;\n  };\n\n  tt.incDec.updateContext = function () {// tokExprAllowed stays unchanged\n  };\n\n  tt._function.updateContext = function (prevType) {\n    if (prevType.beforeExpr && prevType !== tt.semi && prevType !== tt._else && !((prevType === tt.colon || prevType === tt.braceL) && this.curContext() === types.b_stat)) this.context.push(types.f_expr);\n    this.exprAllowed = false;\n  };\n\n  tt.backQuote.updateContext = function () {\n    if (this.curContext() === types.q_tmpl) this.context.pop();else this.context.push(types.q_tmpl);\n    this.exprAllowed = false;\n  }; // Object type used to represent tokens. Note that normally, tokens\n  // simply exist as properties on the parser object. This is only\n  // used for the onToken callback and the external tokenizer.\n\n\n  var Token = function Token(p) {\n    this.type = p.type;\n    this.value = p.value;\n    this.start = p.start;\n    this.end = p.end;\n    if (p.options.locations) this.loc = new SourceLocation(p, p.startLoc, p.endLoc);\n    if (p.options.ranges) this.range = [p.start, p.end];\n  }; // ## Tokenizer\n\n\n  var pp$7 = Parser.prototype; // Are we running under Rhino?\n\n  var isRhino = typeof Packages == \"object\" && Object.prototype.toString.call(Packages) == \"[object JavaPackage]\"; // Move to the next token\n\n  pp$7.next = function () {\n    if (this.options.onToken) this.options.onToken(new Token(this));\n    this.lastTokEnd = this.end;\n    this.lastTokStart = this.start;\n    this.lastTokEndLoc = this.endLoc;\n    this.lastTokStartLoc = this.startLoc;\n    this.nextToken();\n  };\n\n  pp$7.getToken = function () {\n    this.next();\n    return new Token(this);\n  }; // If we're in an ES6 environment, make parsers iterable\n\n\n  if (typeof Symbol !== \"undefined\") pp$7[Symbol.iterator] = function () {\n    var self = this;\n    return {\n      next: function () {\n        var token = self.getToken();\n        return {\n          done: token.type === tt.eof,\n          value: token\n        };\n      }\n    };\n  }; // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  pp$7.curContext = function () {\n    return this.context[this.context.length - 1];\n  }; // Read a single token, updating the parser object's token-related\n  // properties.\n\n\n  pp$7.nextToken = function () {\n    var curContext = this.curContext();\n    if (!curContext || !curContext.preserveSpace) this.skipSpace();\n    this.start = this.pos;\n    if (this.options.locations) this.startLoc = this.curPosition();\n    if (this.pos >= this.input.length) return this.finishToken(tt.eof);\n    if (curContext.override) return curContext.override(this);else this.readToken(this.fullCharCodeAtPos());\n  };\n\n  pp$7.readToken = function (code) {\n    // Identifier or keyword. '\\uXXXX' sequences are allowed in\n    // identifiers, so '\\' also dispatches to that.\n    if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92\n    /* '\\' */\n    ) return this.readWord();\n    return this.getTokenFromCode(code);\n  };\n\n  pp$7.fullCharCodeAtPos = function () {\n    var code = this.input.charCodeAt(this.pos);\n    if (code <= 0xd7ff || code >= 0xe000) return code;\n    var next = this.input.charCodeAt(this.pos + 1);\n    return (code << 10) + next - 0x35fdc00;\n  };\n\n  pp$7.skipBlockComment = function () {\n    var this$1 = this;\n    var startLoc = this.options.onComment && this.curPosition();\n    var start = this.pos,\n        end = this.input.indexOf(\"*/\", this.pos += 2);\n    if (end === -1) this.raise(this.pos - 2, \"Unterminated comment\");\n    this.pos = end + 2;\n\n    if (this.options.locations) {\n      lineBreakG.lastIndex = start;\n      var match;\n\n      while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {\n        ++this$1.curLine;\n        this$1.lineStart = match.index + match[0].length;\n      }\n    }\n\n    if (this.options.onComment) this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());\n  };\n\n  pp$7.skipLineComment = function (startSkip) {\n    var this$1 = this;\n    var start = this.pos;\n    var startLoc = this.options.onComment && this.curPosition();\n    var ch = this.input.charCodeAt(this.pos += startSkip);\n\n    while (this.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {\n      ++this$1.pos;\n      ch = this$1.input.charCodeAt(this$1.pos);\n    }\n\n    if (this.options.onComment) this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());\n  }; // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n\n  pp$7.skipSpace = function () {\n    var this$1 = this;\n\n    loop: while (this.pos < this.input.length) {\n      var ch = this$1.input.charCodeAt(this$1.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n          // ' '\n          ++this$1.pos;\n          break;\n\n        case 13:\n          if (this$1.input.charCodeAt(this$1.pos + 1) === 10) {\n            ++this$1.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this$1.pos;\n\n          if (this$1.options.locations) {\n            ++this$1.curLine;\n            this$1.lineStart = this$1.pos;\n          }\n\n          break;\n\n        case 47:\n          // '/'\n          switch (this$1.input.charCodeAt(this$1.pos + 1)) {\n            case 42:\n              // '*'\n              this$1.skipBlockComment();\n              break;\n\n            case 47:\n              this$1.skipLineComment(2);\n              break;\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n            ++this$1.pos;\n          } else {\n            break loop;\n          }\n\n      }\n    }\n  }; // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `exprAllowed`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n\n  pp$7.finishToken = function (type, val) {\n    this.end = this.pos;\n    if (this.options.locations) this.endLoc = this.curPosition();\n    var prevType = this.type;\n    this.type = type;\n    this.value = val;\n    this.updateContext(prevType);\n  }; // ### Token reading\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n  //\n\n\n  pp$7.readToken_dot = function () {\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next >= 48 && next <= 57) return this.readNumber(true);\n    var next2 = this.input.charCodeAt(this.pos + 2);\n\n    if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {\n      // 46 = dot '.'\n      this.pos += 3;\n      return this.finishToken(tt.ellipsis);\n    } else {\n      ++this.pos;\n      return this.finishToken(tt.dot);\n    }\n  };\n\n  pp$7.readToken_slash = function () {\n    // '/'\n    var next = this.input.charCodeAt(this.pos + 1);\n\n    if (this.exprAllowed) {\n      ++this.pos;\n      return this.readRegexp();\n    }\n\n    if (next === 61) return this.finishOp(tt.assign, 2);\n    return this.finishOp(tt.slash, 1);\n  };\n\n  pp$7.readToken_mult_modulo_exp = function (code) {\n    // '%*'\n    var next = this.input.charCodeAt(this.pos + 1);\n    var size = 1;\n    var tokentype = code === 42 ? tt.star : tt.modulo; // exponentiation operator ** and **=\n\n    if (this.options.ecmaVersion >= 7 && next === 42) {\n      ++size;\n      tokentype = tt.starstar;\n      next = this.input.charCodeAt(this.pos + 2);\n    }\n\n    if (next === 61) return this.finishOp(tt.assign, size + 1);\n    return this.finishOp(tokentype, size);\n  };\n\n  pp$7.readToken_pipe_amp = function (code) {\n    // '|&'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === code) return this.finishOp(code === 124 ? tt.logicalOR : tt.logicalAND, 2);\n    if (next === 61) return this.finishOp(tt.assign, 2);\n    return this.finishOp(code === 124 ? tt.bitwiseOR : tt.bitwiseAND, 1);\n  };\n\n  pp$7.readToken_caret = function () {\n    // '^'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 61) return this.finishOp(tt.assign, 2);\n    return this.finishOp(tt.bitwiseXOR, 1);\n  };\n\n  pp$7.readToken_plus_min = function (code) {\n    // '+-'\n    var next = this.input.charCodeAt(this.pos + 1);\n\n    if (next === code) {\n      if (next == 45 && this.input.charCodeAt(this.pos + 2) == 62 && lineBreak.test(this.input.slice(this.lastTokEnd, this.pos))) {\n        // A `-->` line comment\n        this.skipLineComment(3);\n        this.skipSpace();\n        return this.nextToken();\n      }\n\n      return this.finishOp(tt.incDec, 2);\n    }\n\n    if (next === 61) return this.finishOp(tt.assign, 2);\n    return this.finishOp(tt.plusMin, 1);\n  };\n\n  pp$7.readToken_lt_gt = function (code) {\n    // '<>'\n    var next = this.input.charCodeAt(this.pos + 1);\n    var size = 1;\n\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n      if (this.input.charCodeAt(this.pos + size) === 61) return this.finishOp(tt.assign, size + 1);\n      return this.finishOp(tt.bitShift, size);\n    }\n\n    if (next == 33 && code == 60 && this.input.charCodeAt(this.pos + 2) == 45 && this.input.charCodeAt(this.pos + 3) == 45) {\n      if (this.inModule) this.unexpected(); // `<!--`, an XML-style comment that should be interpreted as a line comment\n\n      this.skipLineComment(4);\n      this.skipSpace();\n      return this.nextToken();\n    }\n\n    if (next === 61) size = 2;\n    return this.finishOp(tt.relational, size);\n  };\n\n  pp$7.readToken_eq_excl = function (code) {\n    // '=!'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 61) return this.finishOp(tt.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);\n\n    if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) {\n      // '=>'\n      this.pos += 2;\n      return this.finishToken(tt.arrow);\n    }\n\n    return this.finishOp(code === 61 ? tt.eq : tt.prefix, 1);\n  };\n\n  pp$7.getTokenFromCode = function (code) {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n      case 46:\n        // '.'\n        return this.readToken_dot();\n      // Punctuation tokens.\n\n      case 40:\n        ++this.pos;\n        return this.finishToken(tt.parenL);\n\n      case 41:\n        ++this.pos;\n        return this.finishToken(tt.parenR);\n\n      case 59:\n        ++this.pos;\n        return this.finishToken(tt.semi);\n\n      case 44:\n        ++this.pos;\n        return this.finishToken(tt.comma);\n\n      case 91:\n        ++this.pos;\n        return this.finishToken(tt.bracketL);\n\n      case 93:\n        ++this.pos;\n        return this.finishToken(tt.bracketR);\n\n      case 123:\n        ++this.pos;\n        return this.finishToken(tt.braceL);\n\n      case 125:\n        ++this.pos;\n        return this.finishToken(tt.braceR);\n\n      case 58:\n        ++this.pos;\n        return this.finishToken(tt.colon);\n\n      case 63:\n        ++this.pos;\n        return this.finishToken(tt.question);\n\n      case 96:\n        // '`'\n        if (this.options.ecmaVersion < 6) break;\n        ++this.pos;\n        return this.finishToken(tt.backQuote);\n\n      case 48:\n        // '0'\n        var next = this.input.charCodeAt(this.pos + 1);\n        if (next === 120 || next === 88) return this.readRadixNumber(16); // '0x', '0X' - hex number\n\n        if (this.options.ecmaVersion >= 6) {\n          if (next === 111 || next === 79) return this.readRadixNumber(8); // '0o', '0O' - octal number\n\n          if (next === 98 || next === 66) return this.readRadixNumber(2); // '0b', '0B' - binary number\n        }\n\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float.\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        // 1-9\n        return this.readNumber(false);\n      // Quotes produce strings.\n\n      case 34:\n      case 39:\n        // '\"', \"'\"\n        return this.readString(code);\n      // Operators are parsed inline in tiny state machines. '=' (61) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case 47:\n        // '/'\n        return this.readToken_slash();\n\n      case 37:\n      case 42:\n        // '%*'\n        return this.readToken_mult_modulo_exp(code);\n\n      case 124:\n      case 38:\n        // '|&'\n        return this.readToken_pipe_amp(code);\n\n      case 94:\n        // '^'\n        return this.readToken_caret();\n\n      case 43:\n      case 45:\n        // '+-'\n        return this.readToken_plus_min(code);\n\n      case 60:\n      case 62:\n        // '<>'\n        return this.readToken_lt_gt(code);\n\n      case 61:\n      case 33:\n        // '=!'\n        return this.readToken_eq_excl(code);\n\n      case 126:\n        // '~'\n        return this.finishOp(tt.prefix, 1);\n    }\n\n    this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n  };\n\n  pp$7.finishOp = function (type, size) {\n    var str = this.input.slice(this.pos, this.pos + size);\n    this.pos += size;\n    return this.finishToken(type, str);\n  }; // Parse a regular expression. Some context-awareness is necessary,\n  // since a '/' inside a '[]' set does not end the expression.\n\n\n  function tryCreateRegexp(src, flags, throwErrorAt, parser) {\n    try {\n      return new RegExp(src, flags);\n    } catch (e) {\n      if (throwErrorAt !== undefined) {\n        if (e instanceof SyntaxError) parser.raise(throwErrorAt, \"Error parsing regular expression: \" + e.message);\n        throw e;\n      }\n    }\n  }\n\n  var regexpUnicodeSupport = !!tryCreateRegexp(\"\\uffff\", \"u\");\n\n  pp$7.readRegexp = function () {\n    var this$1 = this;\n    var escaped,\n        inClass,\n        start = this.pos;\n\n    for (;;) {\n      if (this$1.pos >= this$1.input.length) this$1.raise(start, \"Unterminated regular expression\");\n      var ch = this$1.input.charAt(this$1.pos);\n      if (lineBreak.test(ch)) this$1.raise(start, \"Unterminated regular expression\");\n\n      if (!escaped) {\n        if (ch === \"[\") inClass = true;else if (ch === \"]\" && inClass) inClass = false;else if (ch === \"/\" && !inClass) break;\n        escaped = ch === \"\\\\\";\n      } else escaped = false;\n\n      ++this$1.pos;\n    }\n\n    var content = this.input.slice(start, this.pos);\n    ++this.pos; // Need to use `readWord1` because '\\uXXXX' sequences are allowed\n    // here (don't ask).\n\n    var mods = this.readWord1();\n    var tmp = content,\n        tmpFlags = \"\";\n\n    if (mods) {\n      var validFlags = /^[gim]*$/;\n      if (this.options.ecmaVersion >= 6) validFlags = /^[gimuy]*$/;\n      if (!validFlags.test(mods)) this.raise(start, \"Invalid regular expression flag\");\n\n      if (mods.indexOf(\"u\") >= 0) {\n        if (regexpUnicodeSupport) {\n          tmpFlags = \"u\";\n        } else {\n          // Replace each astral symbol and every Unicode escape sequence that\n          // possibly represents an astral symbol or a paired surrogate with a\n          // single ASCII symbol to avoid throwing on regular expressions that\n          // are only valid in combination with the `/u` flag.\n          // Note: replacing with the ASCII symbol `x` might cause false\n          // negatives in unlikely scenarios. For example, `[\\u{61}-b]` is a\n          // perfectly valid pattern that is equivalent to `[a-b]`, but it would\n          // be replaced by `[x-b]` which throws an error.\n          tmp = tmp.replace(/\\\\u\\{([0-9a-fA-F]+)\\}/g, function (_match, code, offset) {\n            code = Number(\"0x\" + code);\n            if (code > 0x10FFFF) this$1.raise(start + offset + 3, \"Code point out of bounds\");\n            return \"x\";\n          });\n          tmp = tmp.replace(/\\\\u([a-fA-F0-9]{4})|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, \"x\");\n          tmpFlags = tmpFlags.replace(\"u\", \"\");\n        }\n      }\n    } // Detect invalid regular expressions.\n\n\n    var value = null; // Rhino's regular expression parser is flaky and throws uncatchable exceptions,\n    // so don't do detection if we are running under Rhino\n\n    if (!isRhino) {\n      tryCreateRegexp(tmp, tmpFlags, start, this); // Get a regular expression object for this pattern-flag pair, or `null` in\n      // case the current environment doesn't support the flags it uses.\n\n      value = tryCreateRegexp(content, mods);\n    }\n\n    return this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n      value: value\n    });\n  }; // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n\n\n  pp$7.readInt = function (radix, len) {\n    var this$1 = this;\n    var start = this.pos,\n        total = 0;\n\n    for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      var code = this$1.input.charCodeAt(this$1.pos),\n          val;\n      if (code >= 97) val = code - 97 + 10; // a\n      else if (code >= 65) val = code - 65 + 10; // A\n      else if (code >= 48 && code <= 57) val = code - 48; // 0-9\n      else val = Infinity;\n      if (val >= radix) break;\n      ++this$1.pos;\n      total = total * radix + val;\n    }\n\n    if (this.pos === start || len != null && this.pos - start !== len) return null;\n    return total;\n  };\n\n  pp$7.readRadixNumber = function (radix) {\n    this.pos += 2; // 0x\n\n    var val = this.readInt(radix);\n    if (val == null) this.raise(this.start + 2, \"Expected number in radix \" + radix);\n    if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\");\n    return this.finishToken(tt.num, val);\n  }; // Read an integer, octal integer, or floating-point number.\n\n\n  pp$7.readNumber = function (startsWithDot) {\n    var start = this.pos,\n        isFloat = false,\n        octal = this.input.charCodeAt(this.pos) === 48;\n    if (!startsWithDot && this.readInt(10) === null) this.raise(start, \"Invalid number\");\n    if (octal && this.pos == start + 1) octal = false;\n    var next = this.input.charCodeAt(this.pos);\n\n    if (next === 46 && !octal) {\n      // '.'\n      ++this.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.pos);\n    }\n\n    if ((next === 69 || next === 101) && !octal) {\n      // 'eE'\n      next = this.input.charCodeAt(++this.pos);\n      if (next === 43 || next === 45) ++this.pos; // '+-'\n\n      if (this.readInt(10) === null) this.raise(start, \"Invalid number\");\n      isFloat = true;\n    }\n\n    if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\");\n    var str = this.input.slice(start, this.pos),\n        val;\n    if (isFloat) val = parseFloat(str);else if (!octal || str.length === 1) val = parseInt(str, 10);else if (/[89]/.test(str) || this.strict) this.raise(start, \"Invalid number\");else val = parseInt(str, 8);\n    return this.finishToken(tt.num, val);\n  }; // Read a string value, interpreting backslash-escapes.\n\n\n  pp$7.readCodePoint = function () {\n    var ch = this.input.charCodeAt(this.pos),\n        code;\n\n    if (ch === 123) {\n      if (this.options.ecmaVersion < 6) this.unexpected();\n      var codePos = ++this.pos;\n      code = this.readHexChar(this.input.indexOf('}', this.pos) - this.pos);\n      ++this.pos;\n      if (code > 0x10FFFF) this.raise(codePos, \"Code point out of bounds\");\n    } else {\n      code = this.readHexChar(4);\n    }\n\n    return code;\n  };\n\n  function codePointToString(code) {\n    // UTF-16 Decoding\n    if (code <= 0xFFFF) return String.fromCharCode(code);\n    code -= 0x10000;\n    return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00);\n  }\n\n  pp$7.readString = function (quote) {\n    var this$1 = this;\n    var out = \"\",\n        chunkStart = ++this.pos;\n\n    for (;;) {\n      if (this$1.pos >= this$1.input.length) this$1.raise(this$1.start, \"Unterminated string constant\");\n      var ch = this$1.input.charCodeAt(this$1.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        // '\\'\n        out += this$1.input.slice(chunkStart, this$1.pos);\n        out += this$1.readEscapedChar(false);\n        chunkStart = this$1.pos;\n      } else {\n        if (isNewLine(ch)) this$1.raise(this$1.start, \"Unterminated string constant\");\n        ++this$1.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.pos++);\n    return this.finishToken(tt.string, out);\n  }; // Reads template string tokens.\n\n\n  pp$7.readTmplToken = function () {\n    var this$1 = this;\n    var out = \"\",\n        chunkStart = this.pos;\n\n    for (;;) {\n      if (this$1.pos >= this$1.input.length) this$1.raise(this$1.start, \"Unterminated template\");\n      var ch = this$1.input.charCodeAt(this$1.pos);\n\n      if (ch === 96 || ch === 36 && this$1.input.charCodeAt(this$1.pos + 1) === 123) {\n        // '`', '${'\n        if (this$1.pos === this$1.start && this$1.type === tt.template) {\n          if (ch === 36) {\n            this$1.pos += 2;\n            return this$1.finishToken(tt.dollarBraceL);\n          } else {\n            ++this$1.pos;\n            return this$1.finishToken(tt.backQuote);\n          }\n        }\n\n        out += this$1.input.slice(chunkStart, this$1.pos);\n        return this$1.finishToken(tt.template, out);\n      }\n\n      if (ch === 92) {\n        // '\\'\n        out += this$1.input.slice(chunkStart, this$1.pos);\n        out += this$1.readEscapedChar(true);\n        chunkStart = this$1.pos;\n      } else if (isNewLine(ch)) {\n        out += this$1.input.slice(chunkStart, this$1.pos);\n        ++this$1.pos;\n\n        switch (ch) {\n          case 13:\n            if (this$1.input.charCodeAt(this$1.pos) === 10) ++this$1.pos;\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n\n        if (this$1.options.locations) {\n          ++this$1.curLine;\n          this$1.lineStart = this$1.pos;\n        }\n\n        chunkStart = this$1.pos;\n      } else {\n        ++this$1.pos;\n      }\n    }\n  }; // Used to read escaped characters\n\n\n  pp$7.readEscapedChar = function (inTemplate) {\n    var ch = this.input.charCodeAt(++this.pos);\n    ++this.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n      // 'n' -> '\\n'\n\n      case 114:\n        return \"\\r\";\n      // 'r' -> '\\r'\n\n      case 120:\n        return String.fromCharCode(this.readHexChar(2));\n      // 'x'\n\n      case 117:\n        return codePointToString(this.readCodePoint());\n      // 'u'\n\n      case 116:\n        return \"\\t\";\n      // 't' -> '\\t'\n\n      case 98:\n        return \"\\b\";\n      // 'b' -> '\\b'\n\n      case 118:\n        return \"\\u000b\";\n      // 'v' -> '\\u000b'\n\n      case 102:\n        return \"\\f\";\n      // 'f' -> '\\f'\n\n      case 13:\n        if (this.input.charCodeAt(this.pos) === 10) ++this.pos;\n      // '\\r\\n'\n\n      case 10:\n        // ' \\n'\n        if (this.options.locations) {\n          this.lineStart = this.pos;\n          ++this.curLine;\n        }\n\n        return \"\";\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];\n          var octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          if (octalStr !== \"0\" && (this.strict || inTemplate)) {\n            this.raise(this.pos - 2, \"Octal literal in strict mode\");\n          }\n\n          this.pos += octalStr.length - 1;\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }; // Used to read character escape sequences ('\\x', '\\u', '\\U').\n\n\n  pp$7.readHexChar = function (len) {\n    var codePos = this.pos;\n    var n = this.readInt(16, len);\n    if (n === null) this.raise(codePos, \"Bad character escape sequence\");\n    return n;\n  }; // Read an identifier, and return it as a string. Sets `this.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n\n\n  pp$7.readWord1 = function () {\n    var this$1 = this;\n    this.containsEsc = false;\n    var word = \"\",\n        first = true,\n        chunkStart = this.pos;\n    var astral = this.options.ecmaVersion >= 6;\n\n    while (this.pos < this.input.length) {\n      var ch = this$1.fullCharCodeAtPos();\n\n      if (isIdentifierChar(ch, astral)) {\n        this$1.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) {\n        // \"\\\"\n        this$1.containsEsc = true;\n        word += this$1.input.slice(chunkStart, this$1.pos);\n        var escStart = this$1.pos;\n        if (this$1.input.charCodeAt(++this$1.pos) != 117) // \"u\"\n          this$1.raise(this$1.pos, \"Expecting Unicode escape sequence \\\\uXXXX\");\n        ++this$1.pos;\n        var esc = this$1.readCodePoint();\n        if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral)) this$1.raise(escStart, \"Invalid Unicode escape\");\n        word += codePointToString(esc);\n        chunkStart = this$1.pos;\n      } else {\n        break;\n      }\n\n      first = false;\n    }\n\n    return word + this.input.slice(chunkStart, this.pos);\n  }; // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n\n  pp$7.readWord = function () {\n    var word = this.readWord1();\n    var type = tt.name;\n\n    if (this.keywords.test(word)) {\n      if (this.containsEsc) this.raiseRecoverable(this.start, \"Escape sequence in keyword \" + word);\n      type = keywordTypes[word];\n    }\n\n    return this.finishToken(type, word);\n  }; // Acorn is a tiny, fast JavaScript parser written in JavaScript.\n  //\n  // Acorn was written by Marijn Haverbeke, Ingvar Stepanyan, and\n  // various contributors and released under an MIT license.\n  //\n  // Git repositories for Acorn are available at\n  //\n  //     http://marijnhaverbeke.nl/git/acorn\n  //     https://github.com/ternjs/acorn.git\n  //\n  // Please use the [github bug tracker][ghbt] to report issues.\n  //\n  // [ghbt]: https://github.com/ternjs/acorn/issues\n  //\n  // This file defines the main parser interface. The library also comes\n  // with a [error-tolerant parser][dammit] and an\n  // [abstract syntax tree walker][walk], defined in other files.\n  //\n  // [dammit]: acorn_loose.js\n  // [walk]: util/walk.js\n\n\n  var version = \"4.0.11\"; // The main exported interface (under `self.acorn` when in the\n  // browser) is a `parse` function that takes a code string and\n  // returns an abstract syntax tree as specified by [Mozilla parser\n  // API][api].\n  //\n  // [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\n  function parse(input, options) {\n    return new Parser(options, input).parse();\n  } // This function tries to parse a single expression at a given\n  // offset in a string. Useful for parsing mixed-language formats\n  // that embed JavaScript expressions.\n\n\n  function parseExpressionAt(input, pos, options) {\n    var p = new Parser(options, input, pos);\n    p.nextToken();\n    return p.parseExpression();\n  } // Acorn is organized as a tokenizer and a recursive-descent parser.\n  // The `tokenizer` export provides an interface to the tokenizer.\n\n\n  function tokenizer(input, options) {\n    return new Parser(options, input);\n  } // This is a terrible kludge to support the existing, pre-ES6\n  // interface where the loose parser module retroactively adds exports\n  // to this module.\n\n\n  function addLooseExports(parse, Parser, plugins) {\n    exports.parse_dammit = parse;\n    exports.LooseParser = Parser;\n    exports.pluginsLoose = plugins;\n  }\n\n  exports.version = version;\n  exports.parse = parse;\n  exports.parseExpressionAt = parseExpressionAt;\n  exports.tokenizer = tokenizer;\n  exports.addLooseExports = addLooseExports;\n  exports.Parser = Parser;\n  exports.plugins = plugins;\n  exports.defaultOptions = defaultOptions;\n  exports.Position = Position;\n  exports.SourceLocation = SourceLocation;\n  exports.getLineInfo = getLineInfo;\n  exports.Node = Node;\n  exports.TokenType = TokenType;\n  exports.tokTypes = tt;\n  exports.keywordTypes = keywordTypes;\n  exports.TokContext = TokContext;\n  exports.tokContexts = types;\n  exports.isIdentifierChar = isIdentifierChar;\n  exports.isIdentifierStart = isIdentifierStart;\n  exports.Token = Token;\n  exports.isNewLine = isNewLine;\n  exports.lineBreak = lineBreak;\n  exports.lineBreakG = lineBreakG;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"names":["global","factory","exports","module","define","amd","acorn","reservedWords","strict","strictBind","ecma5AndLessKeywords","keywords","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","RegExp","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","code","set","pos","i","length","isIdentifierStart","astral","test","String","fromCharCode","isIdentifierChar","TokenType","label","conf","keyword","beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","binop","updateContext","name","prec","keywordTypes","kw","options","tt","num","regexp","string","eof","bracketL","bracketR","braceL","braceR","parenL","parenR","comma","semi","colon","dot","question","arrow","template","ellipsis","backQuote","dollarBraceL","eq","assign","incDec","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","starstar","_break","_case","_catch","_continue","_debugger","_default","_do","_else","_finally","_for","_function","_if","_return","_switch","_throw","_try","_var","_const","_while","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_in","_instanceof","_typeof","_void","_delete","lineBreak","lineBreakG","source","isNewLine","nonASCIIwhitespace","skipWhiteSpace","isArray","obj","Object","prototype","toString","call","has","propName","hasOwnProperty","Position","line","col","column","offset","n","SourceLocation","p","start","end","sourceFile","getLineInfo","input","cur","lastIndex","match","exec","index","defaultOptions","ecmaVersion","sourceType","onInsertedSemicolon","onTrailingComma","allowReserved","allowReturnOutsideFunction","allowImportExportEverywhere","allowHashBang","locations","onToken","onComment","ranges","program","directSourceFile","preserveParens","plugins","getOptions","opts","opt","tokens","token","push","pushComment","array","block","text","startLoc","endLoc","comment","type","value","loc","range","keywordRegexp","words","replace","Parser","startPos","reserved","v","reservedStrict","reservedWordsStrict","reservedWordsStrictBind","containsEsc","loadPlugins","lineStart","lastIndexOf","curLine","slice","split","curPosition","lastTokEndLoc","lastTokStartLoc","lastTokStart","lastTokEnd","context","initialContext","exprAllowed","inModule","strictDirective","potentialArrowAt","inFunction","inGenerator","inAsync","yieldPos","awaitPos","labels","skipLineComment","isKeyword","word","isReservedWord","extend","f","pluginConfigs","this$1","plugin","Error","parse","node","startNode","nextToken","parseTopLevel","pp","literal","eat","next","isContextual","eatContextual","expectContextual","unexpected","canInsertSemicolon","insertSemicolon","semicolon","afterTrailingComma","tokType","notNext","expect","raise","DestructuringErrors","shorthandAssign","trailingComma","parenthesizedAssign","parenthesizedBind","checkPatternErrors","refDestructuringErrors","raiseRecoverable","parens","checkExpressionErrors","andThrow","checkYieldAwaitInDefaultParams","isSimpleAssignTarget","expr","expression","pp$1","body","stmt","parseStatement","finishNode","loopLabel","kind","switchLabel","isLet","skip","nextCh","charCodeAt","ident","isAsyncFunction","charAt","declaration","topLevel","starttype","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseFunctionStatement","parseClass","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVarStatement","parseWhileStatement","parseWithStatement","parseBlock","parseEmptyStatement","parseImport","parseExport","maybeName","parseExpression","parseLabeledStatement","parseExpressionStatement","isBreak","parseIdent","lab","pop","parseParenExpression","parseFor","init$1","parseVar","declarations","init","parseForIn","toAssignable","checkLVal","isAsync","parseFunction","isFunction","consequent","alternate","argument","discriminant","cases","sawDefault","isCase","empty","handler","clause","param","parseBindingAtom","finalizer","object","i$1","statementStart","generator","update","left","right","isFor","decl","parseVarId","parseMaybeAssign","id","isStatement","allowExpressionBody","initFunction","async","oldInGen","oldInAsync","oldYieldPos","oldAwaitPos","oldInFunc","parseFunctionParams","parseFunctionBody","params","parseBindingList","parseClassId","parseClassSuper","classBody","hadConstructor","method","isGenerator","isMaybeStatic","parsePropertyName","static","computed","key","isGetSet","parseClassMethod","paramCount","parseMethod","superClass","parseExprSubscripts","parseExprAtom","checkExport","fNode","cNode","shouldParseExportStatement","checkVariableExport","specifiers","parseExportSpecifiers","local","checkPatternExport","pat","properties","elements","elt","decls","nodes","first","exported","parseImportSpecifiers","node$1","node$2","imported","pp$2","isBinding","prop","toAssignableList","operator","exprList","last","arg","parseSpread","parseRest","allowNonIdent","parseObj","close","allowEmpty","allowTrailingComma","elts","rest","parseBindingListItem","elem","parseMaybeDefault","startNodeAt","checkClashes","pp$3","checkPropClash","propHash","shorthand","proto","other","get","noIn","expressions","afterLeftParse","parseYield","ownDestructuringErrors","oldParenAssign","parseMaybeConditional","parseExprOps","parseMaybeUnary","parseExprOp","leftStartPos","leftStartLoc","minPrec","logical","op","buildBinary","sawUnary","parseAwait","skipArrowSubscripts","result","parseSubscripts","base","noCalls","maybeAsyncArrow","property","parseExprList","parseArrowExpression","callee","arguments","tag","quasi","parseTemplate","canBeArrow","parseLiteral","regex","pattern","flags","raw","parseParenAndDistinguishExpression","parseNew","val","innerStartPos","innerStartLoc","lastIsComma","spreadStart","innerParenStart","parseParenItem","innerEndPos","innerEndLoc","parseParenArrowList","finishNodeAt","par","item","empty$1","meta","parseTemplateElement","cooked","tail","curElt","quasis","isPattern","parsePropertyValue","isArrowFunction","isExpression","oldStrict","useStrict","nonSimple","isSimpleParamList","oldLabels","checkParams","nameHash","liberal","indexOf","delegate","pp$4","message","err","SyntaxError","raisedAt","Node","parser","pp$5","TokContext","isExpr","preserveSpace","override","types","b_stat","b_expr","b_tmpl","p_stat","p_expr","q_tmpl","readTmplToken","f_expr","pp$6","braceIsBlock","prevType","parent","curContext","out","statementParens","Token","pp$7","isRhino","Packages","getToken","Symbol","iterator","self","done","skipSpace","finishToken","readToken","fullCharCodeAtPos","readWord","getTokenFromCode","skipBlockComment","startSkip","ch","loop","readToken_dot","readNumber","next2","readToken_slash","readRegexp","finishOp","readToken_mult_modulo_exp","size","tokentype","readToken_pipe_amp","readToken_caret","readToken_plus_min","readToken_lt_gt","readToken_eq_excl","readRadixNumber","readString","codePointToString","str","tryCreateRegexp","src","throwErrorAt","e","undefined","regexpUnicodeSupport","escaped","inClass","content","mods","readWord1","tmp","tmpFlags","validFlags","_match","Number","readInt","radix","len","total","Infinity","startsWithDot","isFloat","octal","parseFloat","parseInt","readCodePoint","codePos","readHexChar","quote","chunkStart","readEscapedChar","inTemplate","octalStr","substr","escStart","esc","version","parseExpressionAt","tokenizer","addLooseExports","parse_dammit","LooseParser","pluginsLoose","tokTypes","tokContexts","defineProperty"],"sources":["G:/anaconda/project/download files/last down/New folder/desktop/Samrat/protfolio/protfolio/node_modules/gulp-sourcemaps/node_modules/acorn/dist/acorn.js"],"sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.acorn = global.acorn || {})));\n}(this, (function (exports) { 'use strict';\n\n// Reserved word lists for various dialects of the language\n\nvar reservedWords = {\n  3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n  5: \"class enum extends super const export import\",\n  6: \"enum\",\n  strict: \"implements interface let package private protected public static yield\",\n  strictBind: \"eval arguments\"\n}\n\n// And the keywords\n\nvar ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\"\n\nvar keywords = {\n  5: ecma5AndLessKeywords,\n  6: ecma5AndLessKeywords + \" const class extends export import super\"\n}\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 128.\n// Generated by `bin/generate-identifier-regex.js`.\n\nvar nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0-\\u08b4\\u08b6-\\u08bd\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fd5\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ae\\ua7b0-\\ua7b7\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab65\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\"\nvar nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d4-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c03\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d01-\\u0d03\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1cf8\\u1cf9\\u1dc0-\\u1df5\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua900-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\"\n\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\")\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\")\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null\n\n// These are a run-length and offset encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by bin/generate-identifier-regex.js\nvar astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,17,26,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,26,45,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,785,52,76,44,33,24,27,35,42,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,54,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,86,25,391,63,32,0,449,56,264,8,2,36,18,0,50,29,881,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,881,68,12,0,67,12,65,0,32,6124,20,754,9486,1,3071,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,4149,196,60,67,1213,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,10591,541]\nvar astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,1306,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,52,0,13,2,49,13,10,2,4,9,83,11,7,0,161,11,6,9,7,3,57,0,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,87,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,423,9,838,7,2,7,17,9,57,21,2,13,19882,9,135,4,60,6,26,9,1016,45,17,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,2214,6,110,6,6,9,792487,239]\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code, set) {\n  var pos = 0x10000\n  for (var i = 0; i < set.length; i += 2) {\n    pos += set[i]\n    if (pos > code) return false\n    pos += set[i + 1]\n    if (pos >= code) return true\n  }\n}\n\n// Test whether a given character code starts an identifier.\n\nfunction isIdentifierStart(code, astral) {\n  if (code < 65) return code === 36\n  if (code < 91) return true\n  if (code < 97) return code === 95\n  if (code < 123) return true\n  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n  if (astral === false) return false\n  return isInAstralSet(code, astralIdentifierStartCodes)\n}\n\n// Test whether a given character is part of an identifier.\n\nfunction isIdentifierChar(code, astral) {\n  if (code < 48) return code === 36\n  if (code < 58) return true\n  if (code < 65) return false\n  if (code < 91) return true\n  if (code < 97) return code === 95\n  if (code < 123) return true\n  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code))\n  if (astral === false) return false\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)\n}\n\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n//\n// The `startsExpr` property is used to check if the token ends a\n// `yield` expression. It is set on all token types that either can\n// directly start an expression (like a quotation mark) or can\n// continue an expression (like the body of a string).\n//\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nvar TokenType = function TokenType(label, conf) {\n  if ( conf === void 0 ) conf = {};\n\n  this.label = label\n  this.keyword = conf.keyword\n  this.beforeExpr = !!conf.beforeExpr\n  this.startsExpr = !!conf.startsExpr\n  this.isLoop = !!conf.isLoop\n  this.isAssign = !!conf.isAssign\n  this.prefix = !!conf.prefix\n  this.postfix = !!conf.postfix\n  this.binop = conf.binop || null\n  this.updateContext = null\n};\n\nfunction binop(name, prec) {\n  return new TokenType(name, {beforeExpr: true, binop: prec})\n}\nvar beforeExpr = {beforeExpr: true};\nvar startsExpr = {startsExpr: true};\n// Map keyword names to token types.\n\nvar keywordTypes = {}\n\n// Succinct definitions of keyword token types\nfunction kw(name, options) {\n  if ( options === void 0 ) options = {};\n\n  options.keyword = name\n  return keywordTypes[name] = new TokenType(name, options)\n}\n\nvar tt = {\n  num: new TokenType(\"num\", startsExpr),\n  regexp: new TokenType(\"regexp\", startsExpr),\n  string: new TokenType(\"string\", startsExpr),\n  name: new TokenType(\"name\", startsExpr),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", {beforeExpr: true, startsExpr: true}),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", {beforeExpr: true, startsExpr: true}),\n  braceR: new TokenType(\"}\"),\n  parenL: new TokenType(\"(\", {beforeExpr: true, startsExpr: true}),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", beforeExpr),\n  semi: new TokenType(\";\", beforeExpr),\n  colon: new TokenType(\":\", beforeExpr),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", beforeExpr),\n  arrow: new TokenType(\"=>\", beforeExpr),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", beforeExpr),\n  backQuote: new TokenType(\"`\", startsExpr),\n  dollarBraceL: new TokenType(\"${\", {beforeExpr: true, startsExpr: true}),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", {beforeExpr: true, isAssign: true}),\n  assign: new TokenType(\"_=\", {beforeExpr: true, isAssign: true}),\n  incDec: new TokenType(\"++/--\", {prefix: true, postfix: true, startsExpr: true}),\n  prefix: new TokenType(\"prefix\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  logicalOR: binop(\"||\", 1),\n  logicalAND: binop(\"&&\", 2),\n  bitwiseOR: binop(\"|\", 3),\n  bitwiseXOR: binop(\"^\", 4),\n  bitwiseAND: binop(\"&\", 5),\n  equality: binop(\"==/!=\", 6),\n  relational: binop(\"</>\", 7),\n  bitShift: binop(\"<</>>\", 8),\n  plusMin: new TokenType(\"+/-\", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),\n  modulo: binop(\"%\", 10),\n  star: binop(\"*\", 10),\n  slash: binop(\"/\", 10),\n  starstar: new TokenType(\"**\", {beforeExpr: true}),\n\n  // Keyword token types.\n  _break: kw(\"break\"),\n  _case: kw(\"case\", beforeExpr),\n  _catch: kw(\"catch\"),\n  _continue: kw(\"continue\"),\n  _debugger: kw(\"debugger\"),\n  _default: kw(\"default\", beforeExpr),\n  _do: kw(\"do\", {isLoop: true, beforeExpr: true}),\n  _else: kw(\"else\", beforeExpr),\n  _finally: kw(\"finally\"),\n  _for: kw(\"for\", {isLoop: true}),\n  _function: kw(\"function\", startsExpr),\n  _if: kw(\"if\"),\n  _return: kw(\"return\", beforeExpr),\n  _switch: kw(\"switch\"),\n  _throw: kw(\"throw\", beforeExpr),\n  _try: kw(\"try\"),\n  _var: kw(\"var\"),\n  _const: kw(\"const\"),\n  _while: kw(\"while\", {isLoop: true}),\n  _with: kw(\"with\"),\n  _new: kw(\"new\", {beforeExpr: true, startsExpr: true}),\n  _this: kw(\"this\", startsExpr),\n  _super: kw(\"super\", startsExpr),\n  _class: kw(\"class\"),\n  _extends: kw(\"extends\", beforeExpr),\n  _export: kw(\"export\"),\n  _import: kw(\"import\"),\n  _null: kw(\"null\", startsExpr),\n  _true: kw(\"true\", startsExpr),\n  _false: kw(\"false\", startsExpr),\n  _in: kw(\"in\", {beforeExpr: true, binop: 7}),\n  _instanceof: kw(\"instanceof\", {beforeExpr: true, binop: 7}),\n  _typeof: kw(\"typeof\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  _void: kw(\"void\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  _delete: kw(\"delete\", {beforeExpr: true, prefix: true, startsExpr: true})\n}\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\n\nvar lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/\nvar lineBreakG = new RegExp(lineBreak.source, \"g\")\n\nfunction isNewLine(code) {\n  return code === 10 || code === 13 || code === 0x2028 || code === 0x2029\n}\n\nvar nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/\n\nvar skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g\n\nfunction isArray(obj) {\n  return Object.prototype.toString.call(obj) === \"[object Array]\"\n}\n\n// Checks if an object has a property.\n\nfunction has(obj, propName) {\n  return Object.prototype.hasOwnProperty.call(obj, propName)\n}\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nvar Position = function Position(line, col) {\n  this.line = line\n  this.column = col\n};\n\nPosition.prototype.offset = function offset (n) {\n  return new Position(this.line, this.column + n)\n};\n\nvar SourceLocation = function SourceLocation(p, start, end) {\n  this.start = start\n  this.end = end\n  if (p.sourceFile !== null) this.source = p.sourceFile\n};\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nfunction getLineInfo(input, offset) {\n  for (var line = 1, cur = 0;;) {\n    lineBreakG.lastIndex = cur\n    var match = lineBreakG.exec(input)\n    if (match && match.index < offset) {\n      ++line\n      cur = match.index + match[0].length\n    } else {\n      return new Position(line, offset - cur)\n    }\n  }\n}\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nvar defaultOptions = {\n  // `ecmaVersion` indicates the ECMAScript version to parse. Must\n  // be either 3, 5, 6 (2015), 7 (2016), or 8 (2017). This influences support\n  // for strict mode, the set of reserved words, and support for\n  // new syntax features. The default is 7.\n  ecmaVersion: 7,\n  // `sourceType` indicates the mode the code should be parsed in.\n  // Can be either `\"script\"` or `\"module\"`. This influences global\n  // strict mode and parsing of `import` and `export` declarations.\n  sourceType: \"script\",\n  // `onInsertedSemicolon` can be a callback that will be called\n  // when a semicolon is automatically inserted. It will be passed\n  // th position of the comma as an offset, and if `locations` is\n  // enabled, it is given the location as a `{line, column}` object\n  // as second argument.\n  onInsertedSemicolon: null,\n  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n  // trailing commas.\n  onTrailingComma: null,\n  // By default, reserved words are only enforced if ecmaVersion >= 5.\n  // Set `allowReserved` to a boolean value to explicitly turn this on\n  // an off. When this option has the value \"never\", reserved words\n  // and keywords can also not be used as property names.\n  allowReserved: null,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // When enabled, hashbang directive in the beginning of file\n  // is allowed and treated as a line comment.\n  allowHashBang: false,\n  // When `locations` is on, `loc` properties holding objects with\n  // `start` and `end` properties in `{line, column}` form (with\n  // line being 1-based and column 0-based) will be attached to the\n  // nodes.\n  locations: false,\n  // A function can be passed as `onToken` option, which will\n  // cause Acorn to call that function with object in the same\n  // format as tokens returned from `tokenizer().getToken()`. Note\n  // that you are not allowed to call the parser from the\n  // callback—that will corrupt its internal state.\n  onToken: null,\n  // A function can be passed as `onComment` option, which will\n  // cause Acorn to call that function with `(block, text, start,\n  // end)` parameters whenever a comment is skipped. `block` is a\n  // boolean indicating whether this is a block (`/* */`) comment,\n  // `text` is the content of the comment, and `start` and `end` are\n  // character offsets that denote the start and end of the comment.\n  // When the `locations` option is on, two more parameters are\n  // passed, the full `{line, column}` locations of the start and\n  // end of the comments. Note that you are not allowed to call the\n  // parser from the callback—that will corrupt its internal state.\n  onComment: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // It is possible to parse multiple files into a single AST by\n  // passing the tree produced by parsing the first file as\n  // `program` option in subsequent parses. This will add the\n  // toplevel forms of the parsed file to the `Program` (top) node\n  // of an existing parse tree.\n  program: null,\n  // When `locations` is on, you can pass this to record the source\n  // file in every node's `loc` object.\n  sourceFile: null,\n  // This value, if given, is stored in every node, whether\n  // `locations` is on or off.\n  directSourceFile: null,\n  // When enabled, parenthesized expressions are represented by\n  // (non-standard) ParenthesizedExpression nodes\n  preserveParens: false,\n  plugins: {}\n}\n\n// Interpret and default an options object\n\nfunction getOptions(opts) {\n  var options = {}\n\n  for (var opt in defaultOptions)\n    options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt]\n\n  if (options.ecmaVersion >= 2015)\n    options.ecmaVersion -= 2009\n\n  if (options.allowReserved == null)\n    options.allowReserved = options.ecmaVersion < 5\n\n  if (isArray(options.onToken)) {\n    var tokens = options.onToken\n    options.onToken = function (token) { return tokens.push(token); }\n  }\n  if (isArray(options.onComment))\n    options.onComment = pushComment(options, options.onComment)\n\n  return options\n}\n\nfunction pushComment(options, array) {\n  return function (block, text, start, end, startLoc, endLoc) {\n    var comment = {\n      type: block ? 'Block' : 'Line',\n      value: text,\n      start: start,\n      end: end\n    }\n    if (options.locations)\n      comment.loc = new SourceLocation(this, startLoc, endLoc)\n    if (options.ranges)\n      comment.range = [start, end]\n    array.push(comment)\n  }\n}\n\n// Registered plugins\nvar plugins = {}\n\nfunction keywordRegexp(words) {\n  return new RegExp(\"^(\" + words.replace(/ /g, \"|\") + \")$\")\n}\n\nvar Parser = function Parser(options, input, startPos) {\n  this.options = options = getOptions(options)\n  this.sourceFile = options.sourceFile\n  this.keywords = keywordRegexp(keywords[options.ecmaVersion >= 6 ? 6 : 5])\n  var reserved = \"\"\n  if (!options.allowReserved) {\n    for (var v = options.ecmaVersion;; v--)\n      if (reserved = reservedWords[v]) break\n    if (options.sourceType == \"module\") reserved += \" await\"\n  }\n  this.reservedWords = keywordRegexp(reserved)\n  var reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict\n  this.reservedWordsStrict = keywordRegexp(reservedStrict)\n  this.reservedWordsStrictBind = keywordRegexp(reservedStrict + \" \" + reservedWords.strictBind)\n  this.input = String(input)\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  this.containsEsc = false\n\n  // Load plugins\n  this.loadPlugins(options.plugins)\n\n  // Set up token state\n\n  // The current position of the tokenizer in the input.\n  if (startPos) {\n    this.pos = startPos\n    this.lineStart = this.input.lastIndexOf(\"\\n\", startPos - 1) + 1\n    this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length\n  } else {\n    this.pos = this.lineStart = 0\n    this.curLine = 1\n  }\n\n  // Properties of the current token:\n  // Its type\n  this.type = tt.eof\n  // For tokens that include more information than their type, the value\n  this.value = null\n  // Its start and end offset\n  this.start = this.end = this.pos\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  this.startLoc = this.endLoc = this.curPosition()\n\n  // Position information for the previous token\n  this.lastTokEndLoc = this.lastTokStartLoc = null\n  this.lastTokStart = this.lastTokEnd = this.pos\n\n  // The context stack is used to superficially track syntactic\n  // context to predict whether a regular expression is allowed in a\n  // given position.\n  this.context = this.initialContext()\n  this.exprAllowed = true\n\n  // Figure out if it's a module code.\n  this.inModule = options.sourceType === \"module\"\n  this.strict = this.inModule || this.strictDirective(this.pos)\n\n  // Used to signify the start of a potential arrow function\n  this.potentialArrowAt = -1\n\n  // Flags to track whether we are in a function, a generator, an async function.\n  this.inFunction = this.inGenerator = this.inAsync = false\n  // Positions to delayed-check that yield/await does not exist in default parameters.\n  this.yieldPos = this.awaitPos = 0\n  // Labels in scope.\n  this.labels = []\n\n  // If enabled, skip leading hashbang line.\n  if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === '#!')\n    this.skipLineComment(2)\n};\n\n// DEPRECATED Kept for backwards compatibility until 3.0 in case a plugin uses them\nParser.prototype.isKeyword = function isKeyword (word) { return this.keywords.test(word) };\nParser.prototype.isReservedWord = function isReservedWord (word) { return this.reservedWords.test(word) };\n\nParser.prototype.extend = function extend (name, f) {\n  this[name] = f(this[name])\n};\n\nParser.prototype.loadPlugins = function loadPlugins (pluginConfigs) {\n    var this$1 = this;\n\n  for (var name in pluginConfigs) {\n    var plugin = plugins[name]\n    if (!plugin) throw new Error(\"Plugin '\" + name + \"' not found\")\n    plugin(this$1, pluginConfigs[name])\n  }\n};\n\nParser.prototype.parse = function parse () {\n  var node = this.options.program || this.startNode()\n  this.nextToken()\n  return this.parseTopLevel(node)\n};\n\nvar pp = Parser.prototype\n\n// ## Parser utilities\n\nvar literal = /^(?:'((?:[^\\']|\\.)*)'|\"((?:[^\\\"]|\\.)*)\"|;)/\npp.strictDirective = function(start) {\n  var this$1 = this;\n\n  for (;;) {\n    skipWhiteSpace.lastIndex = start\n    start += skipWhiteSpace.exec(this$1.input)[0].length\n    var match = literal.exec(this$1.input.slice(start))\n    if (!match) return false\n    if ((match[1] || match[2]) == \"use strict\") return true\n    start += match[0].length\n  }\n}\n\n// Predicate that tests whether the next token is of the given\n// type, and if yes, consumes it as a side effect.\n\npp.eat = function(type) {\n  if (this.type === type) {\n    this.next()\n    return true\n  } else {\n    return false\n  }\n}\n\n// Tests whether parsed token is a contextual keyword.\n\npp.isContextual = function(name) {\n  return this.type === tt.name && this.value === name\n}\n\n// Consumes contextual keyword if possible.\n\npp.eatContextual = function(name) {\n  return this.value === name && this.eat(tt.name)\n}\n\n// Asserts that following token is given contextual keyword.\n\npp.expectContextual = function(name) {\n  if (!this.eatContextual(name)) this.unexpected()\n}\n\n// Test whether a semicolon can be inserted at the current position.\n\npp.canInsertSemicolon = function() {\n  return this.type === tt.eof ||\n    this.type === tt.braceR ||\n    lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n}\n\npp.insertSemicolon = function() {\n  if (this.canInsertSemicolon()) {\n    if (this.options.onInsertedSemicolon)\n      this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc)\n    return true\n  }\n}\n\n// Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\n\npp.semicolon = function() {\n  if (!this.eat(tt.semi) && !this.insertSemicolon()) this.unexpected()\n}\n\npp.afterTrailingComma = function(tokType, notNext) {\n  if (this.type == tokType) {\n    if (this.options.onTrailingComma)\n      this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc)\n    if (!notNext)\n      this.next()\n    return true\n  }\n}\n\n// Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error.\n\npp.expect = function(type) {\n  this.eat(type) || this.unexpected()\n}\n\n// Raise an unexpected token error.\n\npp.unexpected = function(pos) {\n  this.raise(pos != null ? pos : this.start, \"Unexpected token\")\n}\n\nvar DestructuringErrors = function DestructuringErrors() {\n  this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = -1\n};\n\npp.checkPatternErrors = function(refDestructuringErrors, isAssign) {\n  if (!refDestructuringErrors) return\n  if (refDestructuringErrors.trailingComma > -1)\n    this.raiseRecoverable(refDestructuringErrors.trailingComma, \"Comma is not permitted after the rest element\")\n  var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind\n  if (parens > -1) this.raiseRecoverable(parens, \"Parenthesized pattern\")\n}\n\npp.checkExpressionErrors = function(refDestructuringErrors, andThrow) {\n  var pos = refDestructuringErrors ? refDestructuringErrors.shorthandAssign : -1\n  if (!andThrow) return pos >= 0\n  if (pos > -1) this.raise(pos, \"Shorthand property assignments are valid only in destructuring patterns\")\n}\n\npp.checkYieldAwaitInDefaultParams = function() {\n  if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))\n    this.raise(this.yieldPos, \"Yield expression cannot be a default value\")\n  if (this.awaitPos)\n    this.raise(this.awaitPos, \"Await expression cannot be a default value\")\n}\n\npp.isSimpleAssignTarget = function(expr) {\n  if (expr.type === \"ParenthesizedExpression\")\n    return this.isSimpleAssignTarget(expr.expression)\n  return expr.type === \"Identifier\" || expr.type === \"MemberExpression\"\n}\n\nvar pp$1 = Parser.prototype\n\n// ### Statement parsing\n\n// Parse a program. Initializes the parser, reads any number of\n// statements, and wraps them in a Program node.  Optionally takes a\n// `program` argument.  If present, the statements will be appended\n// to its body instead of creating a new node.\n\npp$1.parseTopLevel = function(node) {\n  var this$1 = this;\n\n  var exports = {}\n  if (!node.body) node.body = []\n  while (this.type !== tt.eof) {\n    var stmt = this$1.parseStatement(true, true, exports)\n    node.body.push(stmt)\n  }\n  this.next()\n  if (this.options.ecmaVersion >= 6) {\n    node.sourceType = this.options.sourceType\n  }\n  return this.finishNode(node, \"Program\")\n}\n\nvar loopLabel = {kind: \"loop\"};\nvar switchLabel = {kind: \"switch\"};\npp$1.isLet = function() {\n  if (this.type !== tt.name || this.options.ecmaVersion < 6 || this.value != \"let\") return false\n  skipWhiteSpace.lastIndex = this.pos\n  var skip = skipWhiteSpace.exec(this.input)\n  var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next)\n  if (nextCh === 91 || nextCh == 123) return true // '{' and '['\n  if (isIdentifierStart(nextCh, true)) {\n    for (var pos = next + 1; isIdentifierChar(this.input.charCodeAt(pos), true); ++pos) {}\n    var ident = this.input.slice(next, pos)\n    if (!this.isKeyword(ident)) return true\n  }\n  return false\n}\n\n// check 'async [no LineTerminator here] function'\n// - 'async /*foo*/ function' is OK.\n// - 'async /*\\n*/ function' is invalid.\npp$1.isAsyncFunction = function() {\n  if (this.type !== tt.name || this.options.ecmaVersion < 8 || this.value != \"async\")\n    return false\n\n  skipWhiteSpace.lastIndex = this.pos\n  var skip = skipWhiteSpace.exec(this.input)\n  var next = this.pos + skip[0].length\n  return !lineBreak.test(this.input.slice(this.pos, next)) &&\n    this.input.slice(next, next + 8) === \"function\" &&\n    (next + 8 == this.input.length || !isIdentifierChar(this.input.charAt(next + 8)))\n}\n\n// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\n\npp$1.parseStatement = function(declaration, topLevel, exports) {\n  var starttype = this.type, node = this.startNode(), kind\n\n  if (this.isLet()) {\n    starttype = tt._var\n    kind = \"let\"\n  }\n\n  // Most types of statements are recognized by the keyword they\n  // start with. Many are trivial to parse, some require a bit of\n  // complexity.\n\n  switch (starttype) {\n  case tt._break: case tt._continue: return this.parseBreakContinueStatement(node, starttype.keyword)\n  case tt._debugger: return this.parseDebuggerStatement(node)\n  case tt._do: return this.parseDoStatement(node)\n  case tt._for: return this.parseForStatement(node)\n  case tt._function:\n    if (!declaration && this.options.ecmaVersion >= 6) this.unexpected()\n    return this.parseFunctionStatement(node, false)\n  case tt._class:\n    if (!declaration) this.unexpected()\n    return this.parseClass(node, true)\n  case tt._if: return this.parseIfStatement(node)\n  case tt._return: return this.parseReturnStatement(node)\n  case tt._switch: return this.parseSwitchStatement(node)\n  case tt._throw: return this.parseThrowStatement(node)\n  case tt._try: return this.parseTryStatement(node)\n  case tt._const: case tt._var:\n    kind = kind || this.value\n    if (!declaration && kind != \"var\") this.unexpected()\n    return this.parseVarStatement(node, kind)\n  case tt._while: return this.parseWhileStatement(node)\n  case tt._with: return this.parseWithStatement(node)\n  case tt.braceL: return this.parseBlock()\n  case tt.semi: return this.parseEmptyStatement(node)\n  case tt._export:\n  case tt._import:\n    if (!this.options.allowImportExportEverywhere) {\n      if (!topLevel)\n        this.raise(this.start, \"'import' and 'export' may only appear at the top level\")\n      if (!this.inModule)\n        this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\")\n    }\n    return starttype === tt._import ? this.parseImport(node) : this.parseExport(node, exports)\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n  default:\n    if (this.isAsyncFunction() && declaration) {\n      this.next()\n      return this.parseFunctionStatement(node, true)\n    }\n\n    var maybeName = this.value, expr = this.parseExpression()\n    if (starttype === tt.name && expr.type === \"Identifier\" && this.eat(tt.colon))\n      return this.parseLabeledStatement(node, maybeName, expr)\n    else return this.parseExpressionStatement(node, expr)\n  }\n}\n\npp$1.parseBreakContinueStatement = function(node, keyword) {\n  var this$1 = this;\n\n  var isBreak = keyword == \"break\"\n  this.next()\n  if (this.eat(tt.semi) || this.insertSemicolon()) node.label = null\n  else if (this.type !== tt.name) this.unexpected()\n  else {\n    node.label = this.parseIdent()\n    this.semicolon()\n  }\n\n  // Verify that there is an actual destination to break or\n  // continue to.\n  for (var i = 0; i < this.labels.length; ++i) {\n    var lab = this$1.labels[i]\n    if (node.label == null || lab.name === node.label.name) {\n      if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break\n      if (node.label && isBreak) break\n    }\n  }\n  if (i === this.labels.length) this.raise(node.start, \"Unsyntactic \" + keyword)\n  return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n}\n\npp$1.parseDebuggerStatement = function(node) {\n  this.next()\n  this.semicolon()\n  return this.finishNode(node, \"DebuggerStatement\")\n}\n\npp$1.parseDoStatement = function(node) {\n  this.next()\n  this.labels.push(loopLabel)\n  node.body = this.parseStatement(false)\n  this.labels.pop()\n  this.expect(tt._while)\n  node.test = this.parseParenExpression()\n  if (this.options.ecmaVersion >= 6)\n    this.eat(tt.semi)\n  else\n    this.semicolon()\n  return this.finishNode(node, \"DoWhileStatement\")\n}\n\n// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\n\npp$1.parseForStatement = function(node) {\n  this.next()\n  this.labels.push(loopLabel)\n  this.expect(tt.parenL)\n  if (this.type === tt.semi) return this.parseFor(node, null)\n  var isLet = this.isLet()\n  if (this.type === tt._var || this.type === tt._const || isLet) {\n    var init$1 = this.startNode(), kind = isLet ? \"let\" : this.value\n    this.next()\n    this.parseVar(init$1, true, kind)\n    this.finishNode(init$1, \"VariableDeclaration\")\n    if ((this.type === tt._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) && init$1.declarations.length === 1 &&\n        !(kind !== \"var\" && init$1.declarations[0].init))\n      return this.parseForIn(node, init$1)\n    return this.parseFor(node, init$1)\n  }\n  var refDestructuringErrors = new DestructuringErrors\n  var init = this.parseExpression(true, refDestructuringErrors)\n  if (this.type === tt._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n    this.toAssignable(init)\n    this.checkLVal(init)\n    this.checkPatternErrors(refDestructuringErrors, true)\n    return this.parseForIn(node, init)\n  } else {\n    this.checkExpressionErrors(refDestructuringErrors, true)\n  }\n  return this.parseFor(node, init)\n}\n\npp$1.parseFunctionStatement = function(node, isAsync) {\n  this.next()\n  return this.parseFunction(node, true, false, isAsync)\n}\n\npp$1.isFunction = function() {\n  return this.type === tt._function || this.isAsyncFunction()\n}\n\npp$1.parseIfStatement = function(node) {\n  this.next()\n  node.test = this.parseParenExpression()\n  // allow function declarations in branches, but only in non-strict mode\n  node.consequent = this.parseStatement(!this.strict && this.isFunction())\n  node.alternate = this.eat(tt._else) ? this.parseStatement(!this.strict && this.isFunction()) : null\n  return this.finishNode(node, \"IfStatement\")\n}\n\npp$1.parseReturnStatement = function(node) {\n  if (!this.inFunction && !this.options.allowReturnOutsideFunction)\n    this.raise(this.start, \"'return' outside of function\")\n  this.next()\n\n  // In `return` (and `break`/`continue`), the keywords with\n  // optional arguments, we eagerly look for a semicolon or the\n  // possibility to insert one.\n\n  if (this.eat(tt.semi) || this.insertSemicolon()) node.argument = null\n  else { node.argument = this.parseExpression(); this.semicolon() }\n  return this.finishNode(node, \"ReturnStatement\")\n}\n\npp$1.parseSwitchStatement = function(node) {\n  var this$1 = this;\n\n  this.next()\n  node.discriminant = this.parseParenExpression()\n  node.cases = []\n  this.expect(tt.braceL)\n  this.labels.push(switchLabel)\n\n  // Statements under must be grouped (by label) in SwitchCase\n  // nodes. `cur` is used to keep the node that we are currently\n  // adding statements to.\n\n  for (var cur, sawDefault = false; this.type != tt.braceR;) {\n    if (this$1.type === tt._case || this$1.type === tt._default) {\n      var isCase = this$1.type === tt._case\n      if (cur) this$1.finishNode(cur, \"SwitchCase\")\n      node.cases.push(cur = this$1.startNode())\n      cur.consequent = []\n      this$1.next()\n      if (isCase) {\n        cur.test = this$1.parseExpression()\n      } else {\n        if (sawDefault) this$1.raiseRecoverable(this$1.lastTokStart, \"Multiple default clauses\")\n        sawDefault = true\n        cur.test = null\n      }\n      this$1.expect(tt.colon)\n    } else {\n      if (!cur) this$1.unexpected()\n      cur.consequent.push(this$1.parseStatement(true))\n    }\n  }\n  if (cur) this.finishNode(cur, \"SwitchCase\")\n  this.next() // Closing brace\n  this.labels.pop()\n  return this.finishNode(node, \"SwitchStatement\")\n}\n\npp$1.parseThrowStatement = function(node) {\n  this.next()\n  if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))\n    this.raise(this.lastTokEnd, \"Illegal newline after throw\")\n  node.argument = this.parseExpression()\n  this.semicolon()\n  return this.finishNode(node, \"ThrowStatement\")\n}\n\n// Reused empty array added for node fields that are always empty.\n\nvar empty = []\n\npp$1.parseTryStatement = function(node) {\n  this.next()\n  node.block = this.parseBlock()\n  node.handler = null\n  if (this.type === tt._catch) {\n    var clause = this.startNode()\n    this.next()\n    this.expect(tt.parenL)\n    clause.param = this.parseBindingAtom()\n    this.checkLVal(clause.param, true)\n    this.expect(tt.parenR)\n    clause.body = this.parseBlock()\n    node.handler = this.finishNode(clause, \"CatchClause\")\n  }\n  node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null\n  if (!node.handler && !node.finalizer)\n    this.raise(node.start, \"Missing catch or finally clause\")\n  return this.finishNode(node, \"TryStatement\")\n}\n\npp$1.parseVarStatement = function(node, kind) {\n  this.next()\n  this.parseVar(node, false, kind)\n  this.semicolon()\n  return this.finishNode(node, \"VariableDeclaration\")\n}\n\npp$1.parseWhileStatement = function(node) {\n  this.next()\n  node.test = this.parseParenExpression()\n  this.labels.push(loopLabel)\n  node.body = this.parseStatement(false)\n  this.labels.pop()\n  return this.finishNode(node, \"WhileStatement\")\n}\n\npp$1.parseWithStatement = function(node) {\n  if (this.strict) this.raise(this.start, \"'with' in strict mode\")\n  this.next()\n  node.object = this.parseParenExpression()\n  node.body = this.parseStatement(false)\n  return this.finishNode(node, \"WithStatement\")\n}\n\npp$1.parseEmptyStatement = function(node) {\n  this.next()\n  return this.finishNode(node, \"EmptyStatement\")\n}\n\npp$1.parseLabeledStatement = function(node, maybeName, expr) {\n  var this$1 = this;\n\n  for (var i = 0; i < this.labels.length; ++i)\n    if (this$1.labels[i].name === maybeName) this$1.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\")\n  var kind = this.type.isLoop ? \"loop\" : this.type === tt._switch ? \"switch\" : null\n  for (var i$1 = this.labels.length - 1; i$1 >= 0; i$1--) {\n    var label = this$1.labels[i$1]\n    if (label.statementStart == node.start) {\n      label.statementStart = this$1.start\n      label.kind = kind\n    } else break\n  }\n  this.labels.push({name: maybeName, kind: kind, statementStart: this.start})\n  node.body = this.parseStatement(true)\n  if (node.body.type == \"ClassDeclaration\" ||\n      node.body.type == \"VariableDeclaration\" && (this.strict || node.body.kind != \"var\") ||\n      node.body.type == \"FunctionDeclaration\" && (this.strict || node.body.generator))\n    this.raiseRecoverable(node.body.start, \"Invalid labeled declaration\")\n  this.labels.pop()\n  node.label = expr\n  return this.finishNode(node, \"LabeledStatement\")\n}\n\npp$1.parseExpressionStatement = function(node, expr) {\n  node.expression = expr\n  this.semicolon()\n  return this.finishNode(node, \"ExpressionStatement\")\n}\n\n// Parse a semicolon-enclosed block of statements, handling `\"use\n// strict\"` declarations when `allowStrict` is true (used for\n// function bodies).\n\npp$1.parseBlock = function() {\n  var this$1 = this;\n\n  var node = this.startNode()\n  node.body = []\n  this.expect(tt.braceL)\n  while (!this.eat(tt.braceR)) {\n    var stmt = this$1.parseStatement(true)\n    node.body.push(stmt)\n  }\n  return this.finishNode(node, \"BlockStatement\")\n}\n\n// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\n\npp$1.parseFor = function(node, init) {\n  node.init = init\n  this.expect(tt.semi)\n  node.test = this.type === tt.semi ? null : this.parseExpression()\n  this.expect(tt.semi)\n  node.update = this.type === tt.parenR ? null : this.parseExpression()\n  this.expect(tt.parenR)\n  node.body = this.parseStatement(false)\n  this.labels.pop()\n  return this.finishNode(node, \"ForStatement\")\n}\n\n// Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\n\npp$1.parseForIn = function(node, init) {\n  var type = this.type === tt._in ? \"ForInStatement\" : \"ForOfStatement\"\n  this.next()\n  node.left = init\n  node.right = this.parseExpression()\n  this.expect(tt.parenR)\n  node.body = this.parseStatement(false)\n  this.labels.pop()\n  return this.finishNode(node, type)\n}\n\n// Parse a list of variable declarations.\n\npp$1.parseVar = function(node, isFor, kind) {\n  var this$1 = this;\n\n  node.declarations = []\n  node.kind = kind\n  for (;;) {\n    var decl = this$1.startNode()\n    this$1.parseVarId(decl)\n    if (this$1.eat(tt.eq)) {\n      decl.init = this$1.parseMaybeAssign(isFor)\n    } else if (kind === \"const\" && !(this$1.type === tt._in || (this$1.options.ecmaVersion >= 6 && this$1.isContextual(\"of\")))) {\n      this$1.unexpected()\n    } else if (decl.id.type != \"Identifier\" && !(isFor && (this$1.type === tt._in || this$1.isContextual(\"of\")))) {\n      this$1.raise(this$1.lastTokEnd, \"Complex binding patterns require an initialization value\")\n    } else {\n      decl.init = null\n    }\n    node.declarations.push(this$1.finishNode(decl, \"VariableDeclarator\"))\n    if (!this$1.eat(tt.comma)) break\n  }\n  return node\n}\n\npp$1.parseVarId = function(decl) {\n  decl.id = this.parseBindingAtom()\n  this.checkLVal(decl.id, true)\n}\n\n// Parse a function declaration or literal (depending on the\n// `isStatement` parameter).\n\npp$1.parseFunction = function(node, isStatement, allowExpressionBody, isAsync) {\n  this.initFunction(node)\n  if (this.options.ecmaVersion >= 6 && !isAsync)\n    node.generator = this.eat(tt.star)\n  if (this.options.ecmaVersion >= 8)\n    node.async = !!isAsync\n\n  if (isStatement == null)\n    isStatement = this.type == tt.name\n  if (isStatement)\n    node.id = this.parseIdent()\n\n  var oldInGen = this.inGenerator, oldInAsync = this.inAsync,\n      oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldInFunc = this.inFunction\n  this.inGenerator = node.generator\n  this.inAsync = node.async\n  this.yieldPos = 0\n  this.awaitPos = 0\n  this.inFunction = true\n\n  if (!isStatement && this.type === tt.name)\n    node.id = this.parseIdent()\n  this.parseFunctionParams(node)\n  this.parseFunctionBody(node, allowExpressionBody)\n\n  this.inGenerator = oldInGen\n  this.inAsync = oldInAsync\n  this.yieldPos = oldYieldPos\n  this.awaitPos = oldAwaitPos\n  this.inFunction = oldInFunc\n  return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\")\n}\n\npp$1.parseFunctionParams = function(node) {\n  this.expect(tt.parenL)\n  node.params = this.parseBindingList(tt.parenR, false, this.options.ecmaVersion >= 8, true)\n  this.checkYieldAwaitInDefaultParams()\n}\n\n// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\n\npp$1.parseClass = function(node, isStatement) {\n  var this$1 = this;\n\n  this.next()\n  if (isStatement == null) isStatement = this.type === tt.name\n  this.parseClassId(node, isStatement)\n  this.parseClassSuper(node)\n  var classBody = this.startNode()\n  var hadConstructor = false\n  classBody.body = []\n  this.expect(tt.braceL)\n  while (!this.eat(tt.braceR)) {\n    if (this$1.eat(tt.semi)) continue\n    var method = this$1.startNode()\n    var isGenerator = this$1.eat(tt.star)\n    var isAsync = false\n    var isMaybeStatic = this$1.type === tt.name && this$1.value === \"static\"\n    this$1.parsePropertyName(method)\n    method.static = isMaybeStatic && this$1.type !== tt.parenL\n    if (method.static) {\n      if (isGenerator) this$1.unexpected()\n      isGenerator = this$1.eat(tt.star)\n      this$1.parsePropertyName(method)\n    }\n    if (this$1.options.ecmaVersion >= 8 && !isGenerator && !method.computed &&\n        method.key.type === \"Identifier\" && method.key.name === \"async\" && this$1.type !== tt.parenL &&\n        !this$1.canInsertSemicolon()) {\n      isAsync = true\n      this$1.parsePropertyName(method)\n    }\n    method.kind = \"method\"\n    var isGetSet = false\n    if (!method.computed) {\n      var key = method.key;\n      if (!isGenerator && !isAsync && key.type === \"Identifier\" && this$1.type !== tt.parenL && (key.name === \"get\" || key.name === \"set\")) {\n        isGetSet = true\n        method.kind = key.name\n        key = this$1.parsePropertyName(method)\n      }\n      if (!method.static && (key.type === \"Identifier\" && key.name === \"constructor\" ||\n          key.type === \"Literal\" && key.value === \"constructor\")) {\n        if (hadConstructor) this$1.raise(key.start, \"Duplicate constructor in the same class\")\n        if (isGetSet) this$1.raise(key.start, \"Constructor can't have get/set modifier\")\n        if (isGenerator) this$1.raise(key.start, \"Constructor can't be a generator\")\n        if (isAsync) this$1.raise(key.start, \"Constructor can't be an async method\")\n        method.kind = \"constructor\"\n        hadConstructor = true\n      }\n    }\n    this$1.parseClassMethod(classBody, method, isGenerator, isAsync)\n    if (isGetSet) {\n      var paramCount = method.kind === \"get\" ? 0 : 1\n      if (method.value.params.length !== paramCount) {\n        var start = method.value.start\n        if (method.kind === \"get\")\n          this$1.raiseRecoverable(start, \"getter should have no params\")\n        else\n          this$1.raiseRecoverable(start, \"setter should have exactly one param\")\n      } else {\n        if (method.kind === \"set\" && method.value.params[0].type === \"RestElement\")\n          this$1.raiseRecoverable(method.value.params[0].start, \"Setter cannot use rest params\")\n      }\n    }\n  }\n  node.body = this.finishNode(classBody, \"ClassBody\")\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n}\n\npp$1.parseClassMethod = function(classBody, method, isGenerator, isAsync) {\n  method.value = this.parseMethod(isGenerator, isAsync)\n  classBody.body.push(this.finishNode(method, \"MethodDefinition\"))\n}\n\npp$1.parseClassId = function(node, isStatement) {\n  node.id = this.type === tt.name ? this.parseIdent() : isStatement ? this.unexpected() : null\n}\n\npp$1.parseClassSuper = function(node) {\n  node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null\n}\n\n// Parses module export declaration.\n\npp$1.parseExport = function(node, exports) {\n  var this$1 = this;\n\n  this.next()\n  // export * from '...'\n  if (this.eat(tt.star)) {\n    this.expectContextual(\"from\")\n    node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected()\n    this.semicolon()\n    return this.finishNode(node, \"ExportAllDeclaration\")\n  }\n  if (this.eat(tt._default)) { // export default ...\n    this.checkExport(exports, \"default\", this.lastTokStart)\n    var isAsync\n    if (this.type === tt._function || (isAsync = this.isAsyncFunction())) {\n      var fNode = this.startNode()\n      this.next()\n      if (isAsync) this.next()\n      node.declaration = this.parseFunction(fNode, null, false, isAsync)\n    } else if (this.type === tt._class) {\n      var cNode = this.startNode()\n      node.declaration = this.parseClass(cNode, null)\n    } else {\n      node.declaration = this.parseMaybeAssign()\n      this.semicolon()\n    }\n    return this.finishNode(node, \"ExportDefaultDeclaration\")\n  }\n  // export var|const|let|function|class ...\n  if (this.shouldParseExportStatement()) {\n    node.declaration = this.parseStatement(true)\n    if (node.declaration.type === \"VariableDeclaration\")\n      this.checkVariableExport(exports, node.declaration.declarations)\n    else\n      this.checkExport(exports, node.declaration.id.name, node.declaration.id.start)\n    node.specifiers = []\n    node.source = null\n  } else { // export { x, y as z } [from '...']\n    node.declaration = null\n    node.specifiers = this.parseExportSpecifiers(exports)\n    if (this.eatContextual(\"from\")) {\n      node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected()\n    } else {\n      // check for keywords used as local names\n      for (var i = 0; i < node.specifiers.length; i++) {\n        if (this$1.keywords.test(node.specifiers[i].local.name) || this$1.reservedWords.test(node.specifiers[i].local.name)) {\n          this$1.unexpected(node.specifiers[i].local.start)\n        }\n      }\n\n      node.source = null\n    }\n    this.semicolon()\n  }\n  return this.finishNode(node, \"ExportNamedDeclaration\")\n}\n\npp$1.checkExport = function(exports, name, pos) {\n  if (!exports) return\n  if (Object.prototype.hasOwnProperty.call(exports, name))\n    this.raiseRecoverable(pos, \"Duplicate export '\" + name + \"'\")\n  exports[name] = true\n}\n\npp$1.checkPatternExport = function(exports, pat) {\n  var this$1 = this;\n\n  var type = pat.type\n  if (type == \"Identifier\")\n    this.checkExport(exports, pat.name, pat.start)\n  else if (type == \"ObjectPattern\")\n    for (var i = 0; i < pat.properties.length; ++i)\n      this$1.checkPatternExport(exports, pat.properties[i].value)\n  else if (type == \"ArrayPattern\")\n    for (var i$1 = 0; i$1 < pat.elements.length; ++i$1) {\n      var elt = pat.elements[i$1]\n      if (elt) this$1.checkPatternExport(exports, elt)\n    }\n  else if (type == \"AssignmentPattern\")\n    this.checkPatternExport(exports, pat.left)\n  else if (type == \"ParenthesizedExpression\")\n    this.checkPatternExport(exports, pat.expression)\n}\n\npp$1.checkVariableExport = function(exports, decls) {\n  var this$1 = this;\n\n  if (!exports) return\n  for (var i = 0; i < decls.length; i++)\n    this$1.checkPatternExport(exports, decls[i].id)\n}\n\npp$1.shouldParseExportStatement = function() {\n  return this.type.keyword === \"var\"\n    || this.type.keyword === \"const\"\n    || this.type.keyword === \"class\"\n    || this.type.keyword === \"function\"\n    || this.isLet()\n    || this.isAsyncFunction()\n}\n\n// Parses a comma-separated list of module exports.\n\npp$1.parseExportSpecifiers = function(exports) {\n  var this$1 = this;\n\n  var nodes = [], first = true\n  // export { x, y as z } [from '...']\n  this.expect(tt.braceL)\n  while (!this.eat(tt.braceR)) {\n    if (!first) {\n      this$1.expect(tt.comma)\n      if (this$1.afterTrailingComma(tt.braceR)) break\n    } else first = false\n\n    var node = this$1.startNode()\n    node.local = this$1.parseIdent(true)\n    node.exported = this$1.eatContextual(\"as\") ? this$1.parseIdent(true) : node.local\n    this$1.checkExport(exports, node.exported.name, node.exported.start)\n    nodes.push(this$1.finishNode(node, \"ExportSpecifier\"))\n  }\n  return nodes\n}\n\n// Parses import declaration.\n\npp$1.parseImport = function(node) {\n  this.next()\n  // import '...'\n  if (this.type === tt.string) {\n    node.specifiers = empty\n    node.source = this.parseExprAtom()\n  } else {\n    node.specifiers = this.parseImportSpecifiers()\n    this.expectContextual(\"from\")\n    node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected()\n  }\n  this.semicolon()\n  return this.finishNode(node, \"ImportDeclaration\")\n}\n\n// Parses a comma-separated list of module imports.\n\npp$1.parseImportSpecifiers = function() {\n  var this$1 = this;\n\n  var nodes = [], first = true\n  if (this.type === tt.name) {\n    // import defaultObj, { x, y as z } from '...'\n    var node = this.startNode()\n    node.local = this.parseIdent()\n    this.checkLVal(node.local, true)\n    nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"))\n    if (!this.eat(tt.comma)) return nodes\n  }\n  if (this.type === tt.star) {\n    var node$1 = this.startNode()\n    this.next()\n    this.expectContextual(\"as\")\n    node$1.local = this.parseIdent()\n    this.checkLVal(node$1.local, true)\n    nodes.push(this.finishNode(node$1, \"ImportNamespaceSpecifier\"))\n    return nodes\n  }\n  this.expect(tt.braceL)\n  while (!this.eat(tt.braceR)) {\n    if (!first) {\n      this$1.expect(tt.comma)\n      if (this$1.afterTrailingComma(tt.braceR)) break\n    } else first = false\n\n    var node$2 = this$1.startNode()\n    node$2.imported = this$1.parseIdent(true)\n    if (this$1.eatContextual(\"as\")) {\n      node$2.local = this$1.parseIdent()\n    } else {\n      node$2.local = node$2.imported\n      if (this$1.isKeyword(node$2.local.name)) this$1.unexpected(node$2.local.start)\n      if (this$1.reservedWordsStrict.test(node$2.local.name)) this$1.raiseRecoverable(node$2.local.start, \"The keyword '\" + node$2.local.name + \"' is reserved\")\n    }\n    this$1.checkLVal(node$2.local, true)\n    nodes.push(this$1.finishNode(node$2, \"ImportSpecifier\"))\n  }\n  return nodes\n}\n\nvar pp$2 = Parser.prototype\n\n// Convert existing expression atom to assignable pattern\n// if possible.\n\npp$2.toAssignable = function(node, isBinding) {\n  var this$1 = this;\n\n  if (this.options.ecmaVersion >= 6 && node) {\n    switch (node.type) {\n      case \"Identifier\":\n      if (this.inAsync && node.name === \"await\")\n        this.raise(node.start, \"Can not use 'await' as identifier inside an async function\")\n      break\n\n    case \"ObjectPattern\":\n    case \"ArrayPattern\":\n      break\n\n    case \"ObjectExpression\":\n      node.type = \"ObjectPattern\"\n      for (var i = 0; i < node.properties.length; i++) {\n        var prop = node.properties[i]\n        if (prop.kind !== \"init\") this$1.raise(prop.key.start, \"Object pattern can't contain getter or setter\")\n        this$1.toAssignable(prop.value, isBinding)\n      }\n      break\n\n    case \"ArrayExpression\":\n      node.type = \"ArrayPattern\"\n      this.toAssignableList(node.elements, isBinding)\n      break\n\n    case \"AssignmentExpression\":\n      if (node.operator === \"=\") {\n        node.type = \"AssignmentPattern\"\n        delete node.operator\n        this.toAssignable(node.left, isBinding)\n        // falls through to AssignmentPattern\n      } else {\n        this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\")\n        break\n      }\n\n    case \"AssignmentPattern\":\n      break\n\n    case \"ParenthesizedExpression\":\n      node.expression = this.toAssignable(node.expression, isBinding)\n      break\n\n    case \"MemberExpression\":\n      if (!isBinding) break\n\n    default:\n      this.raise(node.start, \"Assigning to rvalue\")\n    }\n  }\n  return node\n}\n\n// Convert list of expression atoms to binding list.\n\npp$2.toAssignableList = function(exprList, isBinding) {\n  var this$1 = this;\n\n  var end = exprList.length\n  if (end) {\n    var last = exprList[end - 1]\n    if (last && last.type == \"RestElement\") {\n      --end\n    } else if (last && last.type == \"SpreadElement\") {\n      last.type = \"RestElement\"\n      var arg = last.argument\n      this.toAssignable(arg, isBinding)\n      if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\")\n        this.unexpected(arg.start)\n      --end\n    }\n\n    if (isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\")\n      this.unexpected(last.argument.start)\n  }\n  for (var i = 0; i < end; i++) {\n    var elt = exprList[i]\n    if (elt) this$1.toAssignable(elt, isBinding)\n  }\n  return exprList\n}\n\n// Parses spread element.\n\npp$2.parseSpread = function(refDestructuringErrors) {\n  var node = this.startNode()\n  this.next()\n  node.argument = this.parseMaybeAssign(false, refDestructuringErrors)\n  return this.finishNode(node, \"SpreadElement\")\n}\n\npp$2.parseRest = function(allowNonIdent) {\n  var node = this.startNode()\n  this.next()\n\n  // RestElement inside of a function parameter must be an identifier\n  if (allowNonIdent) node.argument = this.type === tt.name ? this.parseIdent() : this.unexpected()\n  else node.argument = this.type === tt.name || this.type === tt.bracketL ? this.parseBindingAtom() : this.unexpected()\n\n  return this.finishNode(node, \"RestElement\")\n}\n\n// Parses lvalue (assignable) atom.\n\npp$2.parseBindingAtom = function() {\n  if (this.options.ecmaVersion < 6) return this.parseIdent()\n  switch (this.type) {\n  case tt.name:\n    return this.parseIdent()\n\n  case tt.bracketL:\n    var node = this.startNode()\n    this.next()\n    node.elements = this.parseBindingList(tt.bracketR, true, true)\n    return this.finishNode(node, \"ArrayPattern\")\n\n  case tt.braceL:\n    return this.parseObj(true)\n\n  default:\n    this.unexpected()\n  }\n}\n\npp$2.parseBindingList = function(close, allowEmpty, allowTrailingComma, allowNonIdent) {\n  var this$1 = this;\n\n  var elts = [], first = true\n  while (!this.eat(close)) {\n    if (first) first = false\n    else this$1.expect(tt.comma)\n    if (allowEmpty && this$1.type === tt.comma) {\n      elts.push(null)\n    } else if (allowTrailingComma && this$1.afterTrailingComma(close)) {\n      break\n    } else if (this$1.type === tt.ellipsis) {\n      var rest = this$1.parseRest(allowNonIdent)\n      this$1.parseBindingListItem(rest)\n      elts.push(rest)\n      if (this$1.type === tt.comma) this$1.raise(this$1.start, \"Comma is not permitted after the rest element\")\n      this$1.expect(close)\n      break\n    } else {\n      var elem = this$1.parseMaybeDefault(this$1.start, this$1.startLoc)\n      this$1.parseBindingListItem(elem)\n      elts.push(elem)\n    }\n  }\n  return elts\n}\n\npp$2.parseBindingListItem = function(param) {\n  return param\n}\n\n// Parses assignment pattern around given atom if possible.\n\npp$2.parseMaybeDefault = function(startPos, startLoc, left) {\n  left = left || this.parseBindingAtom()\n  if (this.options.ecmaVersion < 6 || !this.eat(tt.eq)) return left\n  var node = this.startNodeAt(startPos, startLoc)\n  node.left = left\n  node.right = this.parseMaybeAssign()\n  return this.finishNode(node, \"AssignmentPattern\")\n}\n\n// Verify that a node is an lval — something that can be assigned\n// to.\n\npp$2.checkLVal = function(expr, isBinding, checkClashes) {\n  var this$1 = this;\n\n  switch (expr.type) {\n  case \"Identifier\":\n    if (this.strict && this.reservedWordsStrictBind.test(expr.name))\n      this.raiseRecoverable(expr.start, (isBinding ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\")\n    if (checkClashes) {\n      if (has(checkClashes, expr.name))\n        this.raiseRecoverable(expr.start, \"Argument name clash\")\n      checkClashes[expr.name] = true\n    }\n    break\n\n  case \"MemberExpression\":\n    if (isBinding) this.raiseRecoverable(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" member expression\")\n    break\n\n  case \"ObjectPattern\":\n    for (var i = 0; i < expr.properties.length; i++)\n      this$1.checkLVal(expr.properties[i].value, isBinding, checkClashes)\n    break\n\n  case \"ArrayPattern\":\n    for (var i$1 = 0; i$1 < expr.elements.length; i$1++) {\n      var elem = expr.elements[i$1]\n      if (elem) this$1.checkLVal(elem, isBinding, checkClashes)\n    }\n    break\n\n  case \"AssignmentPattern\":\n    this.checkLVal(expr.left, isBinding, checkClashes)\n    break\n\n  case \"RestElement\":\n    this.checkLVal(expr.argument, isBinding, checkClashes)\n    break\n\n  case \"ParenthesizedExpression\":\n    this.checkLVal(expr.expression, isBinding, checkClashes)\n    break\n\n  default:\n    this.raise(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" rvalue\")\n  }\n}\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nvar pp$3 = Parser.prototype\n\n// Check if property name clashes with already added.\n// Object/class getters and setters are not allowed to clash —\n// either with each other or with an init property — and in\n// strict mode, init properties are also not allowed to be repeated.\n\npp$3.checkPropClash = function(prop, propHash) {\n  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))\n    return\n  var key = prop.key;\n  var name\n  switch (key.type) {\n  case \"Identifier\": name = key.name; break\n  case \"Literal\": name = String(key.value); break\n  default: return\n  }\n  var kind = prop.kind;\n  if (this.options.ecmaVersion >= 6) {\n    if (name === \"__proto__\" && kind === \"init\") {\n      if (propHash.proto) this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\")\n      propHash.proto = true\n    }\n    return\n  }\n  name = \"$\" + name\n  var other = propHash[name]\n  if (other) {\n    var isGetSet = kind !== \"init\"\n    if ((this.strict || isGetSet) && other[kind] || !(isGetSet ^ other.init))\n      this.raiseRecoverable(key.start, \"Redefinition of property\")\n  } else {\n    other = propHash[name] = {\n      init: false,\n      get: false,\n      set: false\n    }\n  }\n  other[kind] = true\n}\n\n// ### Expression parsing\n\n// These nest, from the most general expression type at the top to\n// 'atomic', nondivisible expression types at the bottom. Most of\n// the functions will simply let the function(s) below them parse,\n// and, *if* the syntactic construct they handle is present, wrap\n// the AST node that the inner parser gave them in another node.\n\n// Parse a full expression. The optional arguments are used to\n// forbid the `in` operator (in for loops initalization expressions)\n// and provide reference for storing '=' operator inside shorthand\n// property assignment in contexts where both object expression\n// and object pattern might appear (so it's possible to raise\n// delayed syntax error at correct position).\n\npp$3.parseExpression = function(noIn, refDestructuringErrors) {\n  var this$1 = this;\n\n  var startPos = this.start, startLoc = this.startLoc\n  var expr = this.parseMaybeAssign(noIn, refDestructuringErrors)\n  if (this.type === tt.comma) {\n    var node = this.startNodeAt(startPos, startLoc)\n    node.expressions = [expr]\n    while (this.eat(tt.comma)) node.expressions.push(this$1.parseMaybeAssign(noIn, refDestructuringErrors))\n    return this.finishNode(node, \"SequenceExpression\")\n  }\n  return expr\n}\n\n// Parse an assignment expression. This includes applications of\n// operators like `+=`.\n\npp$3.parseMaybeAssign = function(noIn, refDestructuringErrors, afterLeftParse) {\n  if (this.inGenerator && this.isContextual(\"yield\")) return this.parseYield()\n\n  var ownDestructuringErrors = false, oldParenAssign = -1\n  if (refDestructuringErrors) {\n    oldParenAssign = refDestructuringErrors.parenthesizedAssign\n    refDestructuringErrors.parenthesizedAssign = -1\n  } else {\n    refDestructuringErrors = new DestructuringErrors\n    ownDestructuringErrors = true\n  }\n\n  var startPos = this.start, startLoc = this.startLoc\n  if (this.type == tt.parenL || this.type == tt.name)\n    this.potentialArrowAt = this.start\n  var left = this.parseMaybeConditional(noIn, refDestructuringErrors)\n  if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc)\n  if (this.type.isAssign) {\n    this.checkPatternErrors(refDestructuringErrors, true)\n    if (!ownDestructuringErrors) DestructuringErrors.call(refDestructuringErrors)\n    var node = this.startNodeAt(startPos, startLoc)\n    node.operator = this.value\n    node.left = this.type === tt.eq ? this.toAssignable(left) : left\n    refDestructuringErrors.shorthandAssign = -1 // reset because shorthand default was used correctly\n    this.checkLVal(left)\n    this.next()\n    node.right = this.parseMaybeAssign(noIn)\n    return this.finishNode(node, \"AssignmentExpression\")\n  } else {\n    if (ownDestructuringErrors) this.checkExpressionErrors(refDestructuringErrors, true)\n  }\n  if (oldParenAssign > -1) refDestructuringErrors.parenthesizedAssign = oldParenAssign\n  return left\n}\n\n// Parse a ternary conditional (`?:`) operator.\n\npp$3.parseMaybeConditional = function(noIn, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc\n  var expr = this.parseExprOps(noIn, refDestructuringErrors)\n  if (this.checkExpressionErrors(refDestructuringErrors)) return expr\n  if (this.eat(tt.question)) {\n    var node = this.startNodeAt(startPos, startLoc)\n    node.test = expr\n    node.consequent = this.parseMaybeAssign()\n    this.expect(tt.colon)\n    node.alternate = this.parseMaybeAssign(noIn)\n    return this.finishNode(node, \"ConditionalExpression\")\n  }\n  return expr\n}\n\n// Start the precedence parser.\n\npp$3.parseExprOps = function(noIn, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc\n  var expr = this.parseMaybeUnary(refDestructuringErrors, false)\n  if (this.checkExpressionErrors(refDestructuringErrors)) return expr\n  return this.parseExprOp(expr, startPos, startLoc, -1, noIn)\n}\n\n// Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\n\npp$3.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n  var prec = this.type.binop\n  if (prec != null && (!noIn || this.type !== tt._in)) {\n    if (prec > minPrec) {\n      var logical = this.type === tt.logicalOR || this.type === tt.logicalAND\n      var op = this.value\n      this.next()\n      var startPos = this.start, startLoc = this.startLoc\n      var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn)\n      var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical)\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn)\n    }\n  }\n  return left\n}\n\npp$3.buildBinary = function(startPos, startLoc, left, right, op, logical) {\n  var node = this.startNodeAt(startPos, startLoc)\n  node.left = left\n  node.operator = op\n  node.right = right\n  return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\")\n}\n\n// Parse unary operators, both prefix and postfix.\n\npp$3.parseMaybeUnary = function(refDestructuringErrors, sawUnary) {\n  var this$1 = this;\n\n  var startPos = this.start, startLoc = this.startLoc, expr\n  if (this.inAsync && this.isContextual(\"await\")) {\n    expr = this.parseAwait(refDestructuringErrors)\n    sawUnary = true\n  } else if (this.type.prefix) {\n    var node = this.startNode(), update = this.type === tt.incDec\n    node.operator = this.value\n    node.prefix = true\n    this.next()\n    node.argument = this.parseMaybeUnary(null, true)\n    this.checkExpressionErrors(refDestructuringErrors, true)\n    if (update) this.checkLVal(node.argument)\n    else if (this.strict && node.operator === \"delete\" &&\n             node.argument.type === \"Identifier\")\n      this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\")\n    else sawUnary = true\n    expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\")\n  } else {\n    expr = this.parseExprSubscripts(refDestructuringErrors)\n    if (this.checkExpressionErrors(refDestructuringErrors)) return expr\n    while (this.type.postfix && !this.canInsertSemicolon()) {\n      var node$1 = this$1.startNodeAt(startPos, startLoc)\n      node$1.operator = this$1.value\n      node$1.prefix = false\n      node$1.argument = expr\n      this$1.checkLVal(expr)\n      this$1.next()\n      expr = this$1.finishNode(node$1, \"UpdateExpression\")\n    }\n  }\n\n  if (!sawUnary && this.eat(tt.starstar))\n    return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), \"**\", false)\n  else\n    return expr\n}\n\n// Parse call, dot, and `[]`-subscript expressions.\n\npp$3.parseExprSubscripts = function(refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc\n  var expr = this.parseExprAtom(refDestructuringErrors)\n  var skipArrowSubscripts = expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\"\n  if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) return expr\n  var result = this.parseSubscripts(expr, startPos, startLoc)\n  if (refDestructuringErrors && result.type === \"MemberExpression\") {\n    if (refDestructuringErrors.parenthesizedAssign >= result.start) refDestructuringErrors.parenthesizedAssign = -1\n    if (refDestructuringErrors.parenthesizedBind >= result.start) refDestructuringErrors.parenthesizedBind = -1\n  }\n  return result\n}\n\npp$3.parseSubscripts = function(base, startPos, startLoc, noCalls) {\n  var this$1 = this;\n\n  var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === \"Identifier\" && base.name === \"async\" &&\n      this.lastTokEnd == base.end && !this.canInsertSemicolon()\n  for (var computed;;) {\n    if ((computed = this$1.eat(tt.bracketL)) || this$1.eat(tt.dot)) {\n      var node = this$1.startNodeAt(startPos, startLoc)\n      node.object = base\n      node.property = computed ? this$1.parseExpression() : this$1.parseIdent(true)\n      node.computed = !!computed\n      if (computed) this$1.expect(tt.bracketR)\n      base = this$1.finishNode(node, \"MemberExpression\")\n    } else if (!noCalls && this$1.eat(tt.parenL)) {\n      var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this$1.yieldPos, oldAwaitPos = this$1.awaitPos\n      this$1.yieldPos = 0\n      this$1.awaitPos = 0\n      var exprList = this$1.parseExprList(tt.parenR, this$1.options.ecmaVersion >= 8, false, refDestructuringErrors)\n      if (maybeAsyncArrow && !this$1.canInsertSemicolon() && this$1.eat(tt.arrow)) {\n        this$1.checkPatternErrors(refDestructuringErrors, false)\n        this$1.checkYieldAwaitInDefaultParams()\n        this$1.yieldPos = oldYieldPos\n        this$1.awaitPos = oldAwaitPos\n        return this$1.parseArrowExpression(this$1.startNodeAt(startPos, startLoc), exprList, true)\n      }\n      this$1.checkExpressionErrors(refDestructuringErrors, true)\n      this$1.yieldPos = oldYieldPos || this$1.yieldPos\n      this$1.awaitPos = oldAwaitPos || this$1.awaitPos\n      var node$1 = this$1.startNodeAt(startPos, startLoc)\n      node$1.callee = base\n      node$1.arguments = exprList\n      base = this$1.finishNode(node$1, \"CallExpression\")\n    } else if (this$1.type === tt.backQuote) {\n      var node$2 = this$1.startNodeAt(startPos, startLoc)\n      node$2.tag = base\n      node$2.quasi = this$1.parseTemplate()\n      base = this$1.finishNode(node$2, \"TaggedTemplateExpression\")\n    } else {\n      return base\n    }\n  }\n}\n\n// Parse an atomic expression — either a single token that is an\n// expression, an expression started by a keyword like `function` or\n// `new`, or an expression wrapped in punctuation like `()`, `[]`,\n// or `{}`.\n\npp$3.parseExprAtom = function(refDestructuringErrors) {\n  var node, canBeArrow = this.potentialArrowAt == this.start\n  switch (this.type) {\n  case tt._super:\n    if (!this.inFunction)\n      this.raise(this.start, \"'super' outside of function or class\")\n\n  case tt._this:\n    var type = this.type === tt._this ? \"ThisExpression\" : \"Super\"\n    node = this.startNode()\n    this.next()\n    return this.finishNode(node, type)\n\n  case tt.name:\n    var startPos = this.start, startLoc = this.startLoc\n    var id = this.parseIdent(this.type !== tt.name)\n    if (this.options.ecmaVersion >= 8 && id.name === \"async\" && !this.canInsertSemicolon() && this.eat(tt._function))\n      return this.parseFunction(this.startNodeAt(startPos, startLoc), false, false, true)\n    if (canBeArrow && !this.canInsertSemicolon()) {\n      if (this.eat(tt.arrow))\n        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false)\n      if (this.options.ecmaVersion >= 8 && id.name === \"async\" && this.type === tt.name) {\n        id = this.parseIdent()\n        if (this.canInsertSemicolon() || !this.eat(tt.arrow))\n          this.unexpected()\n        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true)\n      }\n    }\n    return id\n\n  case tt.regexp:\n    var value = this.value\n    node = this.parseLiteral(value.value)\n    node.regex = {pattern: value.pattern, flags: value.flags}\n    return node\n\n  case tt.num: case tt.string:\n    return this.parseLiteral(this.value)\n\n  case tt._null: case tt._true: case tt._false:\n    node = this.startNode()\n    node.value = this.type === tt._null ? null : this.type === tt._true\n    node.raw = this.type.keyword\n    this.next()\n    return this.finishNode(node, \"Literal\")\n\n  case tt.parenL:\n    var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow)\n    if (refDestructuringErrors) {\n      if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr))\n        refDestructuringErrors.parenthesizedAssign = start\n      if (refDestructuringErrors.parenthesizedBind < 0)\n        refDestructuringErrors.parenthesizedBind = start\n    }\n    return expr\n\n  case tt.bracketL:\n    node = this.startNode()\n    this.next()\n    node.elements = this.parseExprList(tt.bracketR, true, true, refDestructuringErrors)\n    return this.finishNode(node, \"ArrayExpression\")\n\n  case tt.braceL:\n    return this.parseObj(false, refDestructuringErrors)\n\n  case tt._function:\n    node = this.startNode()\n    this.next()\n    return this.parseFunction(node, false)\n\n  case tt._class:\n    return this.parseClass(this.startNode(), false)\n\n  case tt._new:\n    return this.parseNew()\n\n  case tt.backQuote:\n    return this.parseTemplate()\n\n  default:\n    this.unexpected()\n  }\n}\n\npp$3.parseLiteral = function(value) {\n  var node = this.startNode()\n  node.value = value\n  node.raw = this.input.slice(this.start, this.end)\n  this.next()\n  return this.finishNode(node, \"Literal\")\n}\n\npp$3.parseParenExpression = function() {\n  this.expect(tt.parenL)\n  var val = this.parseExpression()\n  this.expect(tt.parenR)\n  return val\n}\n\npp$3.parseParenAndDistinguishExpression = function(canBeArrow) {\n  var this$1 = this;\n\n  var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8\n  if (this.options.ecmaVersion >= 6) {\n    this.next()\n\n    var innerStartPos = this.start, innerStartLoc = this.startLoc\n    var exprList = [], first = true, lastIsComma = false\n    var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart, innerParenStart\n    this.yieldPos = 0\n    this.awaitPos = 0\n    while (this.type !== tt.parenR) {\n      first ? first = false : this$1.expect(tt.comma)\n      if (allowTrailingComma && this$1.afterTrailingComma(tt.parenR, true)) {\n        lastIsComma = true\n        break\n      } else if (this$1.type === tt.ellipsis) {\n        spreadStart = this$1.start\n        exprList.push(this$1.parseParenItem(this$1.parseRest()))\n        if (this$1.type === tt.comma) this$1.raise(this$1.start, \"Comma is not permitted after the rest element\")\n        break\n      } else {\n        if (this$1.type === tt.parenL && !innerParenStart) {\n          innerParenStart = this$1.start\n        }\n        exprList.push(this$1.parseMaybeAssign(false, refDestructuringErrors, this$1.parseParenItem))\n      }\n    }\n    var innerEndPos = this.start, innerEndLoc = this.startLoc\n    this.expect(tt.parenR)\n\n    if (canBeArrow && !this.canInsertSemicolon() && this.eat(tt.arrow)) {\n      this.checkPatternErrors(refDestructuringErrors, false)\n      this.checkYieldAwaitInDefaultParams()\n      if (innerParenStart) this.unexpected(innerParenStart)\n      this.yieldPos = oldYieldPos\n      this.awaitPos = oldAwaitPos\n      return this.parseParenArrowList(startPos, startLoc, exprList)\n    }\n\n    if (!exprList.length || lastIsComma) this.unexpected(this.lastTokStart)\n    if (spreadStart) this.unexpected(spreadStart)\n    this.checkExpressionErrors(refDestructuringErrors, true)\n    this.yieldPos = oldYieldPos || this.yieldPos\n    this.awaitPos = oldAwaitPos || this.awaitPos\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc)\n      val.expressions = exprList\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc)\n    } else {\n      val = exprList[0]\n    }\n  } else {\n    val = this.parseParenExpression()\n  }\n\n  if (this.options.preserveParens) {\n    var par = this.startNodeAt(startPos, startLoc)\n    par.expression = val\n    return this.finishNode(par, \"ParenthesizedExpression\")\n  } else {\n    return val\n  }\n}\n\npp$3.parseParenItem = function(item) {\n  return item\n}\n\npp$3.parseParenArrowList = function(startPos, startLoc, exprList) {\n  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList)\n}\n\n// New's precedence is slightly tricky. It must allow its argument to\n// be a `[]` or dot subscript expression, but not a call — at least,\n// not without wrapping it in parentheses. Thus, it uses the noCalls\n// argument to parseSubscripts to prevent it from consuming the\n// argument list.\n\nvar empty$1 = []\n\npp$3.parseNew = function() {\n  var node = this.startNode()\n  var meta = this.parseIdent(true)\n  if (this.options.ecmaVersion >= 6 && this.eat(tt.dot)) {\n    node.meta = meta\n    node.property = this.parseIdent(true)\n    if (node.property.name !== \"target\")\n      this.raiseRecoverable(node.property.start, \"The only valid meta property for new is new.target\")\n    if (!this.inFunction)\n      this.raiseRecoverable(node.start, \"new.target can only be used in functions\")\n    return this.finishNode(node, \"MetaProperty\")\n  }\n  var startPos = this.start, startLoc = this.startLoc\n  node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true)\n  if (this.eat(tt.parenL)) node.arguments = this.parseExprList(tt.parenR, this.options.ecmaVersion >= 8, false)\n  else node.arguments = empty$1\n  return this.finishNode(node, \"NewExpression\")\n}\n\n// Parse template expression.\n\npp$3.parseTemplateElement = function() {\n  var elem = this.startNode()\n  elem.value = {\n    raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, '\\n'),\n    cooked: this.value\n  }\n  this.next()\n  elem.tail = this.type === tt.backQuote\n  return this.finishNode(elem, \"TemplateElement\")\n}\n\npp$3.parseTemplate = function() {\n  var this$1 = this;\n\n  var node = this.startNode()\n  this.next()\n  node.expressions = []\n  var curElt = this.parseTemplateElement()\n  node.quasis = [curElt]\n  while (!curElt.tail) {\n    this$1.expect(tt.dollarBraceL)\n    node.expressions.push(this$1.parseExpression())\n    this$1.expect(tt.braceR)\n    node.quasis.push(curElt = this$1.parseTemplateElement())\n  }\n  this.next()\n  return this.finishNode(node, \"TemplateLiteral\")\n}\n\n// Parse an object literal or binding pattern.\n\npp$3.parseObj = function(isPattern, refDestructuringErrors) {\n  var this$1 = this;\n\n  var node = this.startNode(), first = true, propHash = {}\n  node.properties = []\n  this.next()\n  while (!this.eat(tt.braceR)) {\n    if (!first) {\n      this$1.expect(tt.comma)\n      if (this$1.afterTrailingComma(tt.braceR)) break\n    } else first = false\n\n    var prop = this$1.startNode(), isGenerator, isAsync, startPos, startLoc\n    if (this$1.options.ecmaVersion >= 6) {\n      prop.method = false\n      prop.shorthand = false\n      if (isPattern || refDestructuringErrors) {\n        startPos = this$1.start\n        startLoc = this$1.startLoc\n      }\n      if (!isPattern)\n        isGenerator = this$1.eat(tt.star)\n    }\n    this$1.parsePropertyName(prop)\n    if (!isPattern && this$1.options.ecmaVersion >= 8 && !isGenerator && !prop.computed &&\n        prop.key.type === \"Identifier\" && prop.key.name === \"async\" && this$1.type !== tt.parenL &&\n        this$1.type !== tt.colon && !this$1.canInsertSemicolon()) {\n      isAsync = true\n      this$1.parsePropertyName(prop, refDestructuringErrors)\n    } else {\n      isAsync = false\n    }\n    this$1.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors)\n    this$1.checkPropClash(prop, propHash)\n    node.properties.push(this$1.finishNode(prop, \"Property\"))\n  }\n  return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\")\n}\n\npp$3.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors) {\n  if ((isGenerator || isAsync) && this.type === tt.colon)\n    this.unexpected()\n\n  if (this.eat(tt.colon)) {\n    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors)\n    prop.kind = \"init\"\n  } else if (this.options.ecmaVersion >= 6 && this.type === tt.parenL) {\n    if (isPattern) this.unexpected()\n    prop.kind = \"init\"\n    prop.method = true\n    prop.value = this.parseMethod(isGenerator, isAsync)\n  } else if (this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" &&\n             (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n             (this.type != tt.comma && this.type != tt.braceR)) {\n    if (isGenerator || isAsync || isPattern) this.unexpected()\n    prop.kind = prop.key.name\n    this.parsePropertyName(prop)\n    prop.value = this.parseMethod(false)\n    var paramCount = prop.kind === \"get\" ? 0 : 1\n    if (prop.value.params.length !== paramCount) {\n      var start = prop.value.start\n      if (prop.kind === \"get\")\n        this.raiseRecoverable(start, \"getter should have no params\")\n      else\n        this.raiseRecoverable(start, \"setter should have exactly one param\")\n    } else {\n      if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\")\n        this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\")\n    }\n  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n    if (this.keywords.test(prop.key.name) ||\n        (this.strict ? this.reservedWordsStrict : this.reservedWords).test(prop.key.name) ||\n        (this.inGenerator && prop.key.name == \"yield\") ||\n        (this.inAsync && prop.key.name == \"await\"))\n      this.raiseRecoverable(prop.key.start, \"'\" + prop.key.name + \"' can not be used as shorthand property\")\n    prop.kind = \"init\"\n    if (isPattern) {\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key)\n    } else if (this.type === tt.eq && refDestructuringErrors) {\n      if (refDestructuringErrors.shorthandAssign < 0)\n        refDestructuringErrors.shorthandAssign = this.start\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key)\n    } else {\n      prop.value = prop.key\n    }\n    prop.shorthand = true\n  } else this.unexpected()\n}\n\npp$3.parsePropertyName = function(prop) {\n  if (this.options.ecmaVersion >= 6) {\n    if (this.eat(tt.bracketL)) {\n      prop.computed = true\n      prop.key = this.parseMaybeAssign()\n      this.expect(tt.bracketR)\n      return prop.key\n    } else {\n      prop.computed = false\n    }\n  }\n  return prop.key = this.type === tt.num || this.type === tt.string ? this.parseExprAtom() : this.parseIdent(true)\n}\n\n// Initialize empty function node.\n\npp$3.initFunction = function(node) {\n  node.id = null\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = false\n    node.expression = false\n  }\n  if (this.options.ecmaVersion >= 8)\n    node.async = false\n}\n\n// Parse object or class method.\n\npp$3.parseMethod = function(isGenerator, isAsync) {\n  var node = this.startNode(), oldInGen = this.inGenerator, oldInAsync = this.inAsync,\n      oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldInFunc = this.inFunction\n\n  this.initFunction(node)\n  if (this.options.ecmaVersion >= 6)\n    node.generator = isGenerator\n  if (this.options.ecmaVersion >= 8)\n    node.async = !!isAsync\n\n  this.inGenerator = node.generator\n  this.inAsync = node.async\n  this.yieldPos = 0\n  this.awaitPos = 0\n  this.inFunction = true\n\n  this.expect(tt.parenL)\n  node.params = this.parseBindingList(tt.parenR, false, this.options.ecmaVersion >= 8)\n  this.checkYieldAwaitInDefaultParams()\n  this.parseFunctionBody(node, false)\n\n  this.inGenerator = oldInGen\n  this.inAsync = oldInAsync\n  this.yieldPos = oldYieldPos\n  this.awaitPos = oldAwaitPos\n  this.inFunction = oldInFunc\n  return this.finishNode(node, \"FunctionExpression\")\n}\n\n// Parse arrow function expression with given parameters.\n\npp$3.parseArrowExpression = function(node, params, isAsync) {\n  var oldInGen = this.inGenerator, oldInAsync = this.inAsync,\n      oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldInFunc = this.inFunction\n\n  this.initFunction(node)\n  if (this.options.ecmaVersion >= 8)\n    node.async = !!isAsync\n\n  this.inGenerator = false\n  this.inAsync = node.async\n  this.yieldPos = 0\n  this.awaitPos = 0\n  this.inFunction = true\n\n  node.params = this.toAssignableList(params, true)\n  this.parseFunctionBody(node, true)\n\n  this.inGenerator = oldInGen\n  this.inAsync = oldInAsync\n  this.yieldPos = oldYieldPos\n  this.awaitPos = oldAwaitPos\n  this.inFunction = oldInFunc\n  return this.finishNode(node, \"ArrowFunctionExpression\")\n}\n\n// Parse function body and check parameters.\n\npp$3.parseFunctionBody = function(node, isArrowFunction) {\n  var isExpression = isArrowFunction && this.type !== tt.braceL\n  var oldStrict = this.strict, useStrict = false\n\n  if (isExpression) {\n    node.body = this.parseMaybeAssign()\n    node.expression = true\n  } else {\n    var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params)\n    if (!oldStrict || nonSimple) {\n      useStrict = this.strictDirective(this.end)\n      // If this is a strict mode function, verify that argument names\n      // are not repeated, and it does not try to bind the words `eval`\n      // or `arguments`.\n      if (useStrict && nonSimple)\n        this.raiseRecoverable(node.start, \"Illegal 'use strict' directive in function with non-simple parameter list\")\n    }\n    // Start a new scope with regard to labels and the `inFunction`\n    // flag (restore them to their old value afterwards).\n    var oldLabels = this.labels\n    this.labels = []\n    if (useStrict) this.strict = true\n    node.body = this.parseBlock(true)\n    node.expression = false\n    this.labels = oldLabels\n  }\n\n  if (oldStrict || useStrict) {\n    this.strict = true\n    if (node.id)\n      this.checkLVal(node.id, true)\n    this.checkParams(node)\n    this.strict = oldStrict\n  } else if (isArrowFunction || !this.isSimpleParamList(node.params)) {\n    this.checkParams(node)\n  }\n}\n\npp$3.isSimpleParamList = function(params) {\n  for (var i = 0; i < params.length; i++)\n    if (params[i].type !== \"Identifier\") return false\n  return true\n}\n\n// Checks function params for various disallowed patterns such as using \"eval\"\n// or \"arguments\" and duplicate parameters.\n\npp$3.checkParams = function(node) {\n  var this$1 = this;\n\n  var nameHash = {}\n  for (var i = 0; i < node.params.length; i++) this$1.checkLVal(node.params[i], true, nameHash)\n}\n\n// Parses a comma-separated list of expressions, and returns them as\n// an array. `close` is the token type that ends the list, and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\n\npp$3.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n  var this$1 = this;\n\n  var elts = [], first = true\n  while (!this.eat(close)) {\n    if (!first) {\n      this$1.expect(tt.comma)\n      if (allowTrailingComma && this$1.afterTrailingComma(close)) break\n    } else first = false\n\n    var elt\n    if (allowEmpty && this$1.type === tt.comma)\n      elt = null\n    else if (this$1.type === tt.ellipsis) {\n      elt = this$1.parseSpread(refDestructuringErrors)\n      if (refDestructuringErrors && this$1.type === tt.comma && refDestructuringErrors.trailingComma < 0)\n        refDestructuringErrors.trailingComma = this$1.start\n    } else {\n      elt = this$1.parseMaybeAssign(false, refDestructuringErrors)\n    }\n    elts.push(elt)\n  }\n  return elts\n}\n\n// Parse the next token as an identifier. If `liberal` is true (used\n// when parsing properties), it will also convert keywords into\n// identifiers.\n\npp$3.parseIdent = function(liberal) {\n  var node = this.startNode()\n  if (liberal && this.options.allowReserved == \"never\") liberal = false\n  if (this.type === tt.name) {\n    if (!liberal && (this.strict ? this.reservedWordsStrict : this.reservedWords).test(this.value) &&\n        (this.options.ecmaVersion >= 6 ||\n         this.input.slice(this.start, this.end).indexOf(\"\\\\\") == -1))\n      this.raiseRecoverable(this.start, \"The keyword '\" + this.value + \"' is reserved\")\n    if (this.inGenerator && this.value === \"yield\")\n      this.raiseRecoverable(this.start, \"Can not use 'yield' as identifier inside a generator\")\n    if (this.inAsync && this.value === \"await\")\n      this.raiseRecoverable(this.start, \"Can not use 'await' as identifier inside an async function\")\n    node.name = this.value\n  } else if (liberal && this.type.keyword) {\n    node.name = this.type.keyword\n  } else {\n    this.unexpected()\n  }\n  this.next()\n  return this.finishNode(node, \"Identifier\")\n}\n\n// Parses yield expression inside generator.\n\npp$3.parseYield = function() {\n  if (!this.yieldPos) this.yieldPos = this.start\n\n  var node = this.startNode()\n  this.next()\n  if (this.type == tt.semi || this.canInsertSemicolon() || (this.type != tt.star && !this.type.startsExpr)) {\n    node.delegate = false\n    node.argument = null\n  } else {\n    node.delegate = this.eat(tt.star)\n    node.argument = this.parseMaybeAssign()\n  }\n  return this.finishNode(node, \"YieldExpression\")\n}\n\npp$3.parseAwait = function() {\n  if (!this.awaitPos) this.awaitPos = this.start\n\n  var node = this.startNode()\n  this.next()\n  node.argument = this.parseMaybeUnary(null, true)\n  return this.finishNode(node, \"AwaitExpression\")\n}\n\nvar pp$4 = Parser.prototype\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\npp$4.raise = function(pos, message) {\n  var loc = getLineInfo(this.input, pos)\n  message += \" (\" + loc.line + \":\" + loc.column + \")\"\n  var err = new SyntaxError(message)\n  err.pos = pos; err.loc = loc; err.raisedAt = this.pos\n  throw err\n}\n\npp$4.raiseRecoverable = pp$4.raise\n\npp$4.curPosition = function() {\n  if (this.options.locations) {\n    return new Position(this.curLine, this.pos - this.lineStart)\n  }\n}\n\nvar Node = function Node(parser, pos, loc) {\n  this.type = \"\"\n  this.start = pos\n  this.end = 0\n  if (parser.options.locations)\n    this.loc = new SourceLocation(parser, loc)\n  if (parser.options.directSourceFile)\n    this.sourceFile = parser.options.directSourceFile\n  if (parser.options.ranges)\n    this.range = [pos, 0]\n};\n\n// Start an AST node, attaching a start offset.\n\nvar pp$5 = Parser.prototype\n\npp$5.startNode = function() {\n  return new Node(this, this.start, this.startLoc)\n}\n\npp$5.startNodeAt = function(pos, loc) {\n  return new Node(this, pos, loc)\n}\n\n// Finish an AST node, adding `type` and `end` properties.\n\nfunction finishNodeAt(node, type, pos, loc) {\n  node.type = type\n  node.end = pos\n  if (this.options.locations)\n    node.loc.end = loc\n  if (this.options.ranges)\n    node.range[1] = pos\n  return node\n}\n\npp$5.finishNode = function(node, type) {\n  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)\n}\n\n// Finish node at given position\n\npp$5.finishNodeAt = function(node, type, pos, loc) {\n  return finishNodeAt.call(this, node, type, pos, loc)\n}\n\n// The algorithm used to determine whether a regexp can appear at a\n// given point in the program is loosely based on sweet.js' approach.\n// See https://github.com/mozilla/sweet.js/wiki/design\n\nvar TokContext = function TokContext(token, isExpr, preserveSpace, override) {\n  this.token = token\n  this.isExpr = !!isExpr\n  this.preserveSpace = !!preserveSpace\n  this.override = override\n};\n\nvar types = {\n  b_stat: new TokContext(\"{\", false),\n  b_expr: new TokContext(\"{\", true),\n  b_tmpl: new TokContext(\"${\", true),\n  p_stat: new TokContext(\"(\", false),\n  p_expr: new TokContext(\"(\", true),\n  q_tmpl: new TokContext(\"`\", true, true, function (p) { return p.readTmplToken(); }),\n  f_expr: new TokContext(\"function\", true)\n}\n\nvar pp$6 = Parser.prototype\n\npp$6.initialContext = function() {\n  return [types.b_stat]\n}\n\npp$6.braceIsBlock = function(prevType) {\n  if (prevType === tt.colon) {\n    var parent = this.curContext()\n    if (parent === types.b_stat || parent === types.b_expr)\n      return !parent.isExpr\n  }\n  if (prevType === tt._return)\n    return lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n  if (prevType === tt._else || prevType === tt.semi || prevType === tt.eof || prevType === tt.parenR)\n    return true\n  if (prevType == tt.braceL)\n    return this.curContext() === types.b_stat\n  return !this.exprAllowed\n}\n\npp$6.updateContext = function(prevType) {\n  var update, type = this.type\n  if (type.keyword && prevType == tt.dot)\n    this.exprAllowed = false\n  else if (update = type.updateContext)\n    update.call(this, prevType)\n  else\n    this.exprAllowed = type.beforeExpr\n}\n\n// Token-specific context update code\n\ntt.parenR.updateContext = tt.braceR.updateContext = function() {\n  if (this.context.length == 1) {\n    this.exprAllowed = true\n    return\n  }\n  var out = this.context.pop()\n  if (out === types.b_stat && this.curContext() === types.f_expr) {\n    this.context.pop()\n    this.exprAllowed = false\n  } else if (out === types.b_tmpl) {\n    this.exprAllowed = true\n  } else {\n    this.exprAllowed = !out.isExpr\n  }\n}\n\ntt.braceL.updateContext = function(prevType) {\n  this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr)\n  this.exprAllowed = true\n}\n\ntt.dollarBraceL.updateContext = function() {\n  this.context.push(types.b_tmpl)\n  this.exprAllowed = true\n}\n\ntt.parenL.updateContext = function(prevType) {\n  var statementParens = prevType === tt._if || prevType === tt._for || prevType === tt._with || prevType === tt._while\n  this.context.push(statementParens ? types.p_stat : types.p_expr)\n  this.exprAllowed = true\n}\n\ntt.incDec.updateContext = function() {\n  // tokExprAllowed stays unchanged\n}\n\ntt._function.updateContext = function(prevType) {\n  if (prevType.beforeExpr && prevType !== tt.semi && prevType !== tt._else &&\n      !((prevType === tt.colon || prevType === tt.braceL) && this.curContext() === types.b_stat))\n    this.context.push(types.f_expr)\n  this.exprAllowed = false\n}\n\ntt.backQuote.updateContext = function() {\n  if (this.curContext() === types.q_tmpl)\n    this.context.pop()\n  else\n    this.context.push(types.q_tmpl)\n  this.exprAllowed = false\n}\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nvar Token = function Token(p) {\n  this.type = p.type\n  this.value = p.value\n  this.start = p.start\n  this.end = p.end\n  if (p.options.locations)\n    this.loc = new SourceLocation(p, p.startLoc, p.endLoc)\n  if (p.options.ranges)\n    this.range = [p.start, p.end]\n};\n\n// ## Tokenizer\n\nvar pp$7 = Parser.prototype\n\n// Are we running under Rhino?\nvar isRhino = typeof Packages == \"object\" && Object.prototype.toString.call(Packages) == \"[object JavaPackage]\"\n\n// Move to the next token\n\npp$7.next = function() {\n  if (this.options.onToken)\n    this.options.onToken(new Token(this))\n\n  this.lastTokEnd = this.end\n  this.lastTokStart = this.start\n  this.lastTokEndLoc = this.endLoc\n  this.lastTokStartLoc = this.startLoc\n  this.nextToken()\n}\n\npp$7.getToken = function() {\n  this.next()\n  return new Token(this)\n}\n\n// If we're in an ES6 environment, make parsers iterable\nif (typeof Symbol !== \"undefined\")\n  pp$7[Symbol.iterator] = function () {\n    var self = this\n    return {next: function () {\n      var token = self.getToken()\n      return {\n        done: token.type === tt.eof,\n        value: token\n      }\n    }}\n  }\n\n// Toggle strict mode. Re-reads the next number or string to please\n// pedantic tests (`\"use strict\"; 010;` should fail).\n\npp$7.curContext = function() {\n  return this.context[this.context.length - 1]\n}\n\n// Read a single token, updating the parser object's token-related\n// properties.\n\npp$7.nextToken = function() {\n  var curContext = this.curContext()\n  if (!curContext || !curContext.preserveSpace) this.skipSpace()\n\n  this.start = this.pos\n  if (this.options.locations) this.startLoc = this.curPosition()\n  if (this.pos >= this.input.length) return this.finishToken(tt.eof)\n\n  if (curContext.override) return curContext.override(this)\n  else this.readToken(this.fullCharCodeAtPos())\n}\n\npp$7.readToken = function(code) {\n  // Identifier or keyword. '\\uXXXX' sequences are allowed in\n  // identifiers, so '\\' also dispatches to that.\n  if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */)\n    return this.readWord()\n\n  return this.getTokenFromCode(code)\n}\n\npp$7.fullCharCodeAtPos = function() {\n  var code = this.input.charCodeAt(this.pos)\n  if (code <= 0xd7ff || code >= 0xe000) return code\n  var next = this.input.charCodeAt(this.pos + 1)\n  return (code << 10) + next - 0x35fdc00\n}\n\npp$7.skipBlockComment = function() {\n  var this$1 = this;\n\n  var startLoc = this.options.onComment && this.curPosition()\n  var start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2)\n  if (end === -1) this.raise(this.pos - 2, \"Unterminated comment\")\n  this.pos = end + 2\n  if (this.options.locations) {\n    lineBreakG.lastIndex = start\n    var match\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {\n      ++this$1.curLine\n      this$1.lineStart = match.index + match[0].length\n    }\n  }\n  if (this.options.onComment)\n    this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,\n                           startLoc, this.curPosition())\n}\n\npp$7.skipLineComment = function(startSkip) {\n  var this$1 = this;\n\n  var start = this.pos\n  var startLoc = this.options.onComment && this.curPosition()\n  var ch = this.input.charCodeAt(this.pos+=startSkip)\n  while (this.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {\n    ++this$1.pos\n    ch = this$1.input.charCodeAt(this$1.pos)\n  }\n  if (this.options.onComment)\n    this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,\n                           startLoc, this.curPosition())\n}\n\n// Called at the start of the parse and after every token. Skips\n// whitespace and comments, and.\n\npp$7.skipSpace = function() {\n  var this$1 = this;\n\n  loop: while (this.pos < this.input.length) {\n    var ch = this$1.input.charCodeAt(this$1.pos)\n    switch (ch) {\n      case 32: case 160: // ' '\n        ++this$1.pos\n        break\n      case 13:\n        if (this$1.input.charCodeAt(this$1.pos + 1) === 10) {\n          ++this$1.pos\n        }\n      case 10: case 8232: case 8233:\n        ++this$1.pos\n        if (this$1.options.locations) {\n          ++this$1.curLine\n          this$1.lineStart = this$1.pos\n        }\n        break\n      case 47: // '/'\n        switch (this$1.input.charCodeAt(this$1.pos + 1)) {\n          case 42: // '*'\n            this$1.skipBlockComment()\n            break\n          case 47:\n            this$1.skipLineComment(2)\n            break\n          default:\n            break loop\n        }\n        break\n      default:\n        if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n          ++this$1.pos\n        } else {\n          break loop\n        }\n    }\n  }\n}\n\n// Called at the end of every token. Sets `end`, `val`, and\n// maintains `context` and `exprAllowed`, and skips the space after\n// the token, so that the next one's `start` will point at the\n// right position.\n\npp$7.finishToken = function(type, val) {\n  this.end = this.pos\n  if (this.options.locations) this.endLoc = this.curPosition()\n  var prevType = this.type\n  this.type = type\n  this.value = val\n\n  this.updateContext(prevType)\n}\n\n// ### Token reading\n\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\n//\npp$7.readToken_dot = function() {\n  var next = this.input.charCodeAt(this.pos + 1)\n  if (next >= 48 && next <= 57) return this.readNumber(true)\n  var next2 = this.input.charCodeAt(this.pos + 2)\n  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'\n    this.pos += 3\n    return this.finishToken(tt.ellipsis)\n  } else {\n    ++this.pos\n    return this.finishToken(tt.dot)\n  }\n}\n\npp$7.readToken_slash = function() { // '/'\n  var next = this.input.charCodeAt(this.pos + 1)\n  if (this.exprAllowed) {++this.pos; return this.readRegexp()}\n  if (next === 61) return this.finishOp(tt.assign, 2)\n  return this.finishOp(tt.slash, 1)\n}\n\npp$7.readToken_mult_modulo_exp = function(code) { // '%*'\n  var next = this.input.charCodeAt(this.pos + 1)\n  var size = 1\n  var tokentype = code === 42 ? tt.star : tt.modulo\n\n  // exponentiation operator ** and **=\n  if (this.options.ecmaVersion >= 7 && next === 42) {\n    ++size\n    tokentype = tt.starstar\n    next = this.input.charCodeAt(this.pos + 2)\n  }\n\n  if (next === 61) return this.finishOp(tt.assign, size + 1)\n  return this.finishOp(tokentype, size)\n}\n\npp$7.readToken_pipe_amp = function(code) { // '|&'\n  var next = this.input.charCodeAt(this.pos + 1)\n  if (next === code) return this.finishOp(code === 124 ? tt.logicalOR : tt.logicalAND, 2)\n  if (next === 61) return this.finishOp(tt.assign, 2)\n  return this.finishOp(code === 124 ? tt.bitwiseOR : tt.bitwiseAND, 1)\n}\n\npp$7.readToken_caret = function() { // '^'\n  var next = this.input.charCodeAt(this.pos + 1)\n  if (next === 61) return this.finishOp(tt.assign, 2)\n  return this.finishOp(tt.bitwiseXOR, 1)\n}\n\npp$7.readToken_plus_min = function(code) { // '+-'\n  var next = this.input.charCodeAt(this.pos + 1)\n  if (next === code) {\n    if (next == 45 && this.input.charCodeAt(this.pos + 2) == 62 &&\n        lineBreak.test(this.input.slice(this.lastTokEnd, this.pos))) {\n      // A `-->` line comment\n      this.skipLineComment(3)\n      this.skipSpace()\n      return this.nextToken()\n    }\n    return this.finishOp(tt.incDec, 2)\n  }\n  if (next === 61) return this.finishOp(tt.assign, 2)\n  return this.finishOp(tt.plusMin, 1)\n}\n\npp$7.readToken_lt_gt = function(code) { // '<>'\n  var next = this.input.charCodeAt(this.pos + 1)\n  var size = 1\n  if (next === code) {\n    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2\n    if (this.input.charCodeAt(this.pos + size) === 61) return this.finishOp(tt.assign, size + 1)\n    return this.finishOp(tt.bitShift, size)\n  }\n  if (next == 33 && code == 60 && this.input.charCodeAt(this.pos + 2) == 45 &&\n      this.input.charCodeAt(this.pos + 3) == 45) {\n    if (this.inModule) this.unexpected()\n    // `<!--`, an XML-style comment that should be interpreted as a line comment\n    this.skipLineComment(4)\n    this.skipSpace()\n    return this.nextToken()\n  }\n  if (next === 61) size = 2\n  return this.finishOp(tt.relational, size)\n}\n\npp$7.readToken_eq_excl = function(code) { // '=!'\n  var next = this.input.charCodeAt(this.pos + 1)\n  if (next === 61) return this.finishOp(tt.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2)\n  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'\n    this.pos += 2\n    return this.finishToken(tt.arrow)\n  }\n  return this.finishOp(code === 61 ? tt.eq : tt.prefix, 1)\n}\n\npp$7.getTokenFromCode = function(code) {\n  switch (code) {\n    // The interpretation of a dot depends on whether it is followed\n    // by a digit or another two dots.\n  case 46: // '.'\n    return this.readToken_dot()\n\n    // Punctuation tokens.\n  case 40: ++this.pos; return this.finishToken(tt.parenL)\n  case 41: ++this.pos; return this.finishToken(tt.parenR)\n  case 59: ++this.pos; return this.finishToken(tt.semi)\n  case 44: ++this.pos; return this.finishToken(tt.comma)\n  case 91: ++this.pos; return this.finishToken(tt.bracketL)\n  case 93: ++this.pos; return this.finishToken(tt.bracketR)\n  case 123: ++this.pos; return this.finishToken(tt.braceL)\n  case 125: ++this.pos; return this.finishToken(tt.braceR)\n  case 58: ++this.pos; return this.finishToken(tt.colon)\n  case 63: ++this.pos; return this.finishToken(tt.question)\n\n  case 96: // '`'\n    if (this.options.ecmaVersion < 6) break\n    ++this.pos\n    return this.finishToken(tt.backQuote)\n\n  case 48: // '0'\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (next === 120 || next === 88) return this.readRadixNumber(16) // '0x', '0X' - hex number\n    if (this.options.ecmaVersion >= 6) {\n      if (next === 111 || next === 79) return this.readRadixNumber(8) // '0o', '0O' - octal number\n      if (next === 98 || next === 66) return this.readRadixNumber(2) // '0b', '0B' - binary number\n    }\n    // Anything else beginning with a digit is an integer, octal\n    // number, or float.\n  case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9\n    return this.readNumber(false)\n\n    // Quotes produce strings.\n  case 34: case 39: // '\"', \"'\"\n    return this.readString(code)\n\n    // Operators are parsed inline in tiny state machines. '=' (61) is\n    // often referred to. `finishOp` simply skips the amount of\n    // characters it is given as second argument, and returns a token\n    // of the type given by its first argument.\n\n  case 47: // '/'\n    return this.readToken_slash()\n\n  case 37: case 42: // '%*'\n    return this.readToken_mult_modulo_exp(code)\n\n  case 124: case 38: // '|&'\n    return this.readToken_pipe_amp(code)\n\n  case 94: // '^'\n    return this.readToken_caret()\n\n  case 43: case 45: // '+-'\n    return this.readToken_plus_min(code)\n\n  case 60: case 62: // '<>'\n    return this.readToken_lt_gt(code)\n\n  case 61: case 33: // '=!'\n    return this.readToken_eq_excl(code)\n\n  case 126: // '~'\n    return this.finishOp(tt.prefix, 1)\n  }\n\n  this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\")\n}\n\npp$7.finishOp = function(type, size) {\n  var str = this.input.slice(this.pos, this.pos + size)\n  this.pos += size\n  return this.finishToken(type, str)\n}\n\n// Parse a regular expression. Some context-awareness is necessary,\n// since a '/' inside a '[]' set does not end the expression.\n\nfunction tryCreateRegexp(src, flags, throwErrorAt, parser) {\n  try {\n    return new RegExp(src, flags)\n  } catch (e) {\n    if (throwErrorAt !== undefined) {\n      if (e instanceof SyntaxError) parser.raise(throwErrorAt, \"Error parsing regular expression: \" + e.message)\n      throw e\n    }\n  }\n}\n\nvar regexpUnicodeSupport = !!tryCreateRegexp(\"\\uffff\", \"u\")\n\npp$7.readRegexp = function() {\n  var this$1 = this;\n\n  var escaped, inClass, start = this.pos\n  for (;;) {\n    if (this$1.pos >= this$1.input.length) this$1.raise(start, \"Unterminated regular expression\")\n    var ch = this$1.input.charAt(this$1.pos)\n    if (lineBreak.test(ch)) this$1.raise(start, \"Unterminated regular expression\")\n    if (!escaped) {\n      if (ch === \"[\") inClass = true\n      else if (ch === \"]\" && inClass) inClass = false\n      else if (ch === \"/\" && !inClass) break\n      escaped = ch === \"\\\\\"\n    } else escaped = false\n    ++this$1.pos\n  }\n  var content = this.input.slice(start, this.pos)\n  ++this.pos\n  // Need to use `readWord1` because '\\uXXXX' sequences are allowed\n  // here (don't ask).\n  var mods = this.readWord1()\n  var tmp = content, tmpFlags = \"\"\n  if (mods) {\n    var validFlags = /^[gim]*$/\n    if (this.options.ecmaVersion >= 6) validFlags = /^[gimuy]*$/\n    if (!validFlags.test(mods)) this.raise(start, \"Invalid regular expression flag\")\n    if (mods.indexOf(\"u\") >= 0) {\n      if (regexpUnicodeSupport) {\n        tmpFlags = \"u\"\n      } else {\n        // Replace each astral symbol and every Unicode escape sequence that\n        // possibly represents an astral symbol or a paired surrogate with a\n        // single ASCII symbol to avoid throwing on regular expressions that\n        // are only valid in combination with the `/u` flag.\n        // Note: replacing with the ASCII symbol `x` might cause false\n        // negatives in unlikely scenarios. For example, `[\\u{61}-b]` is a\n        // perfectly valid pattern that is equivalent to `[a-b]`, but it would\n        // be replaced by `[x-b]` which throws an error.\n        tmp = tmp.replace(/\\\\u\\{([0-9a-fA-F]+)\\}/g, function (_match, code, offset) {\n          code = Number(\"0x\" + code)\n          if (code > 0x10FFFF) this$1.raise(start + offset + 3, \"Code point out of bounds\")\n          return \"x\"\n        })\n        tmp = tmp.replace(/\\\\u([a-fA-F0-9]{4})|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, \"x\")\n        tmpFlags = tmpFlags.replace(\"u\", \"\")\n      }\n    }\n  }\n  // Detect invalid regular expressions.\n  var value = null\n  // Rhino's regular expression parser is flaky and throws uncatchable exceptions,\n  // so don't do detection if we are running under Rhino\n  if (!isRhino) {\n    tryCreateRegexp(tmp, tmpFlags, start, this)\n    // Get a regular expression object for this pattern-flag pair, or `null` in\n    // case the current environment doesn't support the flags it uses.\n    value = tryCreateRegexp(content, mods)\n  }\n  return this.finishToken(tt.regexp, {pattern: content, flags: mods, value: value})\n}\n\n// Read an integer in the given radix. Return null if zero digits\n// were read, the integer value otherwise. When `len` is given, this\n// will return `null` unless the integer has exactly `len` digits.\n\npp$7.readInt = function(radix, len) {\n  var this$1 = this;\n\n  var start = this.pos, total = 0\n  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    var code = this$1.input.charCodeAt(this$1.pos), val\n    if (code >= 97) val = code - 97 + 10 // a\n    else if (code >= 65) val = code - 65 + 10 // A\n    else if (code >= 48 && code <= 57) val = code - 48 // 0-9\n    else val = Infinity\n    if (val >= radix) break\n    ++this$1.pos\n    total = total * radix + val\n  }\n  if (this.pos === start || len != null && this.pos - start !== len) return null\n\n  return total\n}\n\npp$7.readRadixNumber = function(radix) {\n  this.pos += 2 // 0x\n  var val = this.readInt(radix)\n  if (val == null) this.raise(this.start + 2, \"Expected number in radix \" + radix)\n  if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\")\n  return this.finishToken(tt.num, val)\n}\n\n// Read an integer, octal integer, or floating-point number.\n\npp$7.readNumber = function(startsWithDot) {\n  var start = this.pos, isFloat = false, octal = this.input.charCodeAt(this.pos) === 48\n  if (!startsWithDot && this.readInt(10) === null) this.raise(start, \"Invalid number\")\n  if (octal && this.pos == start + 1) octal = false\n  var next = this.input.charCodeAt(this.pos)\n  if (next === 46 && !octal) { // '.'\n    ++this.pos\n    this.readInt(10)\n    isFloat = true\n    next = this.input.charCodeAt(this.pos)\n  }\n  if ((next === 69 || next === 101) && !octal) { // 'eE'\n    next = this.input.charCodeAt(++this.pos)\n    if (next === 43 || next === 45) ++this.pos // '+-'\n    if (this.readInt(10) === null) this.raise(start, \"Invalid number\")\n    isFloat = true\n  }\n  if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\")\n\n  var str = this.input.slice(start, this.pos), val\n  if (isFloat) val = parseFloat(str)\n  else if (!octal || str.length === 1) val = parseInt(str, 10)\n  else if (/[89]/.test(str) || this.strict) this.raise(start, \"Invalid number\")\n  else val = parseInt(str, 8)\n  return this.finishToken(tt.num, val)\n}\n\n// Read a string value, interpreting backslash-escapes.\n\npp$7.readCodePoint = function() {\n  var ch = this.input.charCodeAt(this.pos), code\n\n  if (ch === 123) {\n    if (this.options.ecmaVersion < 6) this.unexpected()\n    var codePos = ++this.pos\n    code = this.readHexChar(this.input.indexOf('}', this.pos) - this.pos)\n    ++this.pos\n    if (code > 0x10FFFF) this.raise(codePos, \"Code point out of bounds\")\n  } else {\n    code = this.readHexChar(4)\n  }\n  return code\n}\n\nfunction codePointToString(code) {\n  // UTF-16 Decoding\n  if (code <= 0xFFFF) return String.fromCharCode(code)\n  code -= 0x10000\n  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)\n}\n\npp$7.readString = function(quote) {\n  var this$1 = this;\n\n  var out = \"\", chunkStart = ++this.pos\n  for (;;) {\n    if (this$1.pos >= this$1.input.length) this$1.raise(this$1.start, \"Unterminated string constant\")\n    var ch = this$1.input.charCodeAt(this$1.pos)\n    if (ch === quote) break\n    if (ch === 92) { // '\\'\n      out += this$1.input.slice(chunkStart, this$1.pos)\n      out += this$1.readEscapedChar(false)\n      chunkStart = this$1.pos\n    } else {\n      if (isNewLine(ch)) this$1.raise(this$1.start, \"Unterminated string constant\")\n      ++this$1.pos\n    }\n  }\n  out += this.input.slice(chunkStart, this.pos++)\n  return this.finishToken(tt.string, out)\n}\n\n// Reads template string tokens.\n\npp$7.readTmplToken = function() {\n  var this$1 = this;\n\n  var out = \"\", chunkStart = this.pos\n  for (;;) {\n    if (this$1.pos >= this$1.input.length) this$1.raise(this$1.start, \"Unterminated template\")\n    var ch = this$1.input.charCodeAt(this$1.pos)\n    if (ch === 96 || ch === 36 && this$1.input.charCodeAt(this$1.pos + 1) === 123) { // '`', '${'\n      if (this$1.pos === this$1.start && this$1.type === tt.template) {\n        if (ch === 36) {\n          this$1.pos += 2\n          return this$1.finishToken(tt.dollarBraceL)\n        } else {\n          ++this$1.pos\n          return this$1.finishToken(tt.backQuote)\n        }\n      }\n      out += this$1.input.slice(chunkStart, this$1.pos)\n      return this$1.finishToken(tt.template, out)\n    }\n    if (ch === 92) { // '\\'\n      out += this$1.input.slice(chunkStart, this$1.pos)\n      out += this$1.readEscapedChar(true)\n      chunkStart = this$1.pos\n    } else if (isNewLine(ch)) {\n      out += this$1.input.slice(chunkStart, this$1.pos)\n      ++this$1.pos\n      switch (ch) {\n        case 13:\n          if (this$1.input.charCodeAt(this$1.pos) === 10) ++this$1.pos\n        case 10:\n          out += \"\\n\"\n          break\n        default:\n          out += String.fromCharCode(ch)\n          break\n      }\n      if (this$1.options.locations) {\n        ++this$1.curLine\n        this$1.lineStart = this$1.pos\n      }\n      chunkStart = this$1.pos\n    } else {\n      ++this$1.pos\n    }\n  }\n}\n\n// Used to read escaped characters\n\npp$7.readEscapedChar = function(inTemplate) {\n  var ch = this.input.charCodeAt(++this.pos)\n  ++this.pos\n  switch (ch) {\n  case 110: return \"\\n\" // 'n' -> '\\n'\n  case 114: return \"\\r\" // 'r' -> '\\r'\n  case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'\n  case 117: return codePointToString(this.readCodePoint()) // 'u'\n  case 116: return \"\\t\" // 't' -> '\\t'\n  case 98: return \"\\b\" // 'b' -> '\\b'\n  case 118: return \"\\u000b\" // 'v' -> '\\u000b'\n  case 102: return \"\\f\" // 'f' -> '\\f'\n  case 13: if (this.input.charCodeAt(this.pos) === 10) ++this.pos // '\\r\\n'\n  case 10: // ' \\n'\n    if (this.options.locations) { this.lineStart = this.pos; ++this.curLine }\n    return \"\"\n  default:\n    if (ch >= 48 && ch <= 55) {\n      var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0]\n      var octal = parseInt(octalStr, 8)\n      if (octal > 255) {\n        octalStr = octalStr.slice(0, -1)\n        octal = parseInt(octalStr, 8)\n      }\n      if (octalStr !== \"0\" && (this.strict || inTemplate)) {\n        this.raise(this.pos - 2, \"Octal literal in strict mode\")\n      }\n      this.pos += octalStr.length - 1\n      return String.fromCharCode(octal)\n    }\n    return String.fromCharCode(ch)\n  }\n}\n\n// Used to read character escape sequences ('\\x', '\\u', '\\U').\n\npp$7.readHexChar = function(len) {\n  var codePos = this.pos\n  var n = this.readInt(16, len)\n  if (n === null) this.raise(codePos, \"Bad character escape sequence\")\n  return n\n}\n\n// Read an identifier, and return it as a string. Sets `this.containsEsc`\n// to whether the word contained a '\\u' escape.\n//\n// Incrementally adds only escaped chars, adding other chunks as-is\n// as a micro-optimization.\n\npp$7.readWord1 = function() {\n  var this$1 = this;\n\n  this.containsEsc = false\n  var word = \"\", first = true, chunkStart = this.pos\n  var astral = this.options.ecmaVersion >= 6\n  while (this.pos < this.input.length) {\n    var ch = this$1.fullCharCodeAtPos()\n    if (isIdentifierChar(ch, astral)) {\n      this$1.pos += ch <= 0xffff ? 1 : 2\n    } else if (ch === 92) { // \"\\\"\n      this$1.containsEsc = true\n      word += this$1.input.slice(chunkStart, this$1.pos)\n      var escStart = this$1.pos\n      if (this$1.input.charCodeAt(++this$1.pos) != 117) // \"u\"\n        this$1.raise(this$1.pos, \"Expecting Unicode escape sequence \\\\uXXXX\")\n      ++this$1.pos\n      var esc = this$1.readCodePoint()\n      if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))\n        this$1.raise(escStart, \"Invalid Unicode escape\")\n      word += codePointToString(esc)\n      chunkStart = this$1.pos\n    } else {\n      break\n    }\n    first = false\n  }\n  return word + this.input.slice(chunkStart, this.pos)\n}\n\n// Read an identifier or keyword token. Will check for reserved\n// words when necessary.\n\npp$7.readWord = function() {\n  var word = this.readWord1()\n  var type = tt.name\n  if (this.keywords.test(word)) {\n    if (this.containsEsc) this.raiseRecoverable(this.start, \"Escape sequence in keyword \" + word)\n    type = keywordTypes[word]\n  }\n  return this.finishToken(type, word)\n}\n\n// Acorn is a tiny, fast JavaScript parser written in JavaScript.\n//\n// Acorn was written by Marijn Haverbeke, Ingvar Stepanyan, and\n// various contributors and released under an MIT license.\n//\n// Git repositories for Acorn are available at\n//\n//     http://marijnhaverbeke.nl/git/acorn\n//     https://github.com/ternjs/acorn.git\n//\n// Please use the [github bug tracker][ghbt] to report issues.\n//\n// [ghbt]: https://github.com/ternjs/acorn/issues\n//\n// This file defines the main parser interface. The library also comes\n// with a [error-tolerant parser][dammit] and an\n// [abstract syntax tree walker][walk], defined in other files.\n//\n// [dammit]: acorn_loose.js\n// [walk]: util/walk.js\n\nvar version = \"4.0.11\"\n\n// The main exported interface (under `self.acorn` when in the\n// browser) is a `parse` function that takes a code string and\n// returns an abstract syntax tree as specified by [Mozilla parser\n// API][api].\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\nfunction parse(input, options) {\n  return new Parser(options, input).parse()\n}\n\n// This function tries to parse a single expression at a given\n// offset in a string. Useful for parsing mixed-language formats\n// that embed JavaScript expressions.\n\nfunction parseExpressionAt(input, pos, options) {\n  var p = new Parser(options, input, pos)\n  p.nextToken()\n  return p.parseExpression()\n}\n\n// Acorn is organized as a tokenizer and a recursive-descent parser.\n// The `tokenizer` export provides an interface to the tokenizer.\n\nfunction tokenizer(input, options) {\n  return new Parser(options, input)\n}\n\n// This is a terrible kludge to support the existing, pre-ES6\n// interface where the loose parser module retroactively adds exports\n// to this module.\nfunction addLooseExports(parse, Parser, plugins) {\n  exports.parse_dammit = parse\n  exports.LooseParser = Parser\n  exports.pluginsLoose = plugins\n}\n\nexports.version = version;\nexports.parse = parse;\nexports.parseExpressionAt = parseExpressionAt;\nexports.tokenizer = tokenizer;\nexports.addLooseExports = addLooseExports;\nexports.Parser = Parser;\nexports.plugins = plugins;\nexports.defaultOptions = defaultOptions;\nexports.Position = Position;\nexports.SourceLocation = SourceLocation;\nexports.getLineInfo = getLineInfo;\nexports.Node = Node;\nexports.TokenType = TokenType;\nexports.tokTypes = tt;\nexports.keywordTypes = keywordTypes;\nexports.TokContext = TokContext;\nexports.tokContexts = types;\nexports.isIdentifierChar = isIdentifierChar;\nexports.isIdentifierStart = isIdentifierStart;\nexports.Token = Token;\nexports.isNewLine = isNewLine;\nexports.lineBreak = lineBreak;\nexports.lineBreakG = lineBreakG;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));"],"mappings":"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"},"metadata":{},"sourceType":"script"}