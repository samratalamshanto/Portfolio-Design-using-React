{"ast":null,"code":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\nvar Buffer = require('buffer').Buffer;\n\nvar isBufferEncoding = Buffer.isEncoding || function (encoding) {\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n    case 'raw':\n      return true;\n\n    default:\n      return false;\n  }\n};\n\nfunction assertEncoding(encoding) {\n  if (encoding && !isBufferEncoding(encoding)) {\n    throw new Error('Unknown encoding: ' + encoding);\n  }\n} // StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters. CESU-8 is handled as part of the UTF-8 encoding.\n//\n// @TODO Handling all encodings inside a single object makes it very difficult\n// to reason about this code, so it should be split up in the future.\n// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code\n// points as used by CESU-8.\n\n\nvar StringDecoder = exports.StringDecoder = function (encoding) {\n  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');\n  assertEncoding(encoding);\n\n  switch (this.encoding) {\n    case 'utf8':\n      // CESU-8 represents each of Surrogate Pair by 3-bytes\n      this.surrogateSize = 3;\n      break;\n\n    case 'ucs2':\n    case 'utf16le':\n      // UTF-16 represents each of Surrogate Pair by 2-bytes\n      this.surrogateSize = 2;\n      this.detectIncompleteChar = utf16DetectIncompleteChar;\n      break;\n\n    case 'base64':\n      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.\n      this.surrogateSize = 3;\n      this.detectIncompleteChar = base64DetectIncompleteChar;\n      break;\n\n    default:\n      this.write = passThroughWrite;\n      return;\n  } // Enough space to store all bytes of a single character. UTF-8 needs 4\n  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).\n\n\n  this.charBuffer = new Buffer(6); // Number of bytes received for the current incomplete multi-byte character.\n\n  this.charReceived = 0; // Number of bytes expected for the current incomplete multi-byte character.\n\n  this.charLength = 0;\n}; // write decodes the given buffer and returns it as JS string that is\n// guaranteed to not contain any partial multi-byte characters. Any partial\n// character found at the end of the buffer is buffered up, and will be\n// returned when calling write again with the remaining bytes.\n//\n// Note: Converting a Buffer containing an orphan surrogate to a String\n// currently works, but converting a String to a Buffer (via `new Buffer`, or\n// Buffer#write) will replace incomplete surrogates with the unicode\n// replacement character. See https://codereview.chromium.org/121173009/ .\n\n\nStringDecoder.prototype.write = function (buffer) {\n  var charStr = ''; // if our last write ended with an incomplete multibyte character\n\n  while (this.charLength) {\n    // determine how many remaining bytes this buffer has to offer for this char\n    var available = buffer.length >= this.charLength - this.charReceived ? this.charLength - this.charReceived : buffer.length; // add the new bytes to the char buffer\n\n    buffer.copy(this.charBuffer, this.charReceived, 0, available);\n    this.charReceived += available;\n\n    if (this.charReceived < this.charLength) {\n      // still not enough chars in this buffer? wait for more ...\n      return '';\n    } // remove bytes belonging to the current character from the buffer\n\n\n    buffer = buffer.slice(available, buffer.length); // get the character that was split\n\n    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding); // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n\n    var charCode = charStr.charCodeAt(charStr.length - 1);\n\n    if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n      this.charLength += this.surrogateSize;\n      charStr = '';\n      continue;\n    }\n\n    this.charReceived = this.charLength = 0; // if there are no more bytes in this buffer, just emit our char\n\n    if (buffer.length === 0) {\n      return charStr;\n    }\n\n    break;\n  } // determine and set charLength / charReceived\n\n\n  this.detectIncompleteChar(buffer);\n  var end = buffer.length;\n\n  if (this.charLength) {\n    // buffer the incomplete character bytes we got\n    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);\n    end -= this.charReceived;\n  }\n\n  charStr += buffer.toString(this.encoding, 0, end);\n  var end = charStr.length - 1;\n  var charCode = charStr.charCodeAt(end); // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n\n  if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n    var size = this.surrogateSize;\n    this.charLength += size;\n    this.charReceived += size;\n    this.charBuffer.copy(this.charBuffer, size, 0, size);\n    buffer.copy(this.charBuffer, 0, 0, size);\n    return charStr.substring(0, end);\n  } // or just emit the charStr\n\n\n  return charStr;\n}; // detectIncompleteChar determines if there is an incomplete UTF-8 character at\n// the end of the given buffer. If so, it sets this.charLength to the byte\n// length that character, and sets this.charReceived to the number of bytes\n// that are available for this character.\n\n\nStringDecoder.prototype.detectIncompleteChar = function (buffer) {\n  // determine how many bytes we have to check at the end of this buffer\n  var i = buffer.length >= 3 ? 3 : buffer.length; // Figure out if one of the last i bytes of our buffer announces an\n  // incomplete char.\n\n  for (; i > 0; i--) {\n    var c = buffer[buffer.length - i]; // See http://en.wikipedia.org/wiki/UTF-8#Description\n    // 110XXXXX\n\n    if (i == 1 && c >> 5 == 0x06) {\n      this.charLength = 2;\n      break;\n    } // 1110XXXX\n\n\n    if (i <= 2 && c >> 4 == 0x0E) {\n      this.charLength = 3;\n      break;\n    } // 11110XXX\n\n\n    if (i <= 3 && c >> 3 == 0x1E) {\n      this.charLength = 4;\n      break;\n    }\n  }\n\n  this.charReceived = i;\n};\n\nStringDecoder.prototype.end = function (buffer) {\n  var res = '';\n  if (buffer && buffer.length) res = this.write(buffer);\n\n  if (this.charReceived) {\n    var cr = this.charReceived;\n    var buf = this.charBuffer;\n    var enc = this.encoding;\n    res += buf.slice(0, cr).toString(enc);\n  }\n\n  return res;\n};\n\nfunction passThroughWrite(buffer) {\n  return buffer.toString(this.encoding);\n}\n\nfunction utf16DetectIncompleteChar(buffer) {\n  this.charReceived = buffer.length % 2;\n  this.charLength = this.charReceived ? 2 : 0;\n}\n\nfunction base64DetectIncompleteChar(buffer) {\n  this.charReceived = buffer.length % 3;\n  this.charLength = this.charReceived ? 3 : 0;\n}","map":{"version":3,"names":["Buffer","require","isBufferEncoding","isEncoding","encoding","toLowerCase","assertEncoding","Error","StringDecoder","exports","replace","surrogateSize","detectIncompleteChar","utf16DetectIncompleteChar","base64DetectIncompleteChar","write","passThroughWrite","charBuffer","charReceived","charLength","prototype","buffer","charStr","available","length","copy","slice","toString","charCode","charCodeAt","end","size","substring","i","c","res","cr","buf","enc"],"sources":["G:/anaconda/project/download files/last down/New folder/desktop/Samrat/protfolio/protfolio/node_modules/glob-stream/node_modules/string_decoder/index.js"],"sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar Buffer = require('buffer').Buffer;\n\nvar isBufferEncoding = Buffer.isEncoding\n  || function(encoding) {\n       switch (encoding && encoding.toLowerCase()) {\n         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;\n         default: return false;\n       }\n     }\n\n\nfunction assertEncoding(encoding) {\n  if (encoding && !isBufferEncoding(encoding)) {\n    throw new Error('Unknown encoding: ' + encoding);\n  }\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters. CESU-8 is handled as part of the UTF-8 encoding.\n//\n// @TODO Handling all encodings inside a single object makes it very difficult\n// to reason about this code, so it should be split up in the future.\n// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code\n// points as used by CESU-8.\nvar StringDecoder = exports.StringDecoder = function(encoding) {\n  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');\n  assertEncoding(encoding);\n  switch (this.encoding) {\n    case 'utf8':\n      // CESU-8 represents each of Surrogate Pair by 3-bytes\n      this.surrogateSize = 3;\n      break;\n    case 'ucs2':\n    case 'utf16le':\n      // UTF-16 represents each of Surrogate Pair by 2-bytes\n      this.surrogateSize = 2;\n      this.detectIncompleteChar = utf16DetectIncompleteChar;\n      break;\n    case 'base64':\n      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.\n      this.surrogateSize = 3;\n      this.detectIncompleteChar = base64DetectIncompleteChar;\n      break;\n    default:\n      this.write = passThroughWrite;\n      return;\n  }\n\n  // Enough space to store all bytes of a single character. UTF-8 needs 4\n  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).\n  this.charBuffer = new Buffer(6);\n  // Number of bytes received for the current incomplete multi-byte character.\n  this.charReceived = 0;\n  // Number of bytes expected for the current incomplete multi-byte character.\n  this.charLength = 0;\n};\n\n\n// write decodes the given buffer and returns it as JS string that is\n// guaranteed to not contain any partial multi-byte characters. Any partial\n// character found at the end of the buffer is buffered up, and will be\n// returned when calling write again with the remaining bytes.\n//\n// Note: Converting a Buffer containing an orphan surrogate to a String\n// currently works, but converting a String to a Buffer (via `new Buffer`, or\n// Buffer#write) will replace incomplete surrogates with the unicode\n// replacement character. See https://codereview.chromium.org/121173009/ .\nStringDecoder.prototype.write = function(buffer) {\n  var charStr = '';\n  // if our last write ended with an incomplete multibyte character\n  while (this.charLength) {\n    // determine how many remaining bytes this buffer has to offer for this char\n    var available = (buffer.length >= this.charLength - this.charReceived) ?\n        this.charLength - this.charReceived :\n        buffer.length;\n\n    // add the new bytes to the char buffer\n    buffer.copy(this.charBuffer, this.charReceived, 0, available);\n    this.charReceived += available;\n\n    if (this.charReceived < this.charLength) {\n      // still not enough chars in this buffer? wait for more ...\n      return '';\n    }\n\n    // remove bytes belonging to the current character from the buffer\n    buffer = buffer.slice(available, buffer.length);\n\n    // get the character that was split\n    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);\n\n    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n    var charCode = charStr.charCodeAt(charStr.length - 1);\n    if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n      this.charLength += this.surrogateSize;\n      charStr = '';\n      continue;\n    }\n    this.charReceived = this.charLength = 0;\n\n    // if there are no more bytes in this buffer, just emit our char\n    if (buffer.length === 0) {\n      return charStr;\n    }\n    break;\n  }\n\n  // determine and set charLength / charReceived\n  this.detectIncompleteChar(buffer);\n\n  var end = buffer.length;\n  if (this.charLength) {\n    // buffer the incomplete character bytes we got\n    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);\n    end -= this.charReceived;\n  }\n\n  charStr += buffer.toString(this.encoding, 0, end);\n\n  var end = charStr.length - 1;\n  var charCode = charStr.charCodeAt(end);\n  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n  if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n    var size = this.surrogateSize;\n    this.charLength += size;\n    this.charReceived += size;\n    this.charBuffer.copy(this.charBuffer, size, 0, size);\n    buffer.copy(this.charBuffer, 0, 0, size);\n    return charStr.substring(0, end);\n  }\n\n  // or just emit the charStr\n  return charStr;\n};\n\n// detectIncompleteChar determines if there is an incomplete UTF-8 character at\n// the end of the given buffer. If so, it sets this.charLength to the byte\n// length that character, and sets this.charReceived to the number of bytes\n// that are available for this character.\nStringDecoder.prototype.detectIncompleteChar = function(buffer) {\n  // determine how many bytes we have to check at the end of this buffer\n  var i = (buffer.length >= 3) ? 3 : buffer.length;\n\n  // Figure out if one of the last i bytes of our buffer announces an\n  // incomplete char.\n  for (; i > 0; i--) {\n    var c = buffer[buffer.length - i];\n\n    // See http://en.wikipedia.org/wiki/UTF-8#Description\n\n    // 110XXXXX\n    if (i == 1 && c >> 5 == 0x06) {\n      this.charLength = 2;\n      break;\n    }\n\n    // 1110XXXX\n    if (i <= 2 && c >> 4 == 0x0E) {\n      this.charLength = 3;\n      break;\n    }\n\n    // 11110XXX\n    if (i <= 3 && c >> 3 == 0x1E) {\n      this.charLength = 4;\n      break;\n    }\n  }\n  this.charReceived = i;\n};\n\nStringDecoder.prototype.end = function(buffer) {\n  var res = '';\n  if (buffer && buffer.length)\n    res = this.write(buffer);\n\n  if (this.charReceived) {\n    var cr = this.charReceived;\n    var buf = this.charBuffer;\n    var enc = this.encoding;\n    res += buf.slice(0, cr).toString(enc);\n  }\n\n  return res;\n};\n\nfunction passThroughWrite(buffer) {\n  return buffer.toString(this.encoding);\n}\n\nfunction utf16DetectIncompleteChar(buffer) {\n  this.charReceived = buffer.length % 2;\n  this.charLength = this.charReceived ? 2 : 0;\n}\n\nfunction base64DetectIncompleteChar(buffer) {\n  this.charReceived = buffer.length % 3;\n  this.charLength = this.charReceived ? 3 : 0;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}