{"ast":null,"code":"/*!\n * glob-base <https://github.com/jonschlinkert/glob-base>\n *\n * Copyright (c) 2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n'use strict';\n\nvar path = require('path');\n\nvar parent = require('glob-parent');\n\nvar isGlob = require('is-glob');\n\nmodule.exports = function globBase(pattern) {\n  if (typeof pattern !== 'string') {\n    throw new TypeError('glob-base expects a string.');\n  }\n\n  var res = {};\n  res.base = parent(pattern);\n  res.isGlob = isGlob(pattern);\n\n  if (res.base !== '.') {\n    res.glob = pattern.substr(res.base.length);\n\n    if (res.glob.charAt(0) === '/') {\n      res.glob = res.glob.substr(1);\n    }\n  } else {\n    res.glob = pattern;\n  }\n\n  if (!res.isGlob) {\n    res.base = dirname(pattern);\n    res.glob = res.base !== '.' ? pattern.substr(res.base.length) : pattern;\n  }\n\n  if (res.glob.substr(0, 2) === './') {\n    res.glob = res.glob.substr(2);\n  }\n\n  if (res.glob.charAt(0) === '/') {\n    res.glob = res.glob.substr(1);\n  }\n\n  return res;\n};\n\nfunction dirname(glob) {\n  if (glob.slice(-1) === '/') return glob;\n  return path.dirname(glob);\n}","map":{"version":3,"names":["path","require","parent","isGlob","module","exports","globBase","pattern","TypeError","res","base","glob","substr","length","charAt","dirname","slice"],"sources":["G:/anaconda/project/download files/last down/New folder/desktop/Samrat/protfolio/protfolio/node_modules/glob-base/index.js"],"sourcesContent":["/*!\n * glob-base <https://github.com/jonschlinkert/glob-base>\n *\n * Copyright (c) 2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nvar path = require('path');\nvar parent = require('glob-parent');\nvar isGlob = require('is-glob');\n\nmodule.exports = function globBase(pattern) {\n  if (typeof pattern !== 'string') {\n    throw new TypeError('glob-base expects a string.');\n  }\n\n  var res = {};\n  res.base = parent(pattern);\n  res.isGlob = isGlob(pattern);\n\n  if (res.base !== '.') {\n    res.glob = pattern.substr(res.base.length);\n    if (res.glob.charAt(0) === '/') {\n      res.glob = res.glob.substr(1);\n    }\n  } else {\n    res.glob = pattern;\n  }\n\n  if (!res.isGlob) {\n    res.base = dirname(pattern);\n    res.glob = res.base !== '.'\n      ? pattern.substr(res.base.length)\n      : pattern;\n  }\n\n  if (res.glob.substr(0, 2) === './') {\n    res.glob = res.glob.substr(2);\n  }\n  if (res.glob.charAt(0) === '/') {\n    res.glob = res.glob.substr(1);\n  }\n  return res;\n};\n\nfunction dirname(glob) {\n  if (glob.slice(-1) === '/') return glob;\n  return path.dirname(glob);\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,aAAD,CAApB;;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAC,SAAD,CAApB;;AAEAG,MAAM,CAACC,OAAP,GAAiB,SAASC,QAAT,CAAkBC,OAAlB,EAA2B;EAC1C,IAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;IAC/B,MAAM,IAAIC,SAAJ,CAAc,6BAAd,CAAN;EACD;;EAED,IAAIC,GAAG,GAAG,EAAV;EACAA,GAAG,CAACC,IAAJ,GAAWR,MAAM,CAACK,OAAD,CAAjB;EACAE,GAAG,CAACN,MAAJ,GAAaA,MAAM,CAACI,OAAD,CAAnB;;EAEA,IAAIE,GAAG,CAACC,IAAJ,KAAa,GAAjB,EAAsB;IACpBD,GAAG,CAACE,IAAJ,GAAWJ,OAAO,CAACK,MAAR,CAAeH,GAAG,CAACC,IAAJ,CAASG,MAAxB,CAAX;;IACA,IAAIJ,GAAG,CAACE,IAAJ,CAASG,MAAT,CAAgB,CAAhB,MAAuB,GAA3B,EAAgC;MAC9BL,GAAG,CAACE,IAAJ,GAAWF,GAAG,CAACE,IAAJ,CAASC,MAAT,CAAgB,CAAhB,CAAX;IACD;EACF,CALD,MAKO;IACLH,GAAG,CAACE,IAAJ,GAAWJ,OAAX;EACD;;EAED,IAAI,CAACE,GAAG,CAACN,MAAT,EAAiB;IACfM,GAAG,CAACC,IAAJ,GAAWK,OAAO,CAACR,OAAD,CAAlB;IACAE,GAAG,CAACE,IAAJ,GAAWF,GAAG,CAACC,IAAJ,KAAa,GAAb,GACPH,OAAO,CAACK,MAAR,CAAeH,GAAG,CAACC,IAAJ,CAASG,MAAxB,CADO,GAEPN,OAFJ;EAGD;;EAED,IAAIE,GAAG,CAACE,IAAJ,CAASC,MAAT,CAAgB,CAAhB,EAAmB,CAAnB,MAA0B,IAA9B,EAAoC;IAClCH,GAAG,CAACE,IAAJ,GAAWF,GAAG,CAACE,IAAJ,CAASC,MAAT,CAAgB,CAAhB,CAAX;EACD;;EACD,IAAIH,GAAG,CAACE,IAAJ,CAASG,MAAT,CAAgB,CAAhB,MAAuB,GAA3B,EAAgC;IAC9BL,GAAG,CAACE,IAAJ,GAAWF,GAAG,CAACE,IAAJ,CAASC,MAAT,CAAgB,CAAhB,CAAX;EACD;;EACD,OAAOH,GAAP;AACD,CAhCD;;AAkCA,SAASM,OAAT,CAAiBJ,IAAjB,EAAuB;EACrB,IAAIA,IAAI,CAACK,KAAL,CAAW,CAAC,CAAZ,MAAmB,GAAvB,EAA4B,OAAOL,IAAP;EAC5B,OAAOX,IAAI,CAACe,OAAL,CAAaJ,IAAb,CAAP;AACD"},"metadata":{},"sourceType":"script"}