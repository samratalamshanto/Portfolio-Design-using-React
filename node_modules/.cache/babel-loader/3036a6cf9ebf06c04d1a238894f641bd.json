{"ast":null,"code":"'use strict';\n\nvar utils = require('../utils'),\n    through = require('through2'),\n    unixStylePath = utils.unixStylePath,\n    PLUGIN_NAME = utils.PLUGIN_NAME,\n    internalsInit = require('./index.internals');\n/**\n * Write the source map\n *\n * @param options options to change the way the source map is written\n *\n */\n\n\nfunction write(destPath, options) {\n  var debug = require('debug-fabulous')()(PLUGIN_NAME + ':write');\n\n  debug(utils.logCb(\"destPath\"));\n  debug(utils.logCb(destPath));\n  debug(utils.logCb(\"original options\"));\n  debug(utils.logCb(options));\n\n  if (options === undefined && typeof destPath !== 'string') {\n    options = destPath;\n    destPath = undefined;\n  }\n\n  options = options || {}; // set defaults for options if unset\n\n  if (options.includeContent === undefined) options.includeContent = true;\n  if (options.addComment === undefined) options.addComment = true;\n  if (options.charset === undefined) options.charset = \"utf8\";\n  debug(utils.logCb(\"derrived options\"));\n  debug(utils.logCb(options));\n  var internals = internalsInit(destPath, options);\n\n  function sourceMapWrite(file, encoding, callback) {\n    /*jshint validthis:true */\n    if (file.isNull() || !file.sourceMap) {\n      this.push(file);\n      return callback();\n    }\n\n    if (file.isStream()) {\n      return callback(new Error(PLUGIN_NAME + '-write: Streaming not supported'));\n    } // fix paths if Windows style paths\n\n\n    file.sourceMap.file = unixStylePath(file.relative);\n    internals.setSourceRoot(file);\n    internals.loadContent(file);\n    internals.mapSources(file);\n    internals.mapDestPath(file, this);\n    this.push(file);\n    callback();\n  }\n\n  return through.obj(sourceMapWrite);\n}\n\nmodule.exports = write;","map":{"version":3,"names":["utils","require","through","unixStylePath","PLUGIN_NAME","internalsInit","write","destPath","options","debug","logCb","undefined","includeContent","addComment","charset","internals","sourceMapWrite","file","encoding","callback","isNull","sourceMap","push","isStream","Error","relative","setSourceRoot","loadContent","mapSources","mapDestPath","obj","module","exports"],"sources":["G:/anaconda/project/download files/last down/New folder/desktop/Samrat/protfolio/protfolio/node_modules/gulp-sourcemaps/src/write/index.js"],"sourcesContent":["'use strict';\nvar utils = require('../utils'),\n  through = require('through2'),\n  unixStylePath = utils.unixStylePath,\n  PLUGIN_NAME = utils.PLUGIN_NAME,\n  internalsInit = require('./index.internals');\n\n/**\n * Write the source map\n *\n * @param options options to change the way the source map is written\n *\n */\nfunction write(destPath, options) {\n  var debug = require('debug-fabulous')()(PLUGIN_NAME + ':write');\n\n  debug(utils.logCb(\"destPath\"));\n  debug(utils.logCb(destPath));\n\n  debug(utils.logCb(\"original options\"));\n  debug(utils.logCb(options));\n\n  if (options === undefined && typeof destPath !== 'string') {\n    options = destPath;\n    destPath = undefined;\n  }\n  options = options || {};\n\n  // set defaults for options if unset\n  if (options.includeContent === undefined)\n    options.includeContent = true;\n  if (options.addComment === undefined)\n    options.addComment = true;\n  if (options.charset === undefined)\n    options.charset = \"utf8\";\n\n  debug(utils.logCb(\"derrived options\"));\n  debug(utils.logCb(options));\n\n  var internals = internalsInit(destPath, options);\n\n  function sourceMapWrite(file, encoding, callback) {\n    /*jshint validthis:true */\n\n    if (file.isNull() || !file.sourceMap) {\n      this.push(file);\n      return callback();\n    }\n\n    if (file.isStream()) {\n      return callback(new Error(PLUGIN_NAME + '-write: Streaming not supported'));\n    }\n\n    // fix paths if Windows style paths\n    file.sourceMap.file = unixStylePath(file.relative);\n\n    internals.setSourceRoot(file);\n    internals.loadContent(file);\n    internals.mapSources(file);\n    internals.mapDestPath(file, this);\n\n    this.push(file);\n    callback();\n  }\n\n\n\n  return through.obj(sourceMapWrite);\n}\n\nmodule.exports = write;\n"],"mappings":"AAAA;;AACA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAAnB;AAAA,IACEC,OAAO,GAAGD,OAAO,CAAC,UAAD,CADnB;AAAA,IAEEE,aAAa,GAAGH,KAAK,CAACG,aAFxB;AAAA,IAGEC,WAAW,GAAGJ,KAAK,CAACI,WAHtB;AAAA,IAIEC,aAAa,GAAGJ,OAAO,CAAC,mBAAD,CAJzB;AAMA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,KAAT,CAAeC,QAAf,EAAyBC,OAAzB,EAAkC;EAChC,IAAIC,KAAK,GAAGR,OAAO,CAAC,gBAAD,CAAP,GAA4BG,WAAW,GAAG,QAA1C,CAAZ;;EAEAK,KAAK,CAACT,KAAK,CAACU,KAAN,CAAY,UAAZ,CAAD,CAAL;EACAD,KAAK,CAACT,KAAK,CAACU,KAAN,CAAYH,QAAZ,CAAD,CAAL;EAEAE,KAAK,CAACT,KAAK,CAACU,KAAN,CAAY,kBAAZ,CAAD,CAAL;EACAD,KAAK,CAACT,KAAK,CAACU,KAAN,CAAYF,OAAZ,CAAD,CAAL;;EAEA,IAAIA,OAAO,KAAKG,SAAZ,IAAyB,OAAOJ,QAAP,KAAoB,QAAjD,EAA2D;IACzDC,OAAO,GAAGD,QAAV;IACAA,QAAQ,GAAGI,SAAX;EACD;;EACDH,OAAO,GAAGA,OAAO,IAAI,EAArB,CAbgC,CAehC;;EACA,IAAIA,OAAO,CAACI,cAAR,KAA2BD,SAA/B,EACEH,OAAO,CAACI,cAAR,GAAyB,IAAzB;EACF,IAAIJ,OAAO,CAACK,UAAR,KAAuBF,SAA3B,EACEH,OAAO,CAACK,UAAR,GAAqB,IAArB;EACF,IAAIL,OAAO,CAACM,OAAR,KAAoBH,SAAxB,EACEH,OAAO,CAACM,OAAR,GAAkB,MAAlB;EAEFL,KAAK,CAACT,KAAK,CAACU,KAAN,CAAY,kBAAZ,CAAD,CAAL;EACAD,KAAK,CAACT,KAAK,CAACU,KAAN,CAAYF,OAAZ,CAAD,CAAL;EAEA,IAAIO,SAAS,GAAGV,aAAa,CAACE,QAAD,EAAWC,OAAX,CAA7B;;EAEA,SAASQ,cAAT,CAAwBC,IAAxB,EAA8BC,QAA9B,EAAwCC,QAAxC,EAAkD;IAChD;IAEA,IAAIF,IAAI,CAACG,MAAL,MAAiB,CAACH,IAAI,CAACI,SAA3B,EAAsC;MACpC,KAAKC,IAAL,CAAUL,IAAV;MACA,OAAOE,QAAQ,EAAf;IACD;;IAED,IAAIF,IAAI,CAACM,QAAL,EAAJ,EAAqB;MACnB,OAAOJ,QAAQ,CAAC,IAAIK,KAAJ,CAAUpB,WAAW,GAAG,iCAAxB,CAAD,CAAf;IACD,CAV+C,CAYhD;;;IACAa,IAAI,CAACI,SAAL,CAAeJ,IAAf,GAAsBd,aAAa,CAACc,IAAI,CAACQ,QAAN,CAAnC;IAEAV,SAAS,CAACW,aAAV,CAAwBT,IAAxB;IACAF,SAAS,CAACY,WAAV,CAAsBV,IAAtB;IACAF,SAAS,CAACa,UAAV,CAAqBX,IAArB;IACAF,SAAS,CAACc,WAAV,CAAsBZ,IAAtB,EAA4B,IAA5B;IAEA,KAAKK,IAAL,CAAUL,IAAV;IACAE,QAAQ;EACT;;EAID,OAAOjB,OAAO,CAAC4B,GAAR,CAAYd,cAAZ,CAAP;AACD;;AAEDe,MAAM,CAACC,OAAP,GAAiB1B,KAAjB"},"metadata":{},"sourceType":"script"}