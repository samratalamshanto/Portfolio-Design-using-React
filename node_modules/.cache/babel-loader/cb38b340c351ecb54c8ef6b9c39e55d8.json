{"ast":null,"code":"/*!\n * expand-range <https://github.com/jonschlinkert/expand-range>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT license.\n */\n'use strict';\n\nvar fill = require('fill-range');\n\nmodule.exports = function expandRange(str, options, fn) {\n  if (typeof str !== 'string') {\n    throw new TypeError('expand-range expects a string.');\n  }\n\n  if (typeof options === 'function') {\n    fn = options;\n    options = {};\n  }\n\n  if (typeof options === 'boolean') {\n    options = {};\n    options.makeRe = true;\n  } // create arguments to pass to fill-range\n\n\n  var opts = options || {};\n  var args = str.split('..');\n  var len = args.length;\n\n  if (len > 3) {\n    return str;\n  } // if only one argument, it can't expand so return it\n\n\n  if (len === 1) {\n    return args;\n  } // if `true`, tell fill-range to regexify the string\n\n\n  if (typeof fn === 'boolean' && fn === true) {\n    opts.makeRe = true;\n  }\n\n  args.push(opts);\n  return fill.apply(null, args.concat(fn));\n};","map":{"version":3,"names":["fill","require","module","exports","expandRange","str","options","fn","TypeError","makeRe","opts","args","split","len","length","push","apply","concat"],"sources":["G:/anaconda/project/download files/last down/New folder/desktop/Samrat/protfolio/protfolio/node_modules/expand-range/index.js"],"sourcesContent":["/*!\n * expand-range <https://github.com/jonschlinkert/expand-range>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar fill = require('fill-range');\n\nmodule.exports = function expandRange(str, options, fn) {\n  if (typeof str !== 'string') {\n    throw new TypeError('expand-range expects a string.');\n  }\n\n  if (typeof options === 'function') {\n    fn = options;\n    options = {};\n  }\n\n  if (typeof options === 'boolean') {\n    options = {};\n    options.makeRe = true;\n  }\n\n  // create arguments to pass to fill-range\n  var opts = options || {};\n  var args = str.split('..');\n  var len = args.length;\n  if (len > 3) { return str; }\n\n  // if only one argument, it can't expand so return it\n  if (len === 1) { return args; }\n\n  // if `true`, tell fill-range to regexify the string\n  if (typeof fn === 'boolean' && fn === true) {\n    opts.makeRe = true;\n  }\n\n  args.push(opts);\n  return fill.apply(null, args.concat(fn));\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,YAAD,CAAlB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,WAAT,CAAqBC,GAArB,EAA0BC,OAA1B,EAAmCC,EAAnC,EAAuC;EACtD,IAAI,OAAOF,GAAP,KAAe,QAAnB,EAA6B;IAC3B,MAAM,IAAIG,SAAJ,CAAc,gCAAd,CAAN;EACD;;EAED,IAAI,OAAOF,OAAP,KAAmB,UAAvB,EAAmC;IACjCC,EAAE,GAAGD,OAAL;IACAA,OAAO,GAAG,EAAV;EACD;;EAED,IAAI,OAAOA,OAAP,KAAmB,SAAvB,EAAkC;IAChCA,OAAO,GAAG,EAAV;IACAA,OAAO,CAACG,MAAR,GAAiB,IAAjB;EACD,CAbqD,CAetD;;;EACA,IAAIC,IAAI,GAAGJ,OAAO,IAAI,EAAtB;EACA,IAAIK,IAAI,GAAGN,GAAG,CAACO,KAAJ,CAAU,IAAV,CAAX;EACA,IAAIC,GAAG,GAAGF,IAAI,CAACG,MAAf;;EACA,IAAID,GAAG,GAAG,CAAV,EAAa;IAAE,OAAOR,GAAP;EAAa,CAnB0B,CAqBtD;;;EACA,IAAIQ,GAAG,KAAK,CAAZ,EAAe;IAAE,OAAOF,IAAP;EAAc,CAtBuB,CAwBtD;;;EACA,IAAI,OAAOJ,EAAP,KAAc,SAAd,IAA2BA,EAAE,KAAK,IAAtC,EAA4C;IAC1CG,IAAI,CAACD,MAAL,GAAc,IAAd;EACD;;EAEDE,IAAI,CAACI,IAAL,CAAUL,IAAV;EACA,OAAOV,IAAI,CAACgB,KAAL,CAAW,IAAX,EAAiBL,IAAI,CAACM,MAAL,CAAYV,EAAZ,CAAjB,CAAP;AACD,CA/BD"},"metadata":{},"sourceType":"script"}