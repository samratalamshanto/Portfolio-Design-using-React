{"ast":null,"code":"// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n'use strict';\n\nmodule.exports = Transform;\n\nvar Duplex = require('./_stream_duplex');\n/*<replacement>*/\n\n\nvar util = require('core-util-is');\n\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\nfunction TransformState(stream) {\n  this.afterTransform = function (er, data) {\n    return afterTransform(stream, er, data);\n  };\n\n  this.needTransform = false;\n  this.transforming = false;\n  this.writecb = null;\n  this.writechunk = null;\n  this.writeencoding = null;\n}\n\nfunction afterTransform(stream, er, data) {\n  var ts = stream._transformState;\n  ts.transforming = false;\n  var cb = ts.writecb;\n  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));\n  ts.writechunk = null;\n  ts.writecb = null;\n  if (data !== null && data !== undefined) stream.push(data);\n  cb(er);\n  var rs = stream._readableState;\n  rs.reading = false;\n\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    stream._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n  Duplex.call(this, options);\n  this._transformState = new TransformState(this); // when the writable side finishes, then flush out anything remaining.\n\n  var stream = this; // start out asking for a readable event once data is transformed.\n\n  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  }\n\n  this.once('prefinish', function () {\n    if (typeof this._flush === 'function') this._flush(function (er) {\n      done(stream, er);\n    });else done(stream);\n  });\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n}; // This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\n\n\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  throw new Error('not implemented');\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n}; // Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\n\n\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nfunction done(stream, er) {\n  if (er) return stream.emit('error', er); // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n\n  var ws = stream._writableState;\n  var ts = stream._transformState;\n  if (ws.length) throw new Error('calling transform done when ws.length != 0');\n  if (ts.transforming) throw new Error('calling transform done when still transforming');\n  return stream.push(null);\n}","map":{"version":3,"names":["module","exports","Transform","Duplex","require","util","inherits","TransformState","stream","afterTransform","er","data","needTransform","transforming","writecb","writechunk","writeencoding","ts","_transformState","cb","emit","Error","undefined","push","rs","_readableState","reading","needReadable","length","highWaterMark","_read","options","call","sync","transform","_transform","flush","_flush","once","done","prototype","chunk","encoding","_write","n","ws","_writableState"],"sources":["G:/anaconda/project/download files/last down/New folder/desktop/Samrat/protfolio/protfolio/node_modules/concat-stream/node_modules/readable-stream/lib/_stream_transform.js"],"sourcesContent":["// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n'use strict';\n\nmodule.exports = Transform;\n\nvar Duplex = require('./_stream_duplex');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\nfunction TransformState(stream) {\n  this.afterTransform = function (er, data) {\n    return afterTransform(stream, er, data);\n  };\n\n  this.needTransform = false;\n  this.transforming = false;\n  this.writecb = null;\n  this.writechunk = null;\n  this.writeencoding = null;\n}\n\nfunction afterTransform(stream, er, data) {\n  var ts = stream._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (data !== null && data !== undefined) stream.push(data);\n\n  cb(er);\n\n  var rs = stream._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    stream._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = new TransformState(this);\n\n  // when the writable side finishes, then flush out anything remaining.\n  var stream = this;\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  }\n\n  this.once('prefinish', function () {\n    if (typeof this._flush === 'function') this._flush(function (er) {\n      done(stream, er);\n    });else done(stream);\n  });\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  throw new Error('not implemented');\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nfunction done(stream, er) {\n  if (er) return stream.emit('error', er);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  var ws = stream._writableState;\n  var ts = stream._transformState;\n\n  if (ws.length) throw new Error('calling transform done when ws.length != 0');\n\n  if (ts.transforming) throw new Error('calling transform done when still transforming');\n\n  return stream.push(null);\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}