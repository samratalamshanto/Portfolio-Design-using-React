{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar Compressed = require('./compress');\n\nvar Identity = require('./identity');\n/**\n * Stringfy the given AST `node`.\n *\n * Options:\n *\n *  - `compress` space-optimized output\n *  - `sourcemap` return an object with `.code` and `.map`\n *\n * @param {Object} node\n * @param {Object} [options]\n * @return {String}\n * @api public\n */\n\n\nmodule.exports = function (node, options) {\n  options = options || {};\n  var compiler = options.compress ? new Compressed(options) : new Identity(options); // source maps\n\n  if (options.sourcemap) {\n    var sourcemaps = require('./source-map-support');\n\n    sourcemaps(compiler);\n    var code = compiler.compile(node);\n    compiler.applySourceMaps();\n    var map = options.sourcemap === 'generator' ? compiler.map : compiler.map.toJSON();\n    return {\n      code: code,\n      map: map\n    };\n  }\n\n  var code = compiler.compile(node);\n  return code;\n};","map":{"version":3,"names":["Compressed","require","Identity","module","exports","node","options","compiler","compress","sourcemap","sourcemaps","code","compile","applySourceMaps","map","toJSON"],"sources":["G:/anaconda/project/download files/last down/New folder/desktop/Samrat/protfolio/protfolio/node_modules/gulp-sourcemaps/node_modules/css/lib/stringify/index.js"],"sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar Compressed = require('./compress');\nvar Identity = require('./identity');\n\n/**\n * Stringfy the given AST `node`.\n *\n * Options:\n *\n *  - `compress` space-optimized output\n *  - `sourcemap` return an object with `.code` and `.map`\n *\n * @param {Object} node\n * @param {Object} [options]\n * @return {String}\n * @api public\n */\n\nmodule.exports = function(node, options){\n  options = options || {};\n\n  var compiler = options.compress\n    ? new Compressed(options)\n    : new Identity(options);\n\n  // source maps\n  if (options.sourcemap) {\n    var sourcemaps = require('./source-map-support');\n    sourcemaps(compiler);\n\n    var code = compiler.compile(node);\n    compiler.applySourceMaps();\n\n    var map = options.sourcemap === 'generator'\n      ? compiler.map\n      : compiler.map.toJSON();\n\n    return { code: code, map: map };\n  }\n\n  var code = compiler.compile(node);\n  return code;\n};\n"],"mappings":"AACA;AACA;AACA;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,YAAD,CAAxB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,YAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAE,MAAM,CAACC,OAAP,GAAiB,UAASC,IAAT,EAAeC,OAAf,EAAuB;EACtCA,OAAO,GAAGA,OAAO,IAAI,EAArB;EAEA,IAAIC,QAAQ,GAAGD,OAAO,CAACE,QAAR,GACX,IAAIR,UAAJ,CAAeM,OAAf,CADW,GAEX,IAAIJ,QAAJ,CAAaI,OAAb,CAFJ,CAHsC,CAOtC;;EACA,IAAIA,OAAO,CAACG,SAAZ,EAAuB;IACrB,IAAIC,UAAU,GAAGT,OAAO,CAAC,sBAAD,CAAxB;;IACAS,UAAU,CAACH,QAAD,CAAV;IAEA,IAAII,IAAI,GAAGJ,QAAQ,CAACK,OAAT,CAAiBP,IAAjB,CAAX;IACAE,QAAQ,CAACM,eAAT;IAEA,IAAIC,GAAG,GAAGR,OAAO,CAACG,SAAR,KAAsB,WAAtB,GACNF,QAAQ,CAACO,GADH,GAENP,QAAQ,CAACO,GAAT,CAAaC,MAAb,EAFJ;IAIA,OAAO;MAAEJ,IAAI,EAAEA,IAAR;MAAcG,GAAG,EAAEA;IAAnB,CAAP;EACD;;EAED,IAAIH,IAAI,GAAGJ,QAAQ,CAACK,OAAT,CAAiBP,IAAjB,CAAX;EACA,OAAOM,IAAP;AACD,CAxBD"},"metadata":{},"sourceType":"script"}