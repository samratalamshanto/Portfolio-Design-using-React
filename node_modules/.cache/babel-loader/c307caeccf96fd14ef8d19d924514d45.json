{"ast":null,"code":"/*!\n * braces <https://github.com/jonschlinkert/braces>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT license.\n */\n'use strict';\n/**\n * Module dependencies\n */\n\nvar expand = require('expand-range');\n\nvar repeat = require('repeat-element');\n\nvar tokens = require('preserve');\n/**\n * Expose `braces`\n */\n\n\nmodule.exports = function (str, options) {\n  if (typeof str !== 'string') {\n    throw new Error('braces expects a string');\n  }\n\n  return braces(str, options);\n};\n/**\n * Expand `{foo,bar}` or `{1..5}` braces in the\n * given `string`.\n *\n * @param  {String} `str`\n * @param  {Array} `arr`\n * @param  {Object} `options`\n * @return {Array}\n */\n\n\nfunction braces(str, arr, options) {\n  if (str === '') {\n    return [];\n  }\n\n  if (!Array.isArray(arr)) {\n    options = arr;\n    arr = [];\n  }\n\n  var opts = options || {};\n  arr = arr || [];\n\n  if (typeof opts.nodupes === 'undefined') {\n    opts.nodupes = true;\n  }\n\n  var fn = opts.fn;\n  var es6;\n\n  if (typeof opts === 'function') {\n    fn = opts;\n    opts = {};\n  }\n\n  if (!(patternRe instanceof RegExp)) {\n    patternRe = patternRegex();\n  }\n\n  var matches = str.match(patternRe) || [];\n  var m = matches[0];\n\n  switch (m) {\n    case '\\\\,':\n      return escapeCommas(str, arr, opts);\n\n    case '\\\\.':\n      return escapeDots(str, arr, opts);\n\n    case '\\/.':\n      return escapePaths(str, arr, opts);\n\n    case ' ':\n      return splitWhitespace(str);\n\n    case '{,}':\n      return exponential(str, opts, braces);\n\n    case '{}':\n      return emptyBraces(str, arr, opts);\n\n    case '\\\\{':\n    case '\\\\}':\n      return escapeBraces(str, arr, opts);\n\n    case '${':\n      if (!/\\{[^{]+\\{/.test(str)) {\n        return arr.concat(str);\n      } else {\n        es6 = true;\n        str = tokens.before(str, es6Regex());\n      }\n\n  }\n\n  if (!(braceRe instanceof RegExp)) {\n    braceRe = braceRegex();\n  }\n\n  var match = braceRe.exec(str);\n\n  if (match == null) {\n    return [str];\n  }\n\n  var outter = match[1];\n  var inner = match[2];\n\n  if (inner === '') {\n    return [str];\n  }\n\n  var segs, segsLength;\n\n  if (inner.indexOf('..') !== -1) {\n    segs = expand(inner, opts, fn) || inner.split(',');\n    segsLength = segs.length;\n  } else if (inner[0] === '\"' || inner[0] === '\\'') {\n    return arr.concat(str.split(/['\"]/).join(''));\n  } else {\n    segs = inner.split(',');\n\n    if (opts.makeRe) {\n      return braces(str.replace(outter, wrap(segs, '|')), opts);\n    }\n\n    segsLength = segs.length;\n\n    if (segsLength === 1 && opts.bash) {\n      segs[0] = wrap(segs[0], '\\\\');\n    }\n  }\n\n  var len = segs.length;\n  var i = 0,\n      val;\n\n  while (len--) {\n    var path = segs[i++];\n\n    if (/(\\.[^.\\/])/.test(path)) {\n      if (segsLength > 1) {\n        return segs;\n      } else {\n        return [str];\n      }\n    }\n\n    val = splice(str, outter, path);\n\n    if (/\\{[^{}]+?\\}/.test(val)) {\n      arr = braces(val, arr, opts);\n    } else if (val !== '') {\n      if (opts.nodupes && arr.indexOf(val) !== -1) {\n        continue;\n      }\n\n      arr.push(es6 ? tokens.after(val) : val);\n    }\n  }\n\n  if (opts.strict) {\n    return filter(arr, filterEmpty);\n  }\n\n  return arr;\n}\n/**\n * Expand exponential ranges\n *\n *   `a{,}{,}` => ['a', 'a', 'a', 'a']\n */\n\n\nfunction exponential(str, options, fn) {\n  if (typeof options === 'function') {\n    fn = options;\n    options = null;\n  }\n\n  var opts = options || {};\n  var esc = '__ESC_EXP__';\n  var exp = 0;\n  var res;\n  var parts = str.split('{,}');\n\n  if (opts.nodupes) {\n    return fn(parts.join(''), opts);\n  }\n\n  exp = parts.length - 1;\n  res = fn(parts.join(esc), opts);\n  var len = res.length;\n  var arr = [];\n  var i = 0;\n\n  while (len--) {\n    var ele = res[i++];\n    var idx = ele.indexOf(esc);\n\n    if (idx === -1) {\n      arr.push(ele);\n    } else {\n      ele = ele.split('__ESC_EXP__').join('');\n\n      if (!!ele && opts.nodupes !== false) {\n        arr.push(ele);\n      } else {\n        var num = Math.pow(2, exp);\n        arr.push.apply(arr, repeat(ele, num));\n      }\n    }\n  }\n\n  return arr;\n}\n/**\n * Wrap a value with parens, brackets or braces,\n * based on the given character/separator.\n *\n * @param  {String|Array} `val`\n * @param  {String} `ch`\n * @return {String}\n */\n\n\nfunction wrap(val, ch) {\n  if (ch === '|') {\n    return '(' + val.join(ch) + ')';\n  }\n\n  if (ch === ',') {\n    return '{' + val.join(ch) + '}';\n  }\n\n  if (ch === '-') {\n    return '[' + val.join(ch) + ']';\n  }\n\n  if (ch === '\\\\') {\n    return '\\\\{' + val + '\\\\}';\n  }\n}\n/**\n * Handle empty braces: `{}`\n */\n\n\nfunction emptyBraces(str, arr, opts) {\n  return braces(str.split('{}').join('\\\\{\\\\}'), arr, opts);\n}\n/**\n * Filter out empty-ish values\n */\n\n\nfunction filterEmpty(ele) {\n  return !!ele && ele !== '\\\\';\n}\n/**\n * Handle patterns with whitespace\n */\n\n\nfunction splitWhitespace(str) {\n  var segs = str.split(' ');\n  var len = segs.length;\n  var res = [];\n  var i = 0;\n\n  while (len--) {\n    res.push.apply(res, braces(segs[i++]));\n  }\n\n  return res;\n}\n/**\n * Handle escaped braces: `\\\\{foo,bar}`\n */\n\n\nfunction escapeBraces(str, arr, opts) {\n  if (!/\\{[^{]+\\{/.test(str)) {\n    return arr.concat(str.split('\\\\').join(''));\n  } else {\n    str = str.split('\\\\{').join('__LT_BRACE__');\n    str = str.split('\\\\}').join('__RT_BRACE__');\n    return map(braces(str, arr, opts), function (ele) {\n      ele = ele.split('__LT_BRACE__').join('{');\n      return ele.split('__RT_BRACE__').join('}');\n    });\n  }\n}\n/**\n * Handle escaped dots: `{1\\\\.2}`\n */\n\n\nfunction escapeDots(str, arr, opts) {\n  if (!/[^\\\\]\\..+\\\\\\./.test(str)) {\n    return arr.concat(str.split('\\\\').join(''));\n  } else {\n    str = str.split('\\\\.').join('__ESC_DOT__');\n    return map(braces(str, arr, opts), function (ele) {\n      return ele.split('__ESC_DOT__').join('.');\n    });\n  }\n}\n/**\n * Handle escaped dots: `{1\\\\.2}`\n */\n\n\nfunction escapePaths(str, arr, opts) {\n  str = str.split('\\/.').join('__ESC_PATH__');\n  return map(braces(str, arr, opts), function (ele) {\n    return ele.split('__ESC_PATH__').join('\\/.');\n  });\n}\n/**\n * Handle escaped commas: `{a\\\\,b}`\n */\n\n\nfunction escapeCommas(str, arr, opts) {\n  if (!/\\w,/.test(str)) {\n    return arr.concat(str.split('\\\\').join(''));\n  } else {\n    str = str.split('\\\\,').join('__ESC_COMMA__');\n    return map(braces(str, arr, opts), function (ele) {\n      return ele.split('__ESC_COMMA__').join(',');\n    });\n  }\n}\n/**\n * Regex for common patterns\n */\n\n\nfunction patternRegex() {\n  return /\\${|( (?=[{,}])|(?=[{,}]) )|{}|{,}|\\\\,(?=.*[{}])|\\/\\.(?=.*[{}])|\\\\\\.(?={)|\\\\{|\\\\}/;\n}\n/**\n * Braces regex.\n */\n\n\nfunction braceRegex() {\n  return /.*(\\\\?\\{([^}]+)\\})/;\n}\n/**\n * es6 delimiter regex.\n */\n\n\nfunction es6Regex() {\n  return /\\$\\{([^}]+)\\}/;\n}\n\nvar braceRe;\nvar patternRe;\n/**\n * Faster alternative to `String.replace()` when the\n * index of the token to be replaces can't be supplied\n */\n\nfunction splice(str, token, replacement) {\n  var i = str.indexOf(token);\n  return str.substr(0, i) + replacement + str.substr(i + token.length);\n}\n/**\n * Fast array map\n */\n\n\nfunction map(arr, fn) {\n  if (arr == null) {\n    return [];\n  }\n\n  var len = arr.length;\n  var res = new Array(len);\n  var i = -1;\n\n  while (++i < len) {\n    res[i] = fn(arr[i], i, arr);\n  }\n\n  return res;\n}\n/**\n * Fast array filter\n */\n\n\nfunction filter(arr, cb) {\n  if (arr == null) return [];\n\n  if (typeof cb !== 'function') {\n    throw new TypeError('braces: filter expects a callback function.');\n  }\n\n  var len = arr.length;\n  var res = arr.slice();\n  var i = 0;\n\n  while (len--) {\n    if (!cb(arr[len], i++)) {\n      res.splice(len, 1);\n    }\n  }\n\n  return res;\n}","map":{"version":3,"names":["expand","require","repeat","tokens","module","exports","str","options","Error","braces","arr","Array","isArray","opts","nodupes","fn","es6","patternRe","RegExp","patternRegex","matches","match","m","escapeCommas","escapeDots","escapePaths","splitWhitespace","exponential","emptyBraces","escapeBraces","test","concat","before","es6Regex","braceRe","braceRegex","exec","outter","inner","segs","segsLength","indexOf","split","length","join","makeRe","replace","wrap","bash","len","i","val","path","splice","push","after","strict","filter","filterEmpty","esc","exp","res","parts","ele","idx","num","Math","pow","apply","ch","map","token","replacement","substr","cb","TypeError","slice"],"sources":["G:/anaconda/project/download files/last down/New folder/desktop/Samrat/protfolio/protfolio/node_modules/glob-stream/node_modules/braces/index.js"],"sourcesContent":["/*!\n * braces <https://github.com/jonschlinkert/braces>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT license.\n */\n\n'use strict';\n\n/**\n * Module dependencies\n */\n\nvar expand = require('expand-range');\nvar repeat = require('repeat-element');\nvar tokens = require('preserve');\n\n/**\n * Expose `braces`\n */\n\nmodule.exports = function(str, options) {\n  if (typeof str !== 'string') {\n    throw new Error('braces expects a string');\n  }\n  return braces(str, options);\n};\n\n/**\n * Expand `{foo,bar}` or `{1..5}` braces in the\n * given `string`.\n *\n * @param  {String} `str`\n * @param  {Array} `arr`\n * @param  {Object} `options`\n * @return {Array}\n */\n\nfunction braces(str, arr, options) {\n  if (str === '') {\n    return [];\n  }\n\n  if (!Array.isArray(arr)) {\n    options = arr;\n    arr = [];\n  }\n\n  var opts = options || {};\n  arr = arr || [];\n\n  if (typeof opts.nodupes === 'undefined') {\n    opts.nodupes = true;\n  }\n\n  var fn = opts.fn;\n  var es6;\n\n  if (typeof opts === 'function') {\n    fn = opts;\n    opts = {};\n  }\n\n  if (!(patternRe instanceof RegExp)) {\n    patternRe = patternRegex();\n  }\n\n  var matches = str.match(patternRe) || [];\n  var m = matches[0];\n\n  switch(m) {\n    case '\\\\,':\n      return escapeCommas(str, arr, opts);\n    case '\\\\.':\n      return escapeDots(str, arr, opts);\n    case '\\/.':\n      return escapePaths(str, arr, opts);\n    case ' ':\n      return splitWhitespace(str);\n    case '{,}':\n      return exponential(str, opts, braces);\n    case '{}':\n      return emptyBraces(str, arr, opts);\n    case '\\\\{':\n    case '\\\\}':\n      return escapeBraces(str, arr, opts);\n    case '${':\n      if (!/\\{[^{]+\\{/.test(str)) {\n        return arr.concat(str);\n      } else {\n        es6 = true;\n        str = tokens.before(str, es6Regex());\n      }\n  }\n\n  if (!(braceRe instanceof RegExp)) {\n    braceRe = braceRegex();\n  }\n\n  var match = braceRe.exec(str);\n  if (match == null) {\n    return [str];\n  }\n\n  var outter = match[1];\n  var inner = match[2];\n  if (inner === '') { return [str]; }\n\n  var segs, segsLength;\n\n  if (inner.indexOf('..') !== -1) {\n    segs = expand(inner, opts, fn) || inner.split(',');\n    segsLength = segs.length;\n\n  } else if (inner[0] === '\"' || inner[0] === '\\'') {\n    return arr.concat(str.split(/['\"]/).join(''));\n\n  } else {\n    segs = inner.split(',');\n    if (opts.makeRe) {\n      return braces(str.replace(outter, wrap(segs, '|')), opts);\n    }\n\n    segsLength = segs.length;\n    if (segsLength === 1 && opts.bash) {\n      segs[0] = wrap(segs[0], '\\\\');\n    }\n  }\n\n  var len = segs.length;\n  var i = 0, val;\n\n  while (len--) {\n    var path = segs[i++];\n\n    if (/(\\.[^.\\/])/.test(path)) {\n      if (segsLength > 1) {\n        return segs;\n      } else {\n        return [str];\n      }\n    }\n\n    val = splice(str, outter, path);\n\n    if (/\\{[^{}]+?\\}/.test(val)) {\n      arr = braces(val, arr, opts);\n    } else if (val !== '') {\n      if (opts.nodupes && arr.indexOf(val) !== -1) { continue; }\n      arr.push(es6 ? tokens.after(val) : val);\n    }\n  }\n\n  if (opts.strict) { return filter(arr, filterEmpty); }\n  return arr;\n}\n\n/**\n * Expand exponential ranges\n *\n *   `a{,}{,}` => ['a', 'a', 'a', 'a']\n */\n\nfunction exponential(str, options, fn) {\n  if (typeof options === 'function') {\n    fn = options;\n    options = null;\n  }\n\n  var opts = options || {};\n  var esc = '__ESC_EXP__';\n  var exp = 0;\n  var res;\n\n  var parts = str.split('{,}');\n  if (opts.nodupes) {\n    return fn(parts.join(''), opts);\n  }\n\n  exp = parts.length - 1;\n  res = fn(parts.join(esc), opts);\n  var len = res.length;\n  var arr = [];\n  var i = 0;\n\n  while (len--) {\n    var ele = res[i++];\n    var idx = ele.indexOf(esc);\n\n    if (idx === -1) {\n      arr.push(ele);\n\n    } else {\n      ele = ele.split('__ESC_EXP__').join('');\n      if (!!ele && opts.nodupes !== false) {\n        arr.push(ele);\n\n      } else {\n        var num = Math.pow(2, exp);\n        arr.push.apply(arr, repeat(ele, num));\n      }\n    }\n  }\n  return arr;\n}\n\n/**\n * Wrap a value with parens, brackets or braces,\n * based on the given character/separator.\n *\n * @param  {String|Array} `val`\n * @param  {String} `ch`\n * @return {String}\n */\n\nfunction wrap(val, ch) {\n  if (ch === '|') {\n    return '(' + val.join(ch) + ')';\n  }\n  if (ch === ',') {\n    return '{' + val.join(ch) + '}';\n  }\n  if (ch === '-') {\n    return '[' + val.join(ch) + ']';\n  }\n  if (ch === '\\\\') {\n    return '\\\\{' + val + '\\\\}';\n  }\n}\n\n/**\n * Handle empty braces: `{}`\n */\n\nfunction emptyBraces(str, arr, opts) {\n  return braces(str.split('{}').join('\\\\{\\\\}'), arr, opts);\n}\n\n/**\n * Filter out empty-ish values\n */\n\nfunction filterEmpty(ele) {\n  return !!ele && ele !== '\\\\';\n}\n\n/**\n * Handle patterns with whitespace\n */\n\nfunction splitWhitespace(str) {\n  var segs = str.split(' ');\n  var len = segs.length;\n  var res = [];\n  var i = 0;\n\n  while (len--) {\n    res.push.apply(res, braces(segs[i++]));\n  }\n  return res;\n}\n\n/**\n * Handle escaped braces: `\\\\{foo,bar}`\n */\n\nfunction escapeBraces(str, arr, opts) {\n  if (!/\\{[^{]+\\{/.test(str)) {\n    return arr.concat(str.split('\\\\').join(''));\n  } else {\n    str = str.split('\\\\{').join('__LT_BRACE__');\n    str = str.split('\\\\}').join('__RT_BRACE__');\n    return map(braces(str, arr, opts), function(ele) {\n      ele = ele.split('__LT_BRACE__').join('{');\n      return ele.split('__RT_BRACE__').join('}');\n    });\n  }\n}\n\n/**\n * Handle escaped dots: `{1\\\\.2}`\n */\n\nfunction escapeDots(str, arr, opts) {\n  if (!/[^\\\\]\\..+\\\\\\./.test(str)) {\n    return arr.concat(str.split('\\\\').join(''));\n  } else {\n    str = str.split('\\\\.').join('__ESC_DOT__');\n    return map(braces(str, arr, opts), function(ele) {\n      return ele.split('__ESC_DOT__').join('.');\n    });\n  }\n}\n\n/**\n * Handle escaped dots: `{1\\\\.2}`\n */\n\nfunction escapePaths(str, arr, opts) {\n  str = str.split('\\/.').join('__ESC_PATH__');\n  return map(braces(str, arr, opts), function(ele) {\n    return ele.split('__ESC_PATH__').join('\\/.');\n  });\n}\n\n/**\n * Handle escaped commas: `{a\\\\,b}`\n */\n\nfunction escapeCommas(str, arr, opts) {\n  if (!/\\w,/.test(str)) {\n    return arr.concat(str.split('\\\\').join(''));\n  } else {\n    str = str.split('\\\\,').join('__ESC_COMMA__');\n    return map(braces(str, arr, opts), function(ele) {\n      return ele.split('__ESC_COMMA__').join(',');\n    });\n  }\n}\n\n/**\n * Regex for common patterns\n */\n\nfunction patternRegex() {\n  return /\\${|( (?=[{,}])|(?=[{,}]) )|{}|{,}|\\\\,(?=.*[{}])|\\/\\.(?=.*[{}])|\\\\\\.(?={)|\\\\{|\\\\}/;\n}\n\n/**\n * Braces regex.\n */\n\nfunction braceRegex() {\n  return /.*(\\\\?\\{([^}]+)\\})/;\n}\n\n/**\n * es6 delimiter regex.\n */\n\nfunction es6Regex() {\n  return /\\$\\{([^}]+)\\}/;\n}\n\nvar braceRe;\nvar patternRe;\n\n/**\n * Faster alternative to `String.replace()` when the\n * index of the token to be replaces can't be supplied\n */\n\nfunction splice(str, token, replacement) {\n  var i = str.indexOf(token);\n  return str.substr(0, i) + replacement\n    + str.substr(i + token.length);\n}\n\n/**\n * Fast array map\n */\n\nfunction map(arr, fn) {\n  if (arr == null) {\n    return [];\n  }\n\n  var len = arr.length;\n  var res = new Array(len);\n  var i = -1;\n\n  while (++i < len) {\n    res[i] = fn(arr[i], i, arr);\n  }\n\n  return res;\n}\n\n/**\n * Fast array filter\n */\n\nfunction filter(arr, cb) {\n  if (arr == null) return [];\n  if (typeof cb !== 'function') {\n    throw new TypeError('braces: filter expects a callback function.');\n  }\n\n  var len = arr.length;\n  var res = arr.slice();\n  var i = 0;\n\n  while (len--) {\n    if (!cb(arr[len], i++)) {\n      res.splice(len, 1);\n    }\n  }\n  return res;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,cAAD,CAApB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,gBAAD,CAApB;;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAC,UAAD,CAApB;AAEA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiB,UAASC,GAAT,EAAcC,OAAd,EAAuB;EACtC,IAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6B;IAC3B,MAAM,IAAIE,KAAJ,CAAU,yBAAV,CAAN;EACD;;EACD,OAAOC,MAAM,CAACH,GAAD,EAAMC,OAAN,CAAb;AACD,CALD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASE,MAAT,CAAgBH,GAAhB,EAAqBI,GAArB,EAA0BH,OAA1B,EAAmC;EACjC,IAAID,GAAG,KAAK,EAAZ,EAAgB;IACd,OAAO,EAAP;EACD;;EAED,IAAI,CAACK,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAL,EAAyB;IACvBH,OAAO,GAAGG,GAAV;IACAA,GAAG,GAAG,EAAN;EACD;;EAED,IAAIG,IAAI,GAAGN,OAAO,IAAI,EAAtB;EACAG,GAAG,GAAGA,GAAG,IAAI,EAAb;;EAEA,IAAI,OAAOG,IAAI,CAACC,OAAZ,KAAwB,WAA5B,EAAyC;IACvCD,IAAI,CAACC,OAAL,GAAe,IAAf;EACD;;EAED,IAAIC,EAAE,GAAGF,IAAI,CAACE,EAAd;EACA,IAAIC,GAAJ;;EAEA,IAAI,OAAOH,IAAP,KAAgB,UAApB,EAAgC;IAC9BE,EAAE,GAAGF,IAAL;IACAA,IAAI,GAAG,EAAP;EACD;;EAED,IAAI,EAAEI,SAAS,YAAYC,MAAvB,CAAJ,EAAoC;IAClCD,SAAS,GAAGE,YAAY,EAAxB;EACD;;EAED,IAAIC,OAAO,GAAGd,GAAG,CAACe,KAAJ,CAAUJ,SAAV,KAAwB,EAAtC;EACA,IAAIK,CAAC,GAAGF,OAAO,CAAC,CAAD,CAAf;;EAEA,QAAOE,CAAP;IACE,KAAK,KAAL;MACE,OAAOC,YAAY,CAACjB,GAAD,EAAMI,GAAN,EAAWG,IAAX,CAAnB;;IACF,KAAK,KAAL;MACE,OAAOW,UAAU,CAAClB,GAAD,EAAMI,GAAN,EAAWG,IAAX,CAAjB;;IACF,KAAK,KAAL;MACE,OAAOY,WAAW,CAACnB,GAAD,EAAMI,GAAN,EAAWG,IAAX,CAAlB;;IACF,KAAK,GAAL;MACE,OAAOa,eAAe,CAACpB,GAAD,CAAtB;;IACF,KAAK,KAAL;MACE,OAAOqB,WAAW,CAACrB,GAAD,EAAMO,IAAN,EAAYJ,MAAZ,CAAlB;;IACF,KAAK,IAAL;MACE,OAAOmB,WAAW,CAACtB,GAAD,EAAMI,GAAN,EAAWG,IAAX,CAAlB;;IACF,KAAK,KAAL;IACA,KAAK,KAAL;MACE,OAAOgB,YAAY,CAACvB,GAAD,EAAMI,GAAN,EAAWG,IAAX,CAAnB;;IACF,KAAK,IAAL;MACE,IAAI,CAAC,YAAYiB,IAAZ,CAAiBxB,GAAjB,CAAL,EAA4B;QAC1B,OAAOI,GAAG,CAACqB,MAAJ,CAAWzB,GAAX,CAAP;MACD,CAFD,MAEO;QACLU,GAAG,GAAG,IAAN;QACAV,GAAG,GAAGH,MAAM,CAAC6B,MAAP,CAAc1B,GAAd,EAAmB2B,QAAQ,EAA3B,CAAN;MACD;;EAtBL;;EAyBA,IAAI,EAAEC,OAAO,YAAYhB,MAArB,CAAJ,EAAkC;IAChCgB,OAAO,GAAGC,UAAU,EAApB;EACD;;EAED,IAAId,KAAK,GAAGa,OAAO,CAACE,IAAR,CAAa9B,GAAb,CAAZ;;EACA,IAAIe,KAAK,IAAI,IAAb,EAAmB;IACjB,OAAO,CAACf,GAAD,CAAP;EACD;;EAED,IAAI+B,MAAM,GAAGhB,KAAK,CAAC,CAAD,CAAlB;EACA,IAAIiB,KAAK,GAAGjB,KAAK,CAAC,CAAD,CAAjB;;EACA,IAAIiB,KAAK,KAAK,EAAd,EAAkB;IAAE,OAAO,CAAChC,GAAD,CAAP;EAAe;;EAEnC,IAAIiC,IAAJ,EAAUC,UAAV;;EAEA,IAAIF,KAAK,CAACG,OAAN,CAAc,IAAd,MAAwB,CAAC,CAA7B,EAAgC;IAC9BF,IAAI,GAAGvC,MAAM,CAACsC,KAAD,EAAQzB,IAAR,EAAcE,EAAd,CAAN,IAA2BuB,KAAK,CAACI,KAAN,CAAY,GAAZ,CAAlC;IACAF,UAAU,GAAGD,IAAI,CAACI,MAAlB;EAED,CAJD,MAIO,IAAIL,KAAK,CAAC,CAAD,CAAL,KAAa,GAAb,IAAoBA,KAAK,CAAC,CAAD,CAAL,KAAa,IAArC,EAA2C;IAChD,OAAO5B,GAAG,CAACqB,MAAJ,CAAWzB,GAAG,CAACoC,KAAJ,CAAU,MAAV,EAAkBE,IAAlB,CAAuB,EAAvB,CAAX,CAAP;EAED,CAHM,MAGA;IACLL,IAAI,GAAGD,KAAK,CAACI,KAAN,CAAY,GAAZ,CAAP;;IACA,IAAI7B,IAAI,CAACgC,MAAT,EAAiB;MACf,OAAOpC,MAAM,CAACH,GAAG,CAACwC,OAAJ,CAAYT,MAAZ,EAAoBU,IAAI,CAACR,IAAD,EAAO,GAAP,CAAxB,CAAD,EAAuC1B,IAAvC,CAAb;IACD;;IAED2B,UAAU,GAAGD,IAAI,CAACI,MAAlB;;IACA,IAAIH,UAAU,KAAK,CAAf,IAAoB3B,IAAI,CAACmC,IAA7B,EAAmC;MACjCT,IAAI,CAAC,CAAD,CAAJ,GAAUQ,IAAI,CAACR,IAAI,CAAC,CAAD,CAAL,EAAU,IAAV,CAAd;IACD;EACF;;EAED,IAAIU,GAAG,GAAGV,IAAI,CAACI,MAAf;EACA,IAAIO,CAAC,GAAG,CAAR;EAAA,IAAWC,GAAX;;EAEA,OAAOF,GAAG,EAAV,EAAc;IACZ,IAAIG,IAAI,GAAGb,IAAI,CAACW,CAAC,EAAF,CAAf;;IAEA,IAAI,aAAapB,IAAb,CAAkBsB,IAAlB,CAAJ,EAA6B;MAC3B,IAAIZ,UAAU,GAAG,CAAjB,EAAoB;QAClB,OAAOD,IAAP;MACD,CAFD,MAEO;QACL,OAAO,CAACjC,GAAD,CAAP;MACD;IACF;;IAED6C,GAAG,GAAGE,MAAM,CAAC/C,GAAD,EAAM+B,MAAN,EAAce,IAAd,CAAZ;;IAEA,IAAI,cAActB,IAAd,CAAmBqB,GAAnB,CAAJ,EAA6B;MAC3BzC,GAAG,GAAGD,MAAM,CAAC0C,GAAD,EAAMzC,GAAN,EAAWG,IAAX,CAAZ;IACD,CAFD,MAEO,IAAIsC,GAAG,KAAK,EAAZ,EAAgB;MACrB,IAAItC,IAAI,CAACC,OAAL,IAAgBJ,GAAG,CAAC+B,OAAJ,CAAYU,GAAZ,MAAqB,CAAC,CAA1C,EAA6C;QAAE;MAAW;;MAC1DzC,GAAG,CAAC4C,IAAJ,CAAStC,GAAG,GAAGb,MAAM,CAACoD,KAAP,CAAaJ,GAAb,CAAH,GAAuBA,GAAnC;IACD;EACF;;EAED,IAAItC,IAAI,CAAC2C,MAAT,EAAiB;IAAE,OAAOC,MAAM,CAAC/C,GAAD,EAAMgD,WAAN,CAAb;EAAkC;;EACrD,OAAOhD,GAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AAEA,SAASiB,WAAT,CAAqBrB,GAArB,EAA0BC,OAA1B,EAAmCQ,EAAnC,EAAuC;EACrC,IAAI,OAAOR,OAAP,KAAmB,UAAvB,EAAmC;IACjCQ,EAAE,GAAGR,OAAL;IACAA,OAAO,GAAG,IAAV;EACD;;EAED,IAAIM,IAAI,GAAGN,OAAO,IAAI,EAAtB;EACA,IAAIoD,GAAG,GAAG,aAAV;EACA,IAAIC,GAAG,GAAG,CAAV;EACA,IAAIC,GAAJ;EAEA,IAAIC,KAAK,GAAGxD,GAAG,CAACoC,KAAJ,CAAU,KAAV,CAAZ;;EACA,IAAI7B,IAAI,CAACC,OAAT,EAAkB;IAChB,OAAOC,EAAE,CAAC+C,KAAK,CAAClB,IAAN,CAAW,EAAX,CAAD,EAAiB/B,IAAjB,CAAT;EACD;;EAED+C,GAAG,GAAGE,KAAK,CAACnB,MAAN,GAAe,CAArB;EACAkB,GAAG,GAAG9C,EAAE,CAAC+C,KAAK,CAAClB,IAAN,CAAWe,GAAX,CAAD,EAAkB9C,IAAlB,CAAR;EACA,IAAIoC,GAAG,GAAGY,GAAG,CAAClB,MAAd;EACA,IAAIjC,GAAG,GAAG,EAAV;EACA,IAAIwC,CAAC,GAAG,CAAR;;EAEA,OAAOD,GAAG,EAAV,EAAc;IACZ,IAAIc,GAAG,GAAGF,GAAG,CAACX,CAAC,EAAF,CAAb;IACA,IAAIc,GAAG,GAAGD,GAAG,CAACtB,OAAJ,CAAYkB,GAAZ,CAAV;;IAEA,IAAIK,GAAG,KAAK,CAAC,CAAb,EAAgB;MACdtD,GAAG,CAAC4C,IAAJ,CAASS,GAAT;IAED,CAHD,MAGO;MACLA,GAAG,GAAGA,GAAG,CAACrB,KAAJ,CAAU,aAAV,EAAyBE,IAAzB,CAA8B,EAA9B,CAAN;;MACA,IAAI,CAAC,CAACmB,GAAF,IAASlD,IAAI,CAACC,OAAL,KAAiB,KAA9B,EAAqC;QACnCJ,GAAG,CAAC4C,IAAJ,CAASS,GAAT;MAED,CAHD,MAGO;QACL,IAAIE,GAAG,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYP,GAAZ,CAAV;QACAlD,GAAG,CAAC4C,IAAJ,CAASc,KAAT,CAAe1D,GAAf,EAAoBR,MAAM,CAAC6D,GAAD,EAAME,GAAN,CAA1B;MACD;IACF;EACF;;EACD,OAAOvD,GAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASqC,IAAT,CAAcI,GAAd,EAAmBkB,EAAnB,EAAuB;EACrB,IAAIA,EAAE,KAAK,GAAX,EAAgB;IACd,OAAO,MAAMlB,GAAG,CAACP,IAAJ,CAASyB,EAAT,CAAN,GAAqB,GAA5B;EACD;;EACD,IAAIA,EAAE,KAAK,GAAX,EAAgB;IACd,OAAO,MAAMlB,GAAG,CAACP,IAAJ,CAASyB,EAAT,CAAN,GAAqB,GAA5B;EACD;;EACD,IAAIA,EAAE,KAAK,GAAX,EAAgB;IACd,OAAO,MAAMlB,GAAG,CAACP,IAAJ,CAASyB,EAAT,CAAN,GAAqB,GAA5B;EACD;;EACD,IAAIA,EAAE,KAAK,IAAX,EAAiB;IACf,OAAO,QAAQlB,GAAR,GAAc,KAArB;EACD;AACF;AAED;AACA;AACA;;;AAEA,SAASvB,WAAT,CAAqBtB,GAArB,EAA0BI,GAA1B,EAA+BG,IAA/B,EAAqC;EACnC,OAAOJ,MAAM,CAACH,GAAG,CAACoC,KAAJ,CAAU,IAAV,EAAgBE,IAAhB,CAAqB,QAArB,CAAD,EAAiClC,GAAjC,EAAsCG,IAAtC,CAAb;AACD;AAED;AACA;AACA;;;AAEA,SAAS6C,WAAT,CAAqBK,GAArB,EAA0B;EACxB,OAAO,CAAC,CAACA,GAAF,IAASA,GAAG,KAAK,IAAxB;AACD;AAED;AACA;AACA;;;AAEA,SAASrC,eAAT,CAAyBpB,GAAzB,EAA8B;EAC5B,IAAIiC,IAAI,GAAGjC,GAAG,CAACoC,KAAJ,CAAU,GAAV,CAAX;EACA,IAAIO,GAAG,GAAGV,IAAI,CAACI,MAAf;EACA,IAAIkB,GAAG,GAAG,EAAV;EACA,IAAIX,CAAC,GAAG,CAAR;;EAEA,OAAOD,GAAG,EAAV,EAAc;IACZY,GAAG,CAACP,IAAJ,CAASc,KAAT,CAAeP,GAAf,EAAoBpD,MAAM,CAAC8B,IAAI,CAACW,CAAC,EAAF,CAAL,CAA1B;EACD;;EACD,OAAOW,GAAP;AACD;AAED;AACA;AACA;;;AAEA,SAAShC,YAAT,CAAsBvB,GAAtB,EAA2BI,GAA3B,EAAgCG,IAAhC,EAAsC;EACpC,IAAI,CAAC,YAAYiB,IAAZ,CAAiBxB,GAAjB,CAAL,EAA4B;IAC1B,OAAOI,GAAG,CAACqB,MAAJ,CAAWzB,GAAG,CAACoC,KAAJ,CAAU,IAAV,EAAgBE,IAAhB,CAAqB,EAArB,CAAX,CAAP;EACD,CAFD,MAEO;IACLtC,GAAG,GAAGA,GAAG,CAACoC,KAAJ,CAAU,KAAV,EAAiBE,IAAjB,CAAsB,cAAtB,CAAN;IACAtC,GAAG,GAAGA,GAAG,CAACoC,KAAJ,CAAU,KAAV,EAAiBE,IAAjB,CAAsB,cAAtB,CAAN;IACA,OAAO0B,GAAG,CAAC7D,MAAM,CAACH,GAAD,EAAMI,GAAN,EAAWG,IAAX,CAAP,EAAyB,UAASkD,GAAT,EAAc;MAC/CA,GAAG,GAAGA,GAAG,CAACrB,KAAJ,CAAU,cAAV,EAA0BE,IAA1B,CAA+B,GAA/B,CAAN;MACA,OAAOmB,GAAG,CAACrB,KAAJ,CAAU,cAAV,EAA0BE,IAA1B,CAA+B,GAA/B,CAAP;IACD,CAHS,CAAV;EAID;AACF;AAED;AACA;AACA;;;AAEA,SAASpB,UAAT,CAAoBlB,GAApB,EAAyBI,GAAzB,EAA8BG,IAA9B,EAAoC;EAClC,IAAI,CAAC,gBAAgBiB,IAAhB,CAAqBxB,GAArB,CAAL,EAAgC;IAC9B,OAAOI,GAAG,CAACqB,MAAJ,CAAWzB,GAAG,CAACoC,KAAJ,CAAU,IAAV,EAAgBE,IAAhB,CAAqB,EAArB,CAAX,CAAP;EACD,CAFD,MAEO;IACLtC,GAAG,GAAGA,GAAG,CAACoC,KAAJ,CAAU,KAAV,EAAiBE,IAAjB,CAAsB,aAAtB,CAAN;IACA,OAAO0B,GAAG,CAAC7D,MAAM,CAACH,GAAD,EAAMI,GAAN,EAAWG,IAAX,CAAP,EAAyB,UAASkD,GAAT,EAAc;MAC/C,OAAOA,GAAG,CAACrB,KAAJ,CAAU,aAAV,EAAyBE,IAAzB,CAA8B,GAA9B,CAAP;IACD,CAFS,CAAV;EAGD;AACF;AAED;AACA;AACA;;;AAEA,SAASnB,WAAT,CAAqBnB,GAArB,EAA0BI,GAA1B,EAA+BG,IAA/B,EAAqC;EACnCP,GAAG,GAAGA,GAAG,CAACoC,KAAJ,CAAU,KAAV,EAAiBE,IAAjB,CAAsB,cAAtB,CAAN;EACA,OAAO0B,GAAG,CAAC7D,MAAM,CAACH,GAAD,EAAMI,GAAN,EAAWG,IAAX,CAAP,EAAyB,UAASkD,GAAT,EAAc;IAC/C,OAAOA,GAAG,CAACrB,KAAJ,CAAU,cAAV,EAA0BE,IAA1B,CAA+B,KAA/B,CAAP;EACD,CAFS,CAAV;AAGD;AAED;AACA;AACA;;;AAEA,SAASrB,YAAT,CAAsBjB,GAAtB,EAA2BI,GAA3B,EAAgCG,IAAhC,EAAsC;EACpC,IAAI,CAAC,MAAMiB,IAAN,CAAWxB,GAAX,CAAL,EAAsB;IACpB,OAAOI,GAAG,CAACqB,MAAJ,CAAWzB,GAAG,CAACoC,KAAJ,CAAU,IAAV,EAAgBE,IAAhB,CAAqB,EAArB,CAAX,CAAP;EACD,CAFD,MAEO;IACLtC,GAAG,GAAGA,GAAG,CAACoC,KAAJ,CAAU,KAAV,EAAiBE,IAAjB,CAAsB,eAAtB,CAAN;IACA,OAAO0B,GAAG,CAAC7D,MAAM,CAACH,GAAD,EAAMI,GAAN,EAAWG,IAAX,CAAP,EAAyB,UAASkD,GAAT,EAAc;MAC/C,OAAOA,GAAG,CAACrB,KAAJ,CAAU,eAAV,EAA2BE,IAA3B,CAAgC,GAAhC,CAAP;IACD,CAFS,CAAV;EAGD;AACF;AAED;AACA;AACA;;;AAEA,SAASzB,YAAT,GAAwB;EACtB,OAAO,mFAAP;AACD;AAED;AACA;AACA;;;AAEA,SAASgB,UAAT,GAAsB;EACpB,OAAO,oBAAP;AACD;AAED;AACA;AACA;;;AAEA,SAASF,QAAT,GAAoB;EAClB,OAAO,eAAP;AACD;;AAED,IAAIC,OAAJ;AACA,IAAIjB,SAAJ;AAEA;AACA;AACA;AACA;;AAEA,SAASoC,MAAT,CAAgB/C,GAAhB,EAAqBiE,KAArB,EAA4BC,WAA5B,EAAyC;EACvC,IAAItB,CAAC,GAAG5C,GAAG,CAACmC,OAAJ,CAAY8B,KAAZ,CAAR;EACA,OAAOjE,GAAG,CAACmE,MAAJ,CAAW,CAAX,EAAcvB,CAAd,IAAmBsB,WAAnB,GACHlE,GAAG,CAACmE,MAAJ,CAAWvB,CAAC,GAAGqB,KAAK,CAAC5B,MAArB,CADJ;AAED;AAED;AACA;AACA;;;AAEA,SAAS2B,GAAT,CAAa5D,GAAb,EAAkBK,EAAlB,EAAsB;EACpB,IAAIL,GAAG,IAAI,IAAX,EAAiB;IACf,OAAO,EAAP;EACD;;EAED,IAAIuC,GAAG,GAAGvC,GAAG,CAACiC,MAAd;EACA,IAAIkB,GAAG,GAAG,IAAIlD,KAAJ,CAAUsC,GAAV,CAAV;EACA,IAAIC,CAAC,GAAG,CAAC,CAAT;;EAEA,OAAO,EAAEA,CAAF,GAAMD,GAAb,EAAkB;IAChBY,GAAG,CAACX,CAAD,CAAH,GAASnC,EAAE,CAACL,GAAG,CAACwC,CAAD,CAAJ,EAASA,CAAT,EAAYxC,GAAZ,CAAX;EACD;;EAED,OAAOmD,GAAP;AACD;AAED;AACA;AACA;;;AAEA,SAASJ,MAAT,CAAgB/C,GAAhB,EAAqBgE,EAArB,EAAyB;EACvB,IAAIhE,GAAG,IAAI,IAAX,EAAiB,OAAO,EAAP;;EACjB,IAAI,OAAOgE,EAAP,KAAc,UAAlB,EAA8B;IAC5B,MAAM,IAAIC,SAAJ,CAAc,6CAAd,CAAN;EACD;;EAED,IAAI1B,GAAG,GAAGvC,GAAG,CAACiC,MAAd;EACA,IAAIkB,GAAG,GAAGnD,GAAG,CAACkE,KAAJ,EAAV;EACA,IAAI1B,CAAC,GAAG,CAAR;;EAEA,OAAOD,GAAG,EAAV,EAAc;IACZ,IAAI,CAACyB,EAAE,CAAChE,GAAG,CAACuC,GAAD,CAAJ,EAAWC,CAAC,EAAZ,CAAP,EAAwB;MACtBW,GAAG,CAACR,MAAJ,CAAWJ,GAAX,EAAgB,CAAhB;IACD;EACF;;EACD,OAAOY,GAAP;AACD"},"metadata":{},"sourceType":"script"}