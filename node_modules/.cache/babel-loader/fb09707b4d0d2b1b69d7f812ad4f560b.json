{"ast":null,"code":"/*!\n * fill-range <https://github.com/jonschlinkert/fill-range>\n *\n * Copyright (c) 2014-2018, Jon Schlinkert.\n * Released under the MIT License.\n */\n'use strict';\n\nvar isObject = require('isobject');\n\nvar isNumber = require('is-number');\n\nvar randomize = require('randomatic');\n\nvar repeatStr = require('repeat-string');\n\nvar repeat = require('repeat-element');\n/**\n * Expose `fillRange`\n */\n\n\nmodule.exports = fillRange;\n/**\n * Return a range of numbers or letters.\n *\n * @param  {String} `a` Start of the range\n * @param  {String} `b` End of the range\n * @param  {String} `step` Increment or decrement to use.\n * @param  {Function} `fn` Custom function to modify each element in the range.\n * @return {Array}\n */\n\nfunction fillRange(a, b, step, options, fn) {\n  if (a == null || b == null) {\n    throw new Error('fill-range expects the first and second args to be strings.');\n  }\n\n  if (typeof step === 'function') {\n    fn = step;\n    options = {};\n    step = null;\n  }\n\n  if (typeof options === 'function') {\n    fn = options;\n    options = {};\n  }\n\n  if (isObject(step)) {\n    options = step;\n    step = '';\n  }\n\n  var expand,\n      regex = false,\n      sep = '';\n  var opts = options || {};\n\n  if (typeof opts.silent === 'undefined') {\n    opts.silent = true;\n  }\n\n  step = step || opts.step; // store a ref to unmodified arg\n\n  var origA = a,\n      origB = b;\n  b = b.toString() === '-0' ? 0 : b;\n\n  if (opts.optimize || opts.makeRe) {\n    step = step ? step += '~' : step;\n    expand = true;\n    regex = true;\n    sep = '~';\n  } // handle special step characters\n\n\n  if (typeof step === 'string') {\n    var match = stepRe().exec(step);\n\n    if (match) {\n      var i = match.index;\n      var m = match[0]; // repeat string\n\n      if (m === '+') {\n        return repeat(a, b); // randomize a, `b` times\n      } else if (m === '?') {\n        return [randomize(a, b)]; // expand right, no regex reduction\n      } else if (m === '>') {\n        step = step.substr(0, i) + step.substr(i + 1);\n        expand = true; // expand to an array, or if valid create a reduced\n        // string for a regex logic `or`\n      } else if (m === '|') {\n        step = step.substr(0, i) + step.substr(i + 1);\n        expand = true;\n        regex = true;\n        sep = m; // expand to an array, or if valid create a reduced\n        // string for a regex range\n      } else if (m === '~') {\n        step = step.substr(0, i) + step.substr(i + 1);\n        expand = true;\n        regex = true;\n        sep = m;\n      }\n    } else if (!isNumber(step)) {\n      if (!opts.silent) {\n        throw new TypeError('fill-range: invalid step.');\n      }\n\n      return null;\n    }\n  }\n\n  if (/[.&*()[\\]^%$#@!]/.test(a) || /[.&*()[\\]^%$#@!]/.test(b)) {\n    if (!opts.silent) {\n      throw new RangeError('fill-range: invalid range arguments.');\n    }\n\n    return null;\n  } // has neither a letter nor number, or has both letters and numbers\n  // this needs to be after the step logic\n\n\n  if (!noAlphaNum(a) || !noAlphaNum(b) || hasBoth(a) || hasBoth(b)) {\n    if (!opts.silent) {\n      throw new RangeError('fill-range: invalid range arguments.');\n    }\n\n    return null;\n  } // validate arguments\n\n\n  var isNumA = isNumber(zeros(a));\n  var isNumB = isNumber(zeros(b));\n\n  if (!isNumA && isNumB || isNumA && !isNumB) {\n    if (!opts.silent) {\n      throw new TypeError('fill-range: first range argument is incompatible with second.');\n    }\n\n    return null;\n  } // by this point both are the same, so we\n  // can use A to check going forward.\n\n\n  var isNum = isNumA;\n  var num = formatStep(step); // is the range alphabetical? or numeric?\n\n  if (isNum) {\n    // if numeric, coerce to an integer\n    a = +a;\n    b = +b;\n  } else {\n    // otherwise, get the charCode to expand alpha ranges\n    a = a.charCodeAt(0);\n    b = b.charCodeAt(0);\n  } // is the pattern descending?\n\n\n  var isDescending = a > b; // don't create a character class if the args are < 0\n\n  if (a < 0 || b < 0) {\n    expand = false;\n    regex = false;\n  } // detect padding\n\n\n  var padding = isPadded(origA, origB);\n  var res,\n      pad,\n      arr = [];\n  var ii = 0; // character classes, ranges and logical `or`\n\n  if (regex) {\n    if (shouldExpand(a, b, num, isNum, padding, opts)) {\n      // make sure the correct separator is used\n      if (sep === '|' || sep === '~') {\n        sep = detectSeparator(a, b, num, isNum, isDescending);\n      }\n\n      return wrap([origA, origB], sep, opts);\n    }\n  }\n\n  while (isDescending ? a >= b : a <= b) {\n    if (padding && isNum) {\n      pad = padding(a);\n    } // custom function\n\n\n    if (typeof fn === 'function') {\n      res = fn(a, isNum, pad, ii++); // letters\n    } else if (!isNum) {\n      if (regex && isInvalidChar(a)) {\n        res = null;\n      } else {\n        res = String.fromCharCode(a);\n      } // numbers\n\n    } else {\n      res = formatPadding(a, pad);\n    } // add result to the array, filtering any nulled values\n\n\n    if (res !== null) arr.push(res); // increment or decrement\n\n    if (isDescending) {\n      a -= num;\n    } else {\n      a += num;\n    }\n  } // now that the array is expanded, we need to handle regex\n  // character classes, ranges or logical `or` that wasn't\n  // already handled before the loop\n\n\n  if ((regex || expand) && !opts.noexpand) {\n    // make sure the correct separator is used\n    if (sep === '|' || sep === '~') {\n      sep = detectSeparator(a, b, num, isNum, isDescending);\n    }\n\n    if (arr.length === 1 || a < 0 || b < 0) {\n      return arr;\n    }\n\n    return wrap(arr, sep, opts);\n  }\n\n  return arr;\n}\n/**\n * Wrap the string with the correct regex\n * syntax.\n */\n\n\nfunction wrap(arr, sep, opts) {\n  if (sep === '~') {\n    sep = '-';\n  }\n\n  var str = arr.join(sep);\n  var pre = opts && opts.regexPrefix; // regex logical `or`\n\n  if (sep === '|') {\n    str = pre ? pre + str : str;\n    str = '(' + str + ')';\n  } // regex character class\n\n\n  if (sep === '-') {\n    str = pre && pre === '^' ? pre + str : str;\n    str = '[' + str + ']';\n  }\n\n  return [str];\n}\n/**\n * Check for invalid characters\n */\n\n\nfunction isCharClass(a, b, step, isNum, isDescending) {\n  if (isDescending) {\n    return false;\n  }\n\n  if (isNum) {\n    return a <= 9 && b <= 9;\n  }\n\n  if (a < b) {\n    return step === 1;\n  }\n\n  return false;\n}\n/**\n * Detect the correct separator to use\n */\n\n\nfunction shouldExpand(a, b, num, isNum, padding, opts) {\n  if (isNum && (a > 9 || b > 9)) {\n    return false;\n  }\n\n  return !padding && num === 1 && a < b;\n}\n/**\n * Detect the correct separator to use\n */\n\n\nfunction detectSeparator(a, b, step, isNum, isDescending) {\n  var isChar = isCharClass(a, b, step, isNum, isDescending);\n\n  if (!isChar) {\n    return '|';\n  }\n\n  return '~';\n}\n/**\n * Correctly format the step based on type\n */\n\n\nfunction formatStep(step) {\n  return Math.abs(step >> 0) || 1;\n}\n/**\n * Format padding, taking leading `-` into account\n */\n\n\nfunction formatPadding(ch, pad) {\n  var res = pad ? pad + ch : ch;\n\n  if (pad && ch.toString().charAt(0) === '-') {\n    res = '-' + pad + ch.toString().substr(1);\n  }\n\n  return res.toString();\n}\n/**\n * Check for invalid characters\n */\n\n\nfunction isInvalidChar(str) {\n  var ch = toStr(str);\n  return ch === '\\\\' || ch === '[' || ch === ']' || ch === '^' || ch === '(' || ch === ')' || ch === '`';\n}\n/**\n * Convert to a string from a charCode\n */\n\n\nfunction toStr(ch) {\n  return String.fromCharCode(ch);\n}\n/**\n * Step regex\n */\n\n\nfunction stepRe() {\n  return /\\?|>|\\||\\+|\\~/g;\n}\n/**\n * Return true if `val` has either a letter\n * or a number\n */\n\n\nfunction noAlphaNum(val) {\n  return /[a-z0-9]/i.test(val);\n}\n/**\n * Return true if `val` has both a letter and\n * a number (invalid)\n */\n\n\nfunction hasBoth(val) {\n  return /[a-z][0-9]|[0-9][a-z]/i.test(val);\n}\n/**\n * Normalize zeros for checks\n */\n\n\nfunction zeros(val) {\n  if (/^-*0+$/.test(val.toString())) {\n    return '0';\n  }\n\n  return val;\n}\n/**\n * Return true if `val` has leading zeros,\n * or a similar valid pattern.\n */\n\n\nfunction hasZeros(val) {\n  return /[^.]\\.|^-*0+[0-9]/.test(val);\n}\n/**\n * If the string is padded, returns a curried function with\n * the a cached padding string, or `false` if no padding.\n *\n * @param  {*} `origA` String or number.\n * @return {String|Boolean}\n */\n\n\nfunction isPadded(origA, origB) {\n  if (hasZeros(origA) || hasZeros(origB)) {\n    var alen = length(origA);\n    var blen = length(origB);\n    var len = alen >= blen ? alen : blen;\n    return function (a) {\n      return repeatStr('0', len - length(a));\n    };\n  }\n\n  return false;\n}\n/**\n * Get the string length of `val`\n */\n\n\nfunction length(val) {\n  return val.toString().length;\n}","map":{"version":3,"names":["isObject","require","isNumber","randomize","repeatStr","repeat","module","exports","fillRange","a","b","step","options","fn","Error","expand","regex","sep","opts","silent","origA","origB","toString","optimize","makeRe","match","stepRe","exec","i","index","m","substr","TypeError","test","RangeError","noAlphaNum","hasBoth","isNumA","zeros","isNumB","isNum","num","formatStep","charCodeAt","isDescending","padding","isPadded","res","pad","arr","ii","shouldExpand","detectSeparator","wrap","isInvalidChar","String","fromCharCode","formatPadding","push","noexpand","length","str","join","pre","regexPrefix","isCharClass","isChar","Math","abs","ch","charAt","toStr","val","hasZeros","alen","blen","len"],"sources":["G:/anaconda/project/download files/last down/New folder/desktop/Samrat/protfolio/protfolio/node_modules/expand-range/node_modules/fill-range/index.js"],"sourcesContent":["/*!\n * fill-range <https://github.com/jonschlinkert/fill-range>\n *\n * Copyright (c) 2014-2018, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nvar isObject = require('isobject');\nvar isNumber = require('is-number');\nvar randomize = require('randomatic');\nvar repeatStr = require('repeat-string');\nvar repeat = require('repeat-element');\n\n/**\n * Expose `fillRange`\n */\n\nmodule.exports = fillRange;\n\n/**\n * Return a range of numbers or letters.\n *\n * @param  {String} `a` Start of the range\n * @param  {String} `b` End of the range\n * @param  {String} `step` Increment or decrement to use.\n * @param  {Function} `fn` Custom function to modify each element in the range.\n * @return {Array}\n */\n\nfunction fillRange(a, b, step, options, fn) {\n  if (a == null || b == null) {\n    throw new Error('fill-range expects the first and second args to be strings.');\n  }\n\n  if (typeof step === 'function') {\n    fn = step; options = {}; step = null;\n  }\n\n  if (typeof options === 'function') {\n    fn = options; options = {};\n  }\n\n  if (isObject(step)) {\n    options = step; step = '';\n  }\n\n  var expand, regex = false, sep = '';\n  var opts = options || {};\n\n  if (typeof opts.silent === 'undefined') {\n    opts.silent = true;\n  }\n\n  step = step || opts.step;\n\n  // store a ref to unmodified arg\n  var origA = a, origB = b;\n\n  b = (b.toString() === '-0') ? 0 : b;\n\n  if (opts.optimize || opts.makeRe) {\n    step = step ? (step += '~') : step;\n    expand = true;\n    regex = true;\n    sep = '~';\n  }\n\n  // handle special step characters\n  if (typeof step === 'string') {\n    var match = stepRe().exec(step);\n\n    if (match) {\n      var i = match.index;\n      var m = match[0];\n\n      // repeat string\n      if (m === '+') {\n        return repeat(a, b);\n\n      // randomize a, `b` times\n      } else if (m === '?') {\n        return [randomize(a, b)];\n\n      // expand right, no regex reduction\n      } else if (m === '>') {\n        step = step.substr(0, i) + step.substr(i + 1);\n        expand = true;\n\n      // expand to an array, or if valid create a reduced\n      // string for a regex logic `or`\n      } else if (m === '|') {\n        step = step.substr(0, i) + step.substr(i + 1);\n        expand = true;\n        regex = true;\n        sep = m;\n\n      // expand to an array, or if valid create a reduced\n      // string for a regex range\n      } else if (m === '~') {\n        step = step.substr(0, i) + step.substr(i + 1);\n        expand = true;\n        regex = true;\n        sep = m;\n      }\n    } else if (!isNumber(step)) {\n      if (!opts.silent) {\n        throw new TypeError('fill-range: invalid step.');\n      }\n      return null;\n    }\n  }\n\n  if (/[.&*()[\\]^%$#@!]/.test(a) || /[.&*()[\\]^%$#@!]/.test(b)) {\n    if (!opts.silent) {\n      throw new RangeError('fill-range: invalid range arguments.');\n    }\n    return null;\n  }\n\n  // has neither a letter nor number, or has both letters and numbers\n  // this needs to be after the step logic\n  if (!noAlphaNum(a) || !noAlphaNum(b) || hasBoth(a) || hasBoth(b)) {\n    if (!opts.silent) {\n      throw new RangeError('fill-range: invalid range arguments.');\n    }\n    return null;\n  }\n\n  // validate arguments\n  var isNumA = isNumber(zeros(a));\n  var isNumB = isNumber(zeros(b));\n\n  if ((!isNumA && isNumB) || (isNumA && !isNumB)) {\n    if (!opts.silent) {\n      throw new TypeError('fill-range: first range argument is incompatible with second.');\n    }\n    return null;\n  }\n\n  // by this point both are the same, so we\n  // can use A to check going forward.\n  var isNum = isNumA;\n  var num = formatStep(step);\n\n  // is the range alphabetical? or numeric?\n  if (isNum) {\n    // if numeric, coerce to an integer\n    a = +a; b = +b;\n  } else {\n    // otherwise, get the charCode to expand alpha ranges\n    a = a.charCodeAt(0);\n    b = b.charCodeAt(0);\n  }\n\n  // is the pattern descending?\n  var isDescending = a > b;\n\n  // don't create a character class if the args are < 0\n  if (a < 0 || b < 0) {\n    expand = false;\n    regex = false;\n  }\n\n  // detect padding\n  var padding = isPadded(origA, origB);\n  var res, pad, arr = [];\n  var ii = 0;\n\n  // character classes, ranges and logical `or`\n  if (regex) {\n    if (shouldExpand(a, b, num, isNum, padding, opts)) {\n      // make sure the correct separator is used\n      if (sep === '|' || sep === '~') {\n        sep = detectSeparator(a, b, num, isNum, isDescending);\n      }\n      return wrap([origA, origB], sep, opts);\n    }\n  }\n\n  while (isDescending ? (a >= b) : (a <= b)) {\n    if (padding && isNum) {\n      pad = padding(a);\n    }\n\n    // custom function\n    if (typeof fn === 'function') {\n      res = fn(a, isNum, pad, ii++);\n\n    // letters\n    } else if (!isNum) {\n      if (regex && isInvalidChar(a)) {\n        res = null;\n      } else {\n        res = String.fromCharCode(a);\n      }\n\n    // numbers\n    } else {\n      res = formatPadding(a, pad);\n    }\n\n    // add result to the array, filtering any nulled values\n    if (res !== null) arr.push(res);\n\n    // increment or decrement\n    if (isDescending) {\n      a -= num;\n    } else {\n      a += num;\n    }\n  }\n\n  // now that the array is expanded, we need to handle regex\n  // character classes, ranges or logical `or` that wasn't\n  // already handled before the loop\n  if ((regex || expand) && !opts.noexpand) {\n    // make sure the correct separator is used\n    if (sep === '|' || sep === '~') {\n      sep = detectSeparator(a, b, num, isNum, isDescending);\n    }\n    if (arr.length === 1 || a < 0 || b < 0) { return arr; }\n    return wrap(arr, sep, opts);\n  }\n\n  return arr;\n}\n\n/**\n * Wrap the string with the correct regex\n * syntax.\n */\n\nfunction wrap(arr, sep, opts) {\n  if (sep === '~') { sep = '-'; }\n  var str = arr.join(sep);\n  var pre = opts && opts.regexPrefix;\n\n  // regex logical `or`\n  if (sep === '|') {\n    str = pre ? pre + str : str;\n    str = '(' + str + ')';\n  }\n\n  // regex character class\n  if (sep === '-') {\n    str = (pre && pre === '^')\n      ? pre + str\n      : str;\n    str = '[' + str + ']';\n  }\n  return [str];\n}\n\n/**\n * Check for invalid characters\n */\n\nfunction isCharClass(a, b, step, isNum, isDescending) {\n  if (isDescending) { return false; }\n  if (isNum) { return a <= 9 && b <= 9; }\n  if (a < b) { return step === 1; }\n  return false;\n}\n\n/**\n * Detect the correct separator to use\n */\n\nfunction shouldExpand(a, b, num, isNum, padding, opts) {\n  if (isNum && (a > 9 || b > 9)) { return false; }\n  return !padding && num === 1 && a < b;\n}\n\n/**\n * Detect the correct separator to use\n */\n\nfunction detectSeparator(a, b, step, isNum, isDescending) {\n  var isChar = isCharClass(a, b, step, isNum, isDescending);\n  if (!isChar) {\n    return '|';\n  }\n  return '~';\n}\n\n/**\n * Correctly format the step based on type\n */\n\nfunction formatStep(step) {\n  return Math.abs(step >> 0) || 1;\n}\n\n/**\n * Format padding, taking leading `-` into account\n */\n\nfunction formatPadding(ch, pad) {\n  var res = pad ? pad + ch : ch;\n  if (pad && ch.toString().charAt(0) === '-') {\n    res = '-' + pad + ch.toString().substr(1);\n  }\n  return res.toString();\n}\n\n/**\n * Check for invalid characters\n */\n\nfunction isInvalidChar(str) {\n  var ch = toStr(str);\n  return ch === '\\\\'\n    || ch === '['\n    || ch === ']'\n    || ch === '^'\n    || ch === '('\n    || ch === ')'\n    || ch === '`';\n}\n\n/**\n * Convert to a string from a charCode\n */\n\nfunction toStr(ch) {\n  return String.fromCharCode(ch);\n}\n\n\n/**\n * Step regex\n */\n\nfunction stepRe() {\n  return /\\?|>|\\||\\+|\\~/g;\n}\n\n/**\n * Return true if `val` has either a letter\n * or a number\n */\n\nfunction noAlphaNum(val) {\n  return /[a-z0-9]/i.test(val);\n}\n\n/**\n * Return true if `val` has both a letter and\n * a number (invalid)\n */\n\nfunction hasBoth(val) {\n  return /[a-z][0-9]|[0-9][a-z]/i.test(val);\n}\n\n/**\n * Normalize zeros for checks\n */\n\nfunction zeros(val) {\n  if (/^-*0+$/.test(val.toString())) {\n    return '0';\n  }\n  return val;\n}\n\n/**\n * Return true if `val` has leading zeros,\n * or a similar valid pattern.\n */\n\nfunction hasZeros(val) {\n  return /[^.]\\.|^-*0+[0-9]/.test(val);\n}\n\n/**\n * If the string is padded, returns a curried function with\n * the a cached padding string, or `false` if no padding.\n *\n * @param  {*} `origA` String or number.\n * @return {String|Boolean}\n */\n\nfunction isPadded(origA, origB) {\n  if (hasZeros(origA) || hasZeros(origB)) {\n    var alen = length(origA);\n    var blen = length(origB);\n\n    var len = alen >= blen\n      ? alen\n      : blen;\n\n    return function (a) {\n      return repeatStr('0', len - length(a));\n    };\n  }\n  return false;\n}\n\n/**\n * Get the string length of `val`\n */\n\nfunction length(val) {\n  return val.toString().length;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,WAAD,CAAtB;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,YAAD,CAAvB;;AACA,IAAIG,SAAS,GAAGH,OAAO,CAAC,eAAD,CAAvB;;AACA,IAAII,MAAM,GAAGJ,OAAO,CAAC,gBAAD,CAApB;AAEA;AACA;AACA;;;AAEAK,MAAM,CAACC,OAAP,GAAiBC,SAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,SAAT,CAAmBC,CAAnB,EAAsBC,CAAtB,EAAyBC,IAAzB,EAA+BC,OAA/B,EAAwCC,EAAxC,EAA4C;EAC1C,IAAIJ,CAAC,IAAI,IAAL,IAAaC,CAAC,IAAI,IAAtB,EAA4B;IAC1B,MAAM,IAAII,KAAJ,CAAU,6DAAV,CAAN;EACD;;EAED,IAAI,OAAOH,IAAP,KAAgB,UAApB,EAAgC;IAC9BE,EAAE,GAAGF,IAAL;IAAWC,OAAO,GAAG,EAAV;IAAcD,IAAI,GAAG,IAAP;EAC1B;;EAED,IAAI,OAAOC,OAAP,KAAmB,UAAvB,EAAmC;IACjCC,EAAE,GAAGD,OAAL;IAAcA,OAAO,GAAG,EAAV;EACf;;EAED,IAAIZ,QAAQ,CAACW,IAAD,CAAZ,EAAoB;IAClBC,OAAO,GAAGD,IAAV;IAAgBA,IAAI,GAAG,EAAP;EACjB;;EAED,IAAII,MAAJ;EAAA,IAAYC,KAAK,GAAG,KAApB;EAAA,IAA2BC,GAAG,GAAG,EAAjC;EACA,IAAIC,IAAI,GAAGN,OAAO,IAAI,EAAtB;;EAEA,IAAI,OAAOM,IAAI,CAACC,MAAZ,KAAuB,WAA3B,EAAwC;IACtCD,IAAI,CAACC,MAAL,GAAc,IAAd;EACD;;EAEDR,IAAI,GAAGA,IAAI,IAAIO,IAAI,CAACP,IAApB,CAxB0C,CA0B1C;;EACA,IAAIS,KAAK,GAAGX,CAAZ;EAAA,IAAeY,KAAK,GAAGX,CAAvB;EAEAA,CAAC,GAAIA,CAAC,CAACY,QAAF,OAAiB,IAAlB,GAA0B,CAA1B,GAA8BZ,CAAlC;;EAEA,IAAIQ,IAAI,CAACK,QAAL,IAAiBL,IAAI,CAACM,MAA1B,EAAkC;IAChCb,IAAI,GAAGA,IAAI,GAAIA,IAAI,IAAI,GAAZ,GAAmBA,IAA9B;IACAI,MAAM,GAAG,IAAT;IACAC,KAAK,GAAG,IAAR;IACAC,GAAG,GAAG,GAAN;EACD,CApCyC,CAsC1C;;;EACA,IAAI,OAAON,IAAP,KAAgB,QAApB,EAA8B;IAC5B,IAAIc,KAAK,GAAGC,MAAM,GAAGC,IAAT,CAAchB,IAAd,CAAZ;;IAEA,IAAIc,KAAJ,EAAW;MACT,IAAIG,CAAC,GAAGH,KAAK,CAACI,KAAd;MACA,IAAIC,CAAC,GAAGL,KAAK,CAAC,CAAD,CAAb,CAFS,CAIT;;MACA,IAAIK,CAAC,KAAK,GAAV,EAAe;QACb,OAAOzB,MAAM,CAACI,CAAD,EAAIC,CAAJ,CAAb,CADa,CAGf;MACC,CAJD,MAIO,IAAIoB,CAAC,KAAK,GAAV,EAAe;QACpB,OAAO,CAAC3B,SAAS,CAACM,CAAD,EAAIC,CAAJ,CAAV,CAAP,CADoB,CAGtB;MACC,CAJM,MAIA,IAAIoB,CAAC,KAAK,GAAV,EAAe;QACpBnB,IAAI,GAAGA,IAAI,CAACoB,MAAL,CAAY,CAAZ,EAAeH,CAAf,IAAoBjB,IAAI,CAACoB,MAAL,CAAYH,CAAC,GAAG,CAAhB,CAA3B;QACAb,MAAM,GAAG,IAAT,CAFoB,CAItB;QACA;MACC,CANM,MAMA,IAAIe,CAAC,KAAK,GAAV,EAAe;QACpBnB,IAAI,GAAGA,IAAI,CAACoB,MAAL,CAAY,CAAZ,EAAeH,CAAf,IAAoBjB,IAAI,CAACoB,MAAL,CAAYH,CAAC,GAAG,CAAhB,CAA3B;QACAb,MAAM,GAAG,IAAT;QACAC,KAAK,GAAG,IAAR;QACAC,GAAG,GAAGa,CAAN,CAJoB,CAMtB;QACA;MACC,CARM,MAQA,IAAIA,CAAC,KAAK,GAAV,EAAe;QACpBnB,IAAI,GAAGA,IAAI,CAACoB,MAAL,CAAY,CAAZ,EAAeH,CAAf,IAAoBjB,IAAI,CAACoB,MAAL,CAAYH,CAAC,GAAG,CAAhB,CAA3B;QACAb,MAAM,GAAG,IAAT;QACAC,KAAK,GAAG,IAAR;QACAC,GAAG,GAAGa,CAAN;MACD;IACF,CAjCD,MAiCO,IAAI,CAAC5B,QAAQ,CAACS,IAAD,CAAb,EAAqB;MAC1B,IAAI,CAACO,IAAI,CAACC,MAAV,EAAkB;QAChB,MAAM,IAAIa,SAAJ,CAAc,2BAAd,CAAN;MACD;;MACD,OAAO,IAAP;IACD;EACF;;EAED,IAAI,mBAAmBC,IAAnB,CAAwBxB,CAAxB,KAA8B,mBAAmBwB,IAAnB,CAAwBvB,CAAxB,CAAlC,EAA8D;IAC5D,IAAI,CAACQ,IAAI,CAACC,MAAV,EAAkB;MAChB,MAAM,IAAIe,UAAJ,CAAe,sCAAf,CAAN;IACD;;IACD,OAAO,IAAP;EACD,CAxFyC,CA0F1C;EACA;;;EACA,IAAI,CAACC,UAAU,CAAC1B,CAAD,CAAX,IAAkB,CAAC0B,UAAU,CAACzB,CAAD,CAA7B,IAAoC0B,OAAO,CAAC3B,CAAD,CAA3C,IAAkD2B,OAAO,CAAC1B,CAAD,CAA7D,EAAkE;IAChE,IAAI,CAACQ,IAAI,CAACC,MAAV,EAAkB;MAChB,MAAM,IAAIe,UAAJ,CAAe,sCAAf,CAAN;IACD;;IACD,OAAO,IAAP;EACD,CAjGyC,CAmG1C;;;EACA,IAAIG,MAAM,GAAGnC,QAAQ,CAACoC,KAAK,CAAC7B,CAAD,CAAN,CAArB;EACA,IAAI8B,MAAM,GAAGrC,QAAQ,CAACoC,KAAK,CAAC5B,CAAD,CAAN,CAArB;;EAEA,IAAK,CAAC2B,MAAD,IAAWE,MAAZ,IAAwBF,MAAM,IAAI,CAACE,MAAvC,EAAgD;IAC9C,IAAI,CAACrB,IAAI,CAACC,MAAV,EAAkB;MAChB,MAAM,IAAIa,SAAJ,CAAc,+DAAd,CAAN;IACD;;IACD,OAAO,IAAP;EACD,CA5GyC,CA8G1C;EACA;;;EACA,IAAIQ,KAAK,GAAGH,MAAZ;EACA,IAAII,GAAG,GAAGC,UAAU,CAAC/B,IAAD,CAApB,CAjH0C,CAmH1C;;EACA,IAAI6B,KAAJ,EAAW;IACT;IACA/B,CAAC,GAAG,CAACA,CAAL;IAAQC,CAAC,GAAG,CAACA,CAAL;EACT,CAHD,MAGO;IACL;IACAD,CAAC,GAAGA,CAAC,CAACkC,UAAF,CAAa,CAAb,CAAJ;IACAjC,CAAC,GAAGA,CAAC,CAACiC,UAAF,CAAa,CAAb,CAAJ;EACD,CA3HyC,CA6H1C;;;EACA,IAAIC,YAAY,GAAGnC,CAAC,GAAGC,CAAvB,CA9H0C,CAgI1C;;EACA,IAAID,CAAC,GAAG,CAAJ,IAASC,CAAC,GAAG,CAAjB,EAAoB;IAClBK,MAAM,GAAG,KAAT;IACAC,KAAK,GAAG,KAAR;EACD,CApIyC,CAsI1C;;;EACA,IAAI6B,OAAO,GAAGC,QAAQ,CAAC1B,KAAD,EAAQC,KAAR,CAAtB;EACA,IAAI0B,GAAJ;EAAA,IAASC,GAAT;EAAA,IAAcC,GAAG,GAAG,EAApB;EACA,IAAIC,EAAE,GAAG,CAAT,CAzI0C,CA2I1C;;EACA,IAAIlC,KAAJ,EAAW;IACT,IAAImC,YAAY,CAAC1C,CAAD,EAAIC,CAAJ,EAAO+B,GAAP,EAAYD,KAAZ,EAAmBK,OAAnB,EAA4B3B,IAA5B,CAAhB,EAAmD;MACjD;MACA,IAAID,GAAG,KAAK,GAAR,IAAeA,GAAG,KAAK,GAA3B,EAAgC;QAC9BA,GAAG,GAAGmC,eAAe,CAAC3C,CAAD,EAAIC,CAAJ,EAAO+B,GAAP,EAAYD,KAAZ,EAAmBI,YAAnB,CAArB;MACD;;MACD,OAAOS,IAAI,CAAC,CAACjC,KAAD,EAAQC,KAAR,CAAD,EAAiBJ,GAAjB,EAAsBC,IAAtB,CAAX;IACD;EACF;;EAED,OAAO0B,YAAY,GAAInC,CAAC,IAAIC,CAAT,GAAeD,CAAC,IAAIC,CAAvC,EAA2C;IACzC,IAAImC,OAAO,IAAIL,KAAf,EAAsB;MACpBQ,GAAG,GAAGH,OAAO,CAACpC,CAAD,CAAb;IACD,CAHwC,CAKzC;;;IACA,IAAI,OAAOI,EAAP,KAAc,UAAlB,EAA8B;MAC5BkC,GAAG,GAAGlC,EAAE,CAACJ,CAAD,EAAI+B,KAAJ,EAAWQ,GAAX,EAAgBE,EAAE,EAAlB,CAAR,CAD4B,CAG9B;IACC,CAJD,MAIO,IAAI,CAACV,KAAL,EAAY;MACjB,IAAIxB,KAAK,IAAIsC,aAAa,CAAC7C,CAAD,CAA1B,EAA+B;QAC7BsC,GAAG,GAAG,IAAN;MACD,CAFD,MAEO;QACLA,GAAG,GAAGQ,MAAM,CAACC,YAAP,CAAoB/C,CAApB,CAAN;MACD,CALgB,CAOnB;;IACC,CARM,MAQA;MACLsC,GAAG,GAAGU,aAAa,CAAChD,CAAD,EAAIuC,GAAJ,CAAnB;IACD,CApBwC,CAsBzC;;;IACA,IAAID,GAAG,KAAK,IAAZ,EAAkBE,GAAG,CAACS,IAAJ,CAASX,GAAT,EAvBuB,CAyBzC;;IACA,IAAIH,YAAJ,EAAkB;MAChBnC,CAAC,IAAIgC,GAAL;IACD,CAFD,MAEO;MACLhC,CAAC,IAAIgC,GAAL;IACD;EACF,CArLyC,CAuL1C;EACA;EACA;;;EACA,IAAI,CAACzB,KAAK,IAAID,MAAV,KAAqB,CAACG,IAAI,CAACyC,QAA/B,EAAyC;IACvC;IACA,IAAI1C,GAAG,KAAK,GAAR,IAAeA,GAAG,KAAK,GAA3B,EAAgC;MAC9BA,GAAG,GAAGmC,eAAe,CAAC3C,CAAD,EAAIC,CAAJ,EAAO+B,GAAP,EAAYD,KAAZ,EAAmBI,YAAnB,CAArB;IACD;;IACD,IAAIK,GAAG,CAACW,MAAJ,KAAe,CAAf,IAAoBnD,CAAC,GAAG,CAAxB,IAA6BC,CAAC,GAAG,CAArC,EAAwC;MAAE,OAAOuC,GAAP;IAAa;;IACvD,OAAOI,IAAI,CAACJ,GAAD,EAAMhC,GAAN,EAAWC,IAAX,CAAX;EACD;;EAED,OAAO+B,GAAP;AACD;AAED;AACA;AACA;AACA;;;AAEA,SAASI,IAAT,CAAcJ,GAAd,EAAmBhC,GAAnB,EAAwBC,IAAxB,EAA8B;EAC5B,IAAID,GAAG,KAAK,GAAZ,EAAiB;IAAEA,GAAG,GAAG,GAAN;EAAY;;EAC/B,IAAI4C,GAAG,GAAGZ,GAAG,CAACa,IAAJ,CAAS7C,GAAT,CAAV;EACA,IAAI8C,GAAG,GAAG7C,IAAI,IAAIA,IAAI,CAAC8C,WAAvB,CAH4B,CAK5B;;EACA,IAAI/C,GAAG,KAAK,GAAZ,EAAiB;IACf4C,GAAG,GAAGE,GAAG,GAAGA,GAAG,GAAGF,GAAT,GAAeA,GAAxB;IACAA,GAAG,GAAG,MAAMA,GAAN,GAAY,GAAlB;EACD,CAT2B,CAW5B;;;EACA,IAAI5C,GAAG,KAAK,GAAZ,EAAiB;IACf4C,GAAG,GAAIE,GAAG,IAAIA,GAAG,KAAK,GAAhB,GACFA,GAAG,GAAGF,GADJ,GAEFA,GAFJ;IAGAA,GAAG,GAAG,MAAMA,GAAN,GAAY,GAAlB;EACD;;EACD,OAAO,CAACA,GAAD,CAAP;AACD;AAED;AACA;AACA;;;AAEA,SAASI,WAAT,CAAqBxD,CAArB,EAAwBC,CAAxB,EAA2BC,IAA3B,EAAiC6B,KAAjC,EAAwCI,YAAxC,EAAsD;EACpD,IAAIA,YAAJ,EAAkB;IAAE,OAAO,KAAP;EAAe;;EACnC,IAAIJ,KAAJ,EAAW;IAAE,OAAO/B,CAAC,IAAI,CAAL,IAAUC,CAAC,IAAI,CAAtB;EAA0B;;EACvC,IAAID,CAAC,GAAGC,CAAR,EAAW;IAAE,OAAOC,IAAI,KAAK,CAAhB;EAAoB;;EACjC,OAAO,KAAP;AACD;AAED;AACA;AACA;;;AAEA,SAASwC,YAAT,CAAsB1C,CAAtB,EAAyBC,CAAzB,EAA4B+B,GAA5B,EAAiCD,KAAjC,EAAwCK,OAAxC,EAAiD3B,IAAjD,EAAuD;EACrD,IAAIsB,KAAK,KAAK/B,CAAC,GAAG,CAAJ,IAASC,CAAC,GAAG,CAAlB,CAAT,EAA+B;IAAE,OAAO,KAAP;EAAe;;EAChD,OAAO,CAACmC,OAAD,IAAYJ,GAAG,KAAK,CAApB,IAAyBhC,CAAC,GAAGC,CAApC;AACD;AAED;AACA;AACA;;;AAEA,SAAS0C,eAAT,CAAyB3C,CAAzB,EAA4BC,CAA5B,EAA+BC,IAA/B,EAAqC6B,KAArC,EAA4CI,YAA5C,EAA0D;EACxD,IAAIsB,MAAM,GAAGD,WAAW,CAACxD,CAAD,EAAIC,CAAJ,EAAOC,IAAP,EAAa6B,KAAb,EAAoBI,YAApB,CAAxB;;EACA,IAAI,CAACsB,MAAL,EAAa;IACX,OAAO,GAAP;EACD;;EACD,OAAO,GAAP;AACD;AAED;AACA;AACA;;;AAEA,SAASxB,UAAT,CAAoB/B,IAApB,EAA0B;EACxB,OAAOwD,IAAI,CAACC,GAAL,CAASzD,IAAI,IAAI,CAAjB,KAAuB,CAA9B;AACD;AAED;AACA;AACA;;;AAEA,SAAS8C,aAAT,CAAuBY,EAAvB,EAA2BrB,GAA3B,EAAgC;EAC9B,IAAID,GAAG,GAAGC,GAAG,GAAGA,GAAG,GAAGqB,EAAT,GAAcA,EAA3B;;EACA,IAAIrB,GAAG,IAAIqB,EAAE,CAAC/C,QAAH,GAAcgD,MAAd,CAAqB,CAArB,MAA4B,GAAvC,EAA4C;IAC1CvB,GAAG,GAAG,MAAMC,GAAN,GAAYqB,EAAE,CAAC/C,QAAH,GAAcS,MAAd,CAAqB,CAArB,CAAlB;EACD;;EACD,OAAOgB,GAAG,CAACzB,QAAJ,EAAP;AACD;AAED;AACA;AACA;;;AAEA,SAASgC,aAAT,CAAuBO,GAAvB,EAA4B;EAC1B,IAAIQ,EAAE,GAAGE,KAAK,CAACV,GAAD,CAAd;EACA,OAAOQ,EAAE,KAAK,IAAP,IACFA,EAAE,KAAK,GADL,IAEFA,EAAE,KAAK,GAFL,IAGFA,EAAE,KAAK,GAHL,IAIFA,EAAE,KAAK,GAJL,IAKFA,EAAE,KAAK,GALL,IAMFA,EAAE,KAAK,GANZ;AAOD;AAED;AACA;AACA;;;AAEA,SAASE,KAAT,CAAeF,EAAf,EAAmB;EACjB,OAAOd,MAAM,CAACC,YAAP,CAAoBa,EAApB,CAAP;AACD;AAGD;AACA;AACA;;;AAEA,SAAS3C,MAAT,GAAkB;EAChB,OAAO,gBAAP;AACD;AAED;AACA;AACA;AACA;;;AAEA,SAASS,UAAT,CAAoBqC,GAApB,EAAyB;EACvB,OAAO,YAAYvC,IAAZ,CAAiBuC,GAAjB,CAAP;AACD;AAED;AACA;AACA;AACA;;;AAEA,SAASpC,OAAT,CAAiBoC,GAAjB,EAAsB;EACpB,OAAO,yBAAyBvC,IAAzB,CAA8BuC,GAA9B,CAAP;AACD;AAED;AACA;AACA;;;AAEA,SAASlC,KAAT,CAAekC,GAAf,EAAoB;EAClB,IAAI,SAASvC,IAAT,CAAcuC,GAAG,CAAClD,QAAJ,EAAd,CAAJ,EAAmC;IACjC,OAAO,GAAP;EACD;;EACD,OAAOkD,GAAP;AACD;AAED;AACA;AACA;AACA;;;AAEA,SAASC,QAAT,CAAkBD,GAAlB,EAAuB;EACrB,OAAO,oBAAoBvC,IAApB,CAAyBuC,GAAzB,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAAS1B,QAAT,CAAkB1B,KAAlB,EAAyBC,KAAzB,EAAgC;EAC9B,IAAIoD,QAAQ,CAACrD,KAAD,CAAR,IAAmBqD,QAAQ,CAACpD,KAAD,CAA/B,EAAwC;IACtC,IAAIqD,IAAI,GAAGd,MAAM,CAACxC,KAAD,CAAjB;IACA,IAAIuD,IAAI,GAAGf,MAAM,CAACvC,KAAD,CAAjB;IAEA,IAAIuD,GAAG,GAAGF,IAAI,IAAIC,IAAR,GACND,IADM,GAENC,IAFJ;IAIA,OAAO,UAAUlE,CAAV,EAAa;MAClB,OAAOL,SAAS,CAAC,GAAD,EAAMwE,GAAG,GAAGhB,MAAM,CAACnD,CAAD,CAAlB,CAAhB;IACD,CAFD;EAGD;;EACD,OAAO,KAAP;AACD;AAED;AACA;AACA;;;AAEA,SAASmD,MAAT,CAAgBY,GAAhB,EAAqB;EACnB,OAAOA,GAAG,CAAClD,QAAJ,GAAesC,MAAtB;AACD"},"metadata":{},"sourceType":"script"}