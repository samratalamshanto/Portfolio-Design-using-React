{"ast":null,"code":"'use strict';\n\nvar path = require('path');\n\nvar inspect = require('util').inspect;\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + inspect(path));\n  }\n}\n\nfunction posix(path) {\n  assertPath(path);\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47\n  /*/*/\n  ;\n  var end = -1;\n  var matchedSlash = true;\n\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n\n    if (code === 47\n    /*/*/\n    ) {\n      if (!matchedSlash) {\n        end = i;\n        break;\n      }\n    } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) return '//';\n  return path.slice(0, end);\n}\n\nfunction win32(path) {\n  assertPath(path);\n  var len = path.length;\n  if (len === 0) return '.';\n  var rootEnd = -1;\n  var end = -1;\n  var matchedSlash = true;\n  var offset = 0;\n  var code = path.charCodeAt(0); // Try to match a root\n\n  if (len > 1) {\n    if (code === 47\n    /*/*/\n    || code === 92\n    /*\\*/\n    ) {\n      // Possible UNC root\n      rootEnd = offset = 1;\n      code = path.charCodeAt(1);\n\n      if (code === 47\n      /*/*/\n      || code === 92\n      /*\\*/\n      ) {\n        // Matched double path separator at beginning\n        var j = 2;\n        var last = j; // Match 1 or more non-path separators\n\n        for (; j < len; ++j) {\n          code = path.charCodeAt(j);\n          if (code === 47\n          /*/*/\n          || code === 92\n          /*\\*/\n          ) break;\n        }\n\n        if (j < len && j !== last) {\n          // Matched!\n          last = j; // Match 1 or more path separators\n\n          for (; j < len; ++j) {\n            code = path.charCodeAt(j);\n            if (code !== 47\n            /*/*/\n            && code !== 92\n            /*\\*/\n            ) break;\n          }\n\n          if (j < len && j !== last) {\n            // Matched!\n            last = j; // Match 1 or more non-path separators\n\n            for (; j < len; ++j) {\n              code = path.charCodeAt(j);\n              if (code === 47\n              /*/*/\n              || code === 92\n              /*\\*/\n              ) break;\n            }\n\n            if (j === len) {\n              // We matched a UNC root only\n              return path;\n            }\n\n            if (j !== last) {\n              // We matched a UNC root with leftovers\n              // Offset by 1 to include the separator after the UNC root to\n              // treat it as a \"normal root\" on top of a (UNC) root\n              rootEnd = offset = j + 1;\n            }\n          }\n        }\n      }\n    } else if (code >= 65\n    /*A*/\n    && code <= 90\n    /*Z*/\n    || code >= 97\n    /*a*/\n    && code <= 122\n    /*z*/\n    ) {\n      // Possible device root\n      code = path.charCodeAt(1);\n\n      if (path.charCodeAt(1) === 58\n      /*:*/\n      ) {\n        rootEnd = offset = 2;\n\n        if (len > 2) {\n          code = path.charCodeAt(2);\n          if (code === 47\n          /*/*/\n          || code === 92\n          /*\\*/\n          ) rootEnd = offset = 3;\n        }\n      }\n    }\n  } else if (code === 47\n  /*/*/\n  || code === 92\n  /*\\*/\n  ) {\n    return path[0];\n  }\n\n  for (var i = len - 1; i >= offset; --i) {\n    code = path.charCodeAt(i);\n\n    if (code === 47\n    /*/*/\n    || code === 92\n    /*\\*/\n    ) {\n      if (!matchedSlash) {\n        end = i;\n        break;\n      }\n    } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) {\n    if (rootEnd === -1) return '.';else end = rootEnd;\n  }\n\n  return path.slice(0, end);\n}\n\nmodule.exports = process.platform === 'win32' ? win32 : posix;\nmodule.exports.posix = posix;\nmodule.exports.win32 = win32;","map":{"version":3,"names":["path","require","inspect","assertPath","TypeError","posix","length","code","charCodeAt","hasRoot","end","matchedSlash","i","slice","win32","len","rootEnd","offset","j","last","module","exports","process","platform"],"sources":["G:/anaconda/project/download files/last down/New folder/desktop/Samrat/protfolio/protfolio/node_modules/path-dirname/index.js"],"sourcesContent":["'use strict';\n\nvar path = require('path');\nvar inspect = require('util').inspect;\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + inspect(path));\n  }\n}\n\nfunction posix(path) {\n  assertPath(path);\n  if (path.length === 0)\n    return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = (code === 47/*/*/);\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47/*/*/) {\n      if (!matchedSlash) {\n        end = i;\n        break;\n      }\n    } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1)\n    return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1)\n    return '//';\n  return path.slice(0, end);\n}\n\nfunction win32(path) {\n  assertPath(path);\n  var len = path.length;\n  if (len === 0)\n    return '.';\n  var rootEnd = -1;\n  var end = -1;\n  var matchedSlash = true;\n  var offset = 0;\n  var code = path.charCodeAt(0);\n\n  // Try to match a root\n  if (len > 1) {\n    if (code === 47/*/*/ || code === 92/*\\*/) {\n      // Possible UNC root\n\n      rootEnd = offset = 1;\n\n      code = path.charCodeAt(1);\n      if (code === 47/*/*/ || code === 92/*\\*/) {\n        // Matched double path separator at beginning\n        var j = 2;\n        var last = j;\n        // Match 1 or more non-path separators\n        for (; j < len; ++j) {\n          code = path.charCodeAt(j);\n          if (code === 47/*/*/ || code === 92/*\\*/)\n            break;\n        }\n        if (j < len && j !== last) {\n          // Matched!\n          last = j;\n          // Match 1 or more path separators\n          for (; j < len; ++j) {\n            code = path.charCodeAt(j);\n            if (code !== 47/*/*/ && code !== 92/*\\*/)\n              break;\n          }\n          if (j < len && j !== last) {\n            // Matched!\n            last = j;\n            // Match 1 or more non-path separators\n            for (; j < len; ++j) {\n              code = path.charCodeAt(j);\n              if (code === 47/*/*/ || code === 92/*\\*/)\n                break;\n            }\n            if (j === len) {\n              // We matched a UNC root only\n              return path;\n            }\n            if (j !== last) {\n              // We matched a UNC root with leftovers\n\n              // Offset by 1 to include the separator after the UNC root to\n              // treat it as a \"normal root\" on top of a (UNC) root\n              rootEnd = offset = j + 1;\n            }\n          }\n        }\n      }\n    } else if ((code >= 65/*A*/ && code <= 90/*Z*/) ||\n               (code >= 97/*a*/ && code <= 122/*z*/)) {\n      // Possible device root\n\n      code = path.charCodeAt(1);\n      if (path.charCodeAt(1) === 58/*:*/) {\n        rootEnd = offset = 2;\n        if (len > 2) {\n          code = path.charCodeAt(2);\n          if (code === 47/*/*/ || code === 92/*\\*/)\n            rootEnd = offset = 3;\n        }\n      }\n    }\n  } else if (code === 47/*/*/ || code === 92/*\\*/) {\n    return path[0];\n  }\n\n  for (var i = len - 1; i >= offset; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47/*/*/ || code === 92/*\\*/) {\n      if (!matchedSlash) {\n        end = i;\n        break;\n      }\n    } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) {\n    if (rootEnd === -1)\n      return '.';\n    else\n      end = rootEnd;\n  }\n  return path.slice(0, end);\n}\n\nmodule.exports = process.platform === 'win32' ? win32 : posix;\nmodule.exports.posix = posix;\nmodule.exports.win32 = win32;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}