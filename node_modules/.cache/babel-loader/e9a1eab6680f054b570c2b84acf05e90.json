{"ast":null,"code":"'use strict';\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar SafeBuffer = require('safe-buffer');\n\nObject.defineProperty(exports, 'commentRegex', {\n  get: function getCommentRegex() {\n    return /^\\s*\\/(?:\\/|\\*)[@#]\\s+sourceMappingURL=data:(?:application|text)\\/json;(?:charset[:=]\\S+?;)?base64,(?:.*)$/mg;\n  }\n});\nObject.defineProperty(exports, 'mapFileCommentRegex', {\n  get: function getMapFileCommentRegex() {\n    // Matches sourceMappingURL in either // or /* comment styles.\n    return /(?:\\/\\/[@#][ \\t]+sourceMappingURL=([^\\s'\"`]+?)[ \\t]*$)|(?:\\/\\*[@#][ \\t]+sourceMappingURL=([^\\*]+?)[ \\t]*(?:\\*\\/){1}[ \\t]*$)/mg;\n  }\n});\n\nfunction decodeBase64(base64) {\n  return (SafeBuffer.Buffer.from(base64, 'base64') || \"\").toString();\n}\n\nfunction stripComment(sm) {\n  return sm.split(',').pop();\n}\n\nfunction readFromFileMap(sm, dir) {\n  // NOTE: this will only work on the server since it attempts to read the map file\n  var r = exports.mapFileCommentRegex.exec(sm); // for some odd reason //# .. captures in 1 and /* .. */ in 2\n\n  var filename = r[1] || r[2];\n  var filepath = path.resolve(dir, filename);\n\n  try {\n    return fs.readFileSync(filepath, 'utf8');\n  } catch (e) {\n    throw new Error('An error occurred while trying to read the map file at ' + filepath + '\\n' + e);\n  }\n}\n\nfunction Converter(sm, opts) {\n  opts = opts || {};\n  if (opts.isFileComment) sm = readFromFileMap(sm, opts.commentFileDir);\n  if (opts.hasComment) sm = stripComment(sm);\n  if (opts.isEncoded) sm = decodeBase64(sm);\n  if (opts.isJSON || opts.isEncoded) sm = JSON.parse(sm);\n  this.sourcemap = sm;\n}\n\nConverter.prototype.toJSON = function (space) {\n  return JSON.stringify(this.sourcemap, null, space);\n};\n\nConverter.prototype.toBase64 = function () {\n  var json = this.toJSON();\n  return (SafeBuffer.Buffer.from(json, 'utf8') || \"\").toString('base64');\n};\n\nConverter.prototype.toComment = function (options) {\n  var base64 = this.toBase64();\n  var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n  return options && options.multiline ? '/*# ' + data + ' */' : '//# ' + data;\n}; // returns copy instead of original\n\n\nConverter.prototype.toObject = function () {\n  return JSON.parse(this.toJSON());\n};\n\nConverter.prototype.addProperty = function (key, value) {\n  if (this.sourcemap.hasOwnProperty(key)) throw new Error('property \"' + key + '\" already exists on the sourcemap, use set property instead');\n  return this.setProperty(key, value);\n};\n\nConverter.prototype.setProperty = function (key, value) {\n  this.sourcemap[key] = value;\n  return this;\n};\n\nConverter.prototype.getProperty = function (key) {\n  return this.sourcemap[key];\n};\n\nexports.fromObject = function (obj) {\n  return new Converter(obj);\n};\n\nexports.fromJSON = function (json) {\n  return new Converter(json, {\n    isJSON: true\n  });\n};\n\nexports.fromBase64 = function (base64) {\n  return new Converter(base64, {\n    isEncoded: true\n  });\n};\n\nexports.fromComment = function (comment) {\n  comment = comment.replace(/^\\/\\*/g, '//').replace(/\\*\\/$/g, '');\n  return new Converter(comment, {\n    isEncoded: true,\n    hasComment: true\n  });\n};\n\nexports.fromMapFileComment = function (comment, dir) {\n  return new Converter(comment, {\n    commentFileDir: dir,\n    isFileComment: true,\n    isJSON: true\n  });\n}; // Finds last sourcemap comment in file or returns null if none was found\n\n\nexports.fromSource = function (content) {\n  var m = content.match(exports.commentRegex);\n  return m ? exports.fromComment(m.pop()) : null;\n}; // Finds last sourcemap comment in file or returns null if none was found\n\n\nexports.fromMapFileSource = function (content, dir) {\n  var m = content.match(exports.mapFileCommentRegex);\n  return m ? exports.fromMapFileComment(m.pop(), dir) : null;\n};\n\nexports.removeComments = function (src) {\n  return src.replace(exports.commentRegex, '');\n};\n\nexports.removeMapFileComments = function (src) {\n  return src.replace(exports.mapFileCommentRegex, '');\n};\n\nexports.generateMapFileComment = function (file, options) {\n  var data = 'sourceMappingURL=' + file;\n  return options && options.multiline ? '/*# ' + data + ' */' : '//# ' + data;\n};","map":{"version":3,"names":["fs","require","path","SafeBuffer","Object","defineProperty","exports","get","getCommentRegex","getMapFileCommentRegex","decodeBase64","base64","Buffer","from","toString","stripComment","sm","split","pop","readFromFileMap","dir","r","mapFileCommentRegex","exec","filename","filepath","resolve","readFileSync","e","Error","Converter","opts","isFileComment","commentFileDir","hasComment","isEncoded","isJSON","JSON","parse","sourcemap","prototype","toJSON","space","stringify","toBase64","json","toComment","options","data","multiline","toObject","addProperty","key","value","hasOwnProperty","setProperty","getProperty","fromObject","obj","fromJSON","fromBase64","fromComment","comment","replace","fromMapFileComment","fromSource","content","m","match","commentRegex","fromMapFileSource","removeComments","src","removeMapFileComments","generateMapFileComment","file"],"sources":["G:/anaconda/project/download files/last down/New folder/desktop/Samrat/protfolio/protfolio/node_modules/convert-source-map/index.js"],"sourcesContent":["'use strict';\nvar fs = require('fs');\nvar path = require('path');\nvar SafeBuffer = require('safe-buffer');\n\nObject.defineProperty(exports, 'commentRegex', {\n  get: function getCommentRegex () {\n    return /^\\s*\\/(?:\\/|\\*)[@#]\\s+sourceMappingURL=data:(?:application|text)\\/json;(?:charset[:=]\\S+?;)?base64,(?:.*)$/mg;\n  }\n});\n\nObject.defineProperty(exports, 'mapFileCommentRegex', {\n  get: function getMapFileCommentRegex () {\n    // Matches sourceMappingURL in either // or /* comment styles.\n    return /(?:\\/\\/[@#][ \\t]+sourceMappingURL=([^\\s'\"`]+?)[ \\t]*$)|(?:\\/\\*[@#][ \\t]+sourceMappingURL=([^\\*]+?)[ \\t]*(?:\\*\\/){1}[ \\t]*$)/mg;\n  }\n});\n\n\nfunction decodeBase64(base64) {\n  return (SafeBuffer.Buffer.from(base64, 'base64') || \"\").toString();\n}\n\nfunction stripComment(sm) {\n  return sm.split(',').pop();\n}\n\nfunction readFromFileMap(sm, dir) {\n  // NOTE: this will only work on the server since it attempts to read the map file\n\n  var r = exports.mapFileCommentRegex.exec(sm);\n\n  // for some odd reason //# .. captures in 1 and /* .. */ in 2\n  var filename = r[1] || r[2];\n  var filepath = path.resolve(dir, filename);\n\n  try {\n    return fs.readFileSync(filepath, 'utf8');\n  } catch (e) {\n    throw new Error('An error occurred while trying to read the map file at ' + filepath + '\\n' + e);\n  }\n}\n\nfunction Converter (sm, opts) {\n  opts = opts || {};\n\n  if (opts.isFileComment) sm = readFromFileMap(sm, opts.commentFileDir);\n  if (opts.hasComment) sm = stripComment(sm);\n  if (opts.isEncoded) sm = decodeBase64(sm);\n  if (opts.isJSON || opts.isEncoded) sm = JSON.parse(sm);\n\n  this.sourcemap = sm;\n}\n\nConverter.prototype.toJSON = function (space) {\n  return JSON.stringify(this.sourcemap, null, space);\n};\n\nConverter.prototype.toBase64 = function () {\n  var json = this.toJSON();\n  return (SafeBuffer.Buffer.from(json, 'utf8') || \"\").toString('base64');\n};\n\nConverter.prototype.toComment = function (options) {\n  var base64 = this.toBase64();\n  var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n  return options && options.multiline ? '/*# ' + data + ' */' : '//# ' + data;\n};\n\n// returns copy instead of original\nConverter.prototype.toObject = function () {\n  return JSON.parse(this.toJSON());\n};\n\nConverter.prototype.addProperty = function (key, value) {\n  if (this.sourcemap.hasOwnProperty(key)) throw new Error('property \"' + key + '\" already exists on the sourcemap, use set property instead');\n  return this.setProperty(key, value);\n};\n\nConverter.prototype.setProperty = function (key, value) {\n  this.sourcemap[key] = value;\n  return this;\n};\n\nConverter.prototype.getProperty = function (key) {\n  return this.sourcemap[key];\n};\n\nexports.fromObject = function (obj) {\n  return new Converter(obj);\n};\n\nexports.fromJSON = function (json) {\n  return new Converter(json, { isJSON: true });\n};\n\nexports.fromBase64 = function (base64) {\n  return new Converter(base64, { isEncoded: true });\n};\n\nexports.fromComment = function (comment) {\n  comment = comment\n    .replace(/^\\/\\*/g, '//')\n    .replace(/\\*\\/$/g, '');\n\n  return new Converter(comment, { isEncoded: true, hasComment: true });\n};\n\nexports.fromMapFileComment = function (comment, dir) {\n  return new Converter(comment, { commentFileDir: dir, isFileComment: true, isJSON: true });\n};\n\n// Finds last sourcemap comment in file or returns null if none was found\nexports.fromSource = function (content) {\n  var m = content.match(exports.commentRegex);\n  return m ? exports.fromComment(m.pop()) : null;\n};\n\n// Finds last sourcemap comment in file or returns null if none was found\nexports.fromMapFileSource = function (content, dir) {\n  var m = content.match(exports.mapFileCommentRegex);\n  return m ? exports.fromMapFileComment(m.pop(), dir) : null;\n};\n\nexports.removeComments = function (src) {\n  return src.replace(exports.commentRegex, '');\n};\n\nexports.removeMapFileComments = function (src) {\n  return src.replace(exports.mapFileCommentRegex, '');\n};\n\nexports.generateMapFileComment = function (file, options) {\n  var data = 'sourceMappingURL=' + file;\n  return options && options.multiline ? '/*# ' + data + ' */' : '//# ' + data;\n};\n"],"mappings":"AAAA;;AACA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIE,UAAU,GAAGF,OAAO,CAAC,aAAD,CAAxB;;AAEAG,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,cAA/B,EAA+C;EAC7CC,GAAG,EAAE,SAASC,eAAT,GAA4B;IAC/B,OAAO,8GAAP;EACD;AAH4C,CAA/C;AAMAJ,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,qBAA/B,EAAsD;EACpDC,GAAG,EAAE,SAASE,sBAAT,GAAmC;IACtC;IACA,OAAO,+HAAP;EACD;AAJmD,CAAtD;;AAQA,SAASC,YAAT,CAAsBC,MAAtB,EAA8B;EAC5B,OAAO,CAACR,UAAU,CAACS,MAAX,CAAkBC,IAAlB,CAAuBF,MAAvB,EAA+B,QAA/B,KAA4C,EAA7C,EAAiDG,QAAjD,EAAP;AACD;;AAED,SAASC,YAAT,CAAsBC,EAAtB,EAA0B;EACxB,OAAOA,EAAE,CAACC,KAAH,CAAS,GAAT,EAAcC,GAAd,EAAP;AACD;;AAED,SAASC,eAAT,CAAyBH,EAAzB,EAA6BI,GAA7B,EAAkC;EAChC;EAEA,IAAIC,CAAC,GAAGf,OAAO,CAACgB,mBAAR,CAA4BC,IAA5B,CAAiCP,EAAjC,CAAR,CAHgC,CAKhC;;EACA,IAAIQ,QAAQ,GAAGH,CAAC,CAAC,CAAD,CAAD,IAAQA,CAAC,CAAC,CAAD,CAAxB;EACA,IAAII,QAAQ,GAAGvB,IAAI,CAACwB,OAAL,CAAaN,GAAb,EAAkBI,QAAlB,CAAf;;EAEA,IAAI;IACF,OAAOxB,EAAE,CAAC2B,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAAP;EACD,CAFD,CAEE,OAAOG,CAAP,EAAU;IACV,MAAM,IAAIC,KAAJ,CAAU,4DAA4DJ,QAA5D,GAAuE,IAAvE,GAA8EG,CAAxF,CAAN;EACD;AACF;;AAED,SAASE,SAAT,CAAoBd,EAApB,EAAwBe,IAAxB,EAA8B;EAC5BA,IAAI,GAAGA,IAAI,IAAI,EAAf;EAEA,IAAIA,IAAI,CAACC,aAAT,EAAwBhB,EAAE,GAAGG,eAAe,CAACH,EAAD,EAAKe,IAAI,CAACE,cAAV,CAApB;EACxB,IAAIF,IAAI,CAACG,UAAT,EAAqBlB,EAAE,GAAGD,YAAY,CAACC,EAAD,CAAjB;EACrB,IAAIe,IAAI,CAACI,SAAT,EAAoBnB,EAAE,GAAGN,YAAY,CAACM,EAAD,CAAjB;EACpB,IAAIe,IAAI,CAACK,MAAL,IAAeL,IAAI,CAACI,SAAxB,EAAmCnB,EAAE,GAAGqB,IAAI,CAACC,KAAL,CAAWtB,EAAX,CAAL;EAEnC,KAAKuB,SAAL,GAAiBvB,EAAjB;AACD;;AAEDc,SAAS,CAACU,SAAV,CAAoBC,MAApB,GAA6B,UAAUC,KAAV,EAAiB;EAC5C,OAAOL,IAAI,CAACM,SAAL,CAAe,KAAKJ,SAApB,EAA+B,IAA/B,EAAqCG,KAArC,CAAP;AACD,CAFD;;AAIAZ,SAAS,CAACU,SAAV,CAAoBI,QAApB,GAA+B,YAAY;EACzC,IAAIC,IAAI,GAAG,KAAKJ,MAAL,EAAX;EACA,OAAO,CAACtC,UAAU,CAACS,MAAX,CAAkBC,IAAlB,CAAuBgC,IAAvB,EAA6B,MAA7B,KAAwC,EAAzC,EAA6C/B,QAA7C,CAAsD,QAAtD,CAAP;AACD,CAHD;;AAKAgB,SAAS,CAACU,SAAV,CAAoBM,SAApB,GAAgC,UAAUC,OAAV,EAAmB;EACjD,IAAIpC,MAAM,GAAG,KAAKiC,QAAL,EAAb;EACA,IAAII,IAAI,GAAG,iEAAiErC,MAA5E;EACA,OAAOoC,OAAO,IAAIA,OAAO,CAACE,SAAnB,GAA+B,SAASD,IAAT,GAAgB,KAA/C,GAAuD,SAASA,IAAvE;AACD,CAJD,C,CAMA;;;AACAlB,SAAS,CAACU,SAAV,CAAoBU,QAApB,GAA+B,YAAY;EACzC,OAAOb,IAAI,CAACC,KAAL,CAAW,KAAKG,MAAL,EAAX,CAAP;AACD,CAFD;;AAIAX,SAAS,CAACU,SAAV,CAAoBW,WAApB,GAAkC,UAAUC,GAAV,EAAeC,KAAf,EAAsB;EACtD,IAAI,KAAKd,SAAL,CAAee,cAAf,CAA8BF,GAA9B,CAAJ,EAAwC,MAAM,IAAIvB,KAAJ,CAAU,eAAeuB,GAAf,GAAqB,6DAA/B,CAAN;EACxC,OAAO,KAAKG,WAAL,CAAiBH,GAAjB,EAAsBC,KAAtB,CAAP;AACD,CAHD;;AAKAvB,SAAS,CAACU,SAAV,CAAoBe,WAApB,GAAkC,UAAUH,GAAV,EAAeC,KAAf,EAAsB;EACtD,KAAKd,SAAL,CAAea,GAAf,IAAsBC,KAAtB;EACA,OAAO,IAAP;AACD,CAHD;;AAKAvB,SAAS,CAACU,SAAV,CAAoBgB,WAApB,GAAkC,UAAUJ,GAAV,EAAe;EAC/C,OAAO,KAAKb,SAAL,CAAea,GAAf,CAAP;AACD,CAFD;;AAIA9C,OAAO,CAACmD,UAAR,GAAqB,UAAUC,GAAV,EAAe;EAClC,OAAO,IAAI5B,SAAJ,CAAc4B,GAAd,CAAP;AACD,CAFD;;AAIApD,OAAO,CAACqD,QAAR,GAAmB,UAAUd,IAAV,EAAgB;EACjC,OAAO,IAAIf,SAAJ,CAAce,IAAd,EAAoB;IAAET,MAAM,EAAE;EAAV,CAApB,CAAP;AACD,CAFD;;AAIA9B,OAAO,CAACsD,UAAR,GAAqB,UAAUjD,MAAV,EAAkB;EACrC,OAAO,IAAImB,SAAJ,CAAcnB,MAAd,EAAsB;IAAEwB,SAAS,EAAE;EAAb,CAAtB,CAAP;AACD,CAFD;;AAIA7B,OAAO,CAACuD,WAAR,GAAsB,UAAUC,OAAV,EAAmB;EACvCA,OAAO,GAAGA,OAAO,CACdC,OADO,CACC,QADD,EACW,IADX,EAEPA,OAFO,CAEC,QAFD,EAEW,EAFX,CAAV;EAIA,OAAO,IAAIjC,SAAJ,CAAcgC,OAAd,EAAuB;IAAE3B,SAAS,EAAE,IAAb;IAAmBD,UAAU,EAAE;EAA/B,CAAvB,CAAP;AACD,CAND;;AAQA5B,OAAO,CAAC0D,kBAAR,GAA6B,UAAUF,OAAV,EAAmB1C,GAAnB,EAAwB;EACnD,OAAO,IAAIU,SAAJ,CAAcgC,OAAd,EAAuB;IAAE7B,cAAc,EAAEb,GAAlB;IAAuBY,aAAa,EAAE,IAAtC;IAA4CI,MAAM,EAAE;EAApD,CAAvB,CAAP;AACD,CAFD,C,CAIA;;;AACA9B,OAAO,CAAC2D,UAAR,GAAqB,UAAUC,OAAV,EAAmB;EACtC,IAAIC,CAAC,GAAGD,OAAO,CAACE,KAAR,CAAc9D,OAAO,CAAC+D,YAAtB,CAAR;EACA,OAAOF,CAAC,GAAG7D,OAAO,CAACuD,WAAR,CAAoBM,CAAC,CAACjD,GAAF,EAApB,CAAH,GAAkC,IAA1C;AACD,CAHD,C,CAKA;;;AACAZ,OAAO,CAACgE,iBAAR,GAA4B,UAAUJ,OAAV,EAAmB9C,GAAnB,EAAwB;EAClD,IAAI+C,CAAC,GAAGD,OAAO,CAACE,KAAR,CAAc9D,OAAO,CAACgB,mBAAtB,CAAR;EACA,OAAO6C,CAAC,GAAG7D,OAAO,CAAC0D,kBAAR,CAA2BG,CAAC,CAACjD,GAAF,EAA3B,EAAoCE,GAApC,CAAH,GAA8C,IAAtD;AACD,CAHD;;AAKAd,OAAO,CAACiE,cAAR,GAAyB,UAAUC,GAAV,EAAe;EACtC,OAAOA,GAAG,CAACT,OAAJ,CAAYzD,OAAO,CAAC+D,YAApB,EAAkC,EAAlC,CAAP;AACD,CAFD;;AAIA/D,OAAO,CAACmE,qBAAR,GAAgC,UAAUD,GAAV,EAAe;EAC7C,OAAOA,GAAG,CAACT,OAAJ,CAAYzD,OAAO,CAACgB,mBAApB,EAAyC,EAAzC,CAAP;AACD,CAFD;;AAIAhB,OAAO,CAACoE,sBAAR,GAAiC,UAAUC,IAAV,EAAgB5B,OAAhB,EAAyB;EACxD,IAAIC,IAAI,GAAG,sBAAsB2B,IAAjC;EACA,OAAO5B,OAAO,IAAIA,OAAO,CAACE,SAAnB,GAA+B,SAASD,IAAT,GAAgB,KAA/C,GAAuD,SAASA,IAAvE;AACD,CAHD"},"metadata":{},"sourceType":"script"}