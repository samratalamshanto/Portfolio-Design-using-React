{"ast":null,"code":"var slice = [].slice,\n    objectAssign = require('object-assign');\n\nfunction _resolveOutput(func, bindThis) {\n  var wrapped = function () {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : []; // lazy function eval to keep output memory pressure down, if not used\n\n    if (typeof args[0] === 'function') {\n      args[0] = args[0]();\n    }\n\n    return func.apply(bindThis, args);\n  };\n\n  objectAssign(wrapped, func);\n  return wrapped;\n}\n\n;\n\nfunction wrapEval(debug) {\n  var debugOrig = debug,\n      noop = function () {};\n\n  debug = function (namespace) {\n    var instance = debugOrig(namespace); // if we're not enabled then don't attempt to log anything\n    // if a debug namespace wraps its debug in a closure then it never allocates anything but the function itself\n\n    if (!instance.enabled) {\n      objectAssign(noop, instance);\n      instance = noop;\n    } else {\n      instance = _resolveOutput(instance);\n    }\n\n    return instance;\n  };\n\n  objectAssign(debug, debugOrig);\n  return debug;\n}\n\nmodule.exports = wrapEval;","map":{"version":3,"names":["slice","objectAssign","require","_resolveOutput","func","bindThis","wrapped","args","arguments","length","call","apply","wrapEval","debug","debugOrig","noop","namespace","instance","enabled","module","exports"],"sources":["G:/anaconda/project/download files/last down/New folder/desktop/Samrat/protfolio/protfolio/node_modules/debug-fabulous/src/lazy-eval.js"],"sourcesContent":["\n\nvar slice = [].slice,\n  objectAssign = require('object-assign');\n\n\nfunction _resolveOutput(func, bindThis) {\n  var wrapped = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n\n    // lazy function eval to keep output memory pressure down, if not used\n    if (typeof args[0] === 'function') {\n      args[0] = args[0]();\n    }\n    return func.apply(bindThis, args);\n  };\n  objectAssign(wrapped, func);\n\n  return wrapped;\n};\n\n\nfunction wrapEval(debug) {\n\n  var debugOrig = debug,\n    noop = function(){};\n\n  debug = function (namespace) {\n\n    var instance = debugOrig(namespace);\n\n    // if we're not enabled then don't attempt to log anything\n    // if a debug namespace wraps its debug in a closure then it never allocates anything but the function itself\n    if (!instance.enabled){\n      objectAssign(noop, instance);\n      instance = noop;\n    }\n    else {\n      instance = _resolveOutput(instance);\n    }\n    return instance;\n  }\n\n  objectAssign(debug, debugOrig);\n\n  return debug;\n}\n\nmodule.exports = wrapEval;\n"],"mappings":"AAEA,IAAIA,KAAK,GAAG,GAAGA,KAAf;AAAA,IACEC,YAAY,GAAGC,OAAO,CAAC,eAAD,CADxB;;AAIA,SAASC,cAAT,CAAwBC,IAAxB,EAA8BC,QAA9B,EAAwC;EACtC,IAAIC,OAAO,GAAG,YAAW;IACvB,IAAIC,IAAJ;IACAA,IAAI,GAAG,KAAKC,SAAS,CAACC,MAAf,GAAwBT,KAAK,CAACU,IAAN,CAAWF,SAAX,EAAsB,CAAtB,CAAxB,GAAmD,EAA1D,CAFuB,CAIvB;;IACA,IAAI,OAAOD,IAAI,CAAC,CAAD,CAAX,KAAmB,UAAvB,EAAmC;MACjCA,IAAI,CAAC,CAAD,CAAJ,GAAUA,IAAI,CAAC,CAAD,CAAJ,EAAV;IACD;;IACD,OAAOH,IAAI,CAACO,KAAL,CAAWN,QAAX,EAAqBE,IAArB,CAAP;EACD,CATD;;EAUAN,YAAY,CAACK,OAAD,EAAUF,IAAV,CAAZ;EAEA,OAAOE,OAAP;AACD;;AAAA;;AAGD,SAASM,QAAT,CAAkBC,KAAlB,EAAyB;EAEvB,IAAIC,SAAS,GAAGD,KAAhB;EAAA,IACEE,IAAI,GAAG,YAAU,CAAE,CADrB;;EAGAF,KAAK,GAAG,UAAUG,SAAV,EAAqB;IAE3B,IAAIC,QAAQ,GAAGH,SAAS,CAACE,SAAD,CAAxB,CAF2B,CAI3B;IACA;;IACA,IAAI,CAACC,QAAQ,CAACC,OAAd,EAAsB;MACpBjB,YAAY,CAACc,IAAD,EAAOE,QAAP,CAAZ;MACAA,QAAQ,GAAGF,IAAX;IACD,CAHD,MAIK;MACHE,QAAQ,GAAGd,cAAc,CAACc,QAAD,CAAzB;IACD;;IACD,OAAOA,QAAP;EACD,CAdD;;EAgBAhB,YAAY,CAACY,KAAD,EAAQC,SAAR,CAAZ;EAEA,OAAOD,KAAP;AACD;;AAEDM,MAAM,CAACC,OAAP,GAAiBR,QAAjB"},"metadata":{},"sourceType":"script"}