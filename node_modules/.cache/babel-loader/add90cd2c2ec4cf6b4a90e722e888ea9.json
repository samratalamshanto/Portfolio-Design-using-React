{"ast":null,"code":"'use strict';\n\nmodule.exports = Readable;\n/*<replacement>*/\n\nvar processNextTick = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\n\n\nvar isArray = require('isarray');\n/*</replacement>*/\n\n/*<replacement>*/\n\n\nvar Buffer = require('buffer').Buffer;\n/*</replacement>*/\n\n\nReadable.ReadableState = ReadableState;\n\nvar EE = require('events');\n/*<replacement>*/\n\n\nvar EElistenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\n\n\nvar Stream;\n\n(function () {\n  try {\n    Stream = require('st' + 'ream');\n  } catch (_) {} finally {\n    if (!Stream) Stream = require('events').EventEmitter;\n  }\n})();\n/*</replacement>*/\n\n\nvar Buffer = require('buffer').Buffer;\n/*<replacement>*/\n\n\nvar util = require('core-util-is');\n\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar debugUtil = require('util');\n\nvar debug = undefined;\n\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\n\nvar StringDecoder;\nutil.inherits(Readable, Stream);\nvar Duplex;\n\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n  options = options || {}; // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n\n  this.objectMode = !!options.objectMode;\n  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n\n  var hwm = options.highWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm; // cast to ints.\n\n  this.highWaterMark = ~~this.highWaterMark;\n  this.buffer = [];\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false; // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n\n  this.sync = true; // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false; // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // when piping, we only care about 'readable' events that happen\n  // after read()ing all the bytes and not getting any pushback.\n\n  this.ranOut = false; // the number of writers that are awaiting a drain event in .pipe()s\n\n  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled\n\n  this.readingMore = false;\n  this.decoder = null;\n  this.encoding = null;\n\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nvar Duplex;\n\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n  if (!(this instanceof Readable)) return new Readable(options);\n  this._readableState = new ReadableState(options, this); // legacy\n\n  this.readable = true;\n  if (options && typeof options.read === 'function') this._read = options.read;\n  Stream.call(this);\n} // Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\n\n\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n\n  if (!state.objectMode && typeof chunk === 'string') {\n    encoding = encoding || state.defaultEncoding;\n\n    if (encoding !== state.encoding) {\n      chunk = new Buffer(chunk, encoding);\n      encoding = '';\n    }\n  }\n\n  return readableAddChunk(this, state, chunk, encoding, false);\n}; // Unshift should *always* be something directly out of read()\n\n\nReadable.prototype.unshift = function (chunk) {\n  var state = this._readableState;\n  return readableAddChunk(this, state, chunk, '', true);\n};\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\nfunction readableAddChunk(stream, state, chunk, encoding, addToFront) {\n  var er = chunkInvalid(state, chunk);\n\n  if (er) {\n    stream.emit('error', er);\n  } else if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else if (state.objectMode || chunk && chunk.length > 0) {\n    if (state.ended && !addToFront) {\n      var e = new Error('stream.push() after EOF');\n      stream.emit('error', e);\n    } else if (state.endEmitted && addToFront) {\n      var e = new Error('stream.unshift() after end event');\n      stream.emit('error', e);\n    } else {\n      var skipAdd;\n\n      if (state.decoder && !addToFront && !encoding) {\n        chunk = state.decoder.write(chunk);\n        skipAdd = !state.objectMode && chunk.length === 0;\n      }\n\n      if (!addToFront) state.reading = false; // Don't add to the buffer if we've decoded to an empty string chunk and\n      // we're not in object mode\n\n      if (!skipAdd) {\n        // if we want the data now, just emit it.\n        if (state.flowing && state.length === 0 && !state.sync) {\n          stream.emit('data', chunk);\n          stream.read(0);\n        } else {\n          // update the buffer info.\n          state.length += state.objectMode ? 1 : chunk.length;\n          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n          if (state.needReadable) emitReadable(stream);\n        }\n      }\n\n      maybeReadMore(stream, state);\n    }\n  } else if (!addToFront) {\n    state.reading = false;\n  }\n\n  return needMoreData(state);\n} // if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\n\n\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n} // backwards compatibility.\n\n\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n}; // Don't raise the hwm > 8MB\n\n\nvar MAX_HWM = 0x800000;\n\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n\n  return n;\n}\n\nfunction howMuchToRead(n, state) {\n  if (state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return n === 0 ? 0 : 1;\n\n  if (n === null || isNaN(n)) {\n    // only flow one buffer at a time\n    if (state.flowing && state.buffer.length) return state.buffer[0].length;else return state.length;\n  }\n\n  if (n <= 0) return 0; // If we're asking for more than the target buffer level,\n  // then raise the water mark.  Bump up to the next highest\n  // power of 2, to prevent increasing it excessively in tiny\n  // amounts.\n\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n); // don't have that much.  return null, unless we've ended.\n\n  if (n > state.length) {\n    if (!state.ended) {\n      state.needReadable = true;\n      return 0;\n    } else {\n      return state.length;\n    }\n  }\n\n  return n;\n} // you can override either this method, or the async _read(n) below.\n\n\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  var state = this._readableState;\n  var nOrig = n;\n  if (typeof n !== 'number' || n > 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.\n\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  } // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n  // if we need a readable event, then we need to do some reading.\n\n\n  var doRead = state.needReadable;\n  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some\n\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  } // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n\n\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  }\n\n  if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true; // if the length is currently zero, then we *need* a readable event.\n\n    if (state.length === 0) state.needReadable = true; // call internal read method\n\n    this._read(state.highWaterMark);\n\n    state.sync = false;\n  } // If _read pushed data synchronously, then `reading` will be false,\n  // and we need to re-evaluate how much data we can return to the user.\n\n\n  if (doRead && !state.reading) n = howMuchToRead(nOrig, state);\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  }\n\n  state.length -= n; // If we have nothing in the buffer, then we want to know\n  // as soon as we *do* get something into the buffer.\n\n  if (state.length === 0 && !state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.\n\n  if (nOrig !== n && state.ended && state.length === 0) endReadable(this);\n  if (ret !== null) this.emit('data', ret);\n  return ret;\n};\n\nfunction chunkInvalid(state, chunk) {\n  var er = null;\n\n  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n\n  return er;\n}\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n\n  state.ended = true; // emit 'readable' now to make sure it gets picked up.\n\n  emitReadable(stream);\n} // Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\n\n\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n} // at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\n\n\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    processNextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length) // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n\n  state.readingMore = false;\n} // abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\n\n\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n  var endFn = doEnd ? onend : cleanup;\n  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);\n  dest.on('unpipe', onunpipe);\n\n  function onunpipe(readable) {\n    debug('onunpipe');\n\n    if (readable === src) {\n      cleanup();\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  } // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n\n\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n  var cleanedUp = false;\n\n  function cleanup() {\n    debug('cleanup'); // cleanup event handlers once the pipe is broken\n\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', cleanup);\n    src.removeListener('data', ondata);\n    cleanedUp = true; // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  src.on('data', ondata);\n\n  function ondata(chunk) {\n    debug('ondata');\n    var ret = dest.write(chunk);\n\n    if (false === ret) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      if (state.pipesCount === 1 && state.pipes[0] === dest && src.listenerCount('data') === 1 && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n      }\n\n      src.pause();\n    }\n  } // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n\n\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  } // This is a brutally ugly hack to make sure that our error handler\n  // is attached before any userland ones.  NEVER DO THIS.\n\n\n  if (!dest._events || !dest._events.error) dest.on('error', onerror);else if (isArray(dest._events.error)) dest._events.error.unshift(onerror);else dest._events.error = [onerror, dest._events.error]; // Both close and finish should trigger unpipe, but only once.\n\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n\n  dest.once('close', onclose);\n\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  } // tell the dest that it's being piped to\n\n\n  dest.emit('pipe', src); // start the flow if it hasn't been started already.\n\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState; // if we're not piping anywhere, then do nothing.\n\n  if (state.pipesCount === 0) return this; // just one destination.  most common case.\n\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n    if (!dest) dest = state.pipes; // got a match.\n\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this);\n    return this;\n  } // slow case. multiple pipe destinations.\n\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var _i = 0; _i < len; _i++) {\n      dests[_i].emit('unpipe', this);\n    }\n\n    return this;\n  } // try to find the right one.\n\n\n  var i = indexOf(state.pipes, dest);\n  if (i === -1) return this;\n  state.pipes.splice(i, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n  dest.emit('unpipe', this);\n  return this;\n}; // set up data events if they are asked for\n// Ensure readable listeners eventually get something\n\n\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn); // If listening to data, and it has not explicitly been paused,\n  // then call resume to start the flow of data on the next tick.\n\n  if (ev === 'data' && false !== this._readableState.flowing) {\n    this.resume();\n  }\n\n  if (ev === 'readable' && !this._readableState.endEmitted) {\n    var state = this._readableState;\n\n    if (!state.readableListening) {\n      state.readableListening = true;\n      state.emittedReadable = false;\n      state.needReadable = true;\n\n      if (!state.reading) {\n        processNextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this, state);\n      }\n    }\n  }\n\n  return res;\n};\n\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n} // pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\n\n\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    processNextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n\n  if (state.flowing) {\n    do {\n      var chunk = stream.read();\n    } while (null !== chunk && state.flowing);\n  }\n} // wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\n\n\nReadable.prototype.wrap = function (stream) {\n  var state = this._readableState;\n  var paused = false;\n  var self = this;\n  stream.on('end', function () {\n    debug('wrapped end');\n\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) self.push(chunk);\n    }\n\n    self.push(null);\n  });\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode\n\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n    var ret = self.push(chunk);\n\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  }); // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  } // proxy certain important events.\n\n\n  var events = ['error', 'close', 'destroy', 'pause', 'resume'];\n  forEach(events, function (ev) {\n    stream.on(ev, self.emit.bind(self, ev));\n  }); // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n\n  self._read = function (n) {\n    debug('wrapped _read', n);\n\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return self;\n}; // exposed for testing purposes only.\n\n\nReadable._fromList = fromList; // Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n\nfunction fromList(n, state) {\n  var list = state.buffer;\n  var length = state.length;\n  var stringMode = !!state.decoder;\n  var objectMode = !!state.objectMode;\n  var ret; // nothing in the list, definitely empty.\n\n  if (list.length === 0) return null;\n  if (length === 0) ret = null;else if (objectMode) ret = list.shift();else if (!n || n >= length) {\n    // read it all, truncate the array.\n    if (stringMode) ret = list.join('');else if (list.length === 1) ret = list[0];else ret = Buffer.concat(list, length);\n    list.length = 0;\n  } else {\n    // read just some of it.\n    if (n < list[0].length) {\n      // just take a part of the first list item.\n      // slice is the same for buffers and strings.\n      var buf = list[0];\n      ret = buf.slice(0, n);\n      list[0] = buf.slice(n);\n    } else if (n === list[0].length) {\n      // first list is a perfect match\n      ret = list.shift();\n    } else {\n      // complex case.\n      // we have enough to cover it, but it spans past the first buffer.\n      if (stringMode) ret = '';else ret = new Buffer(n);\n      var c = 0;\n\n      for (var i = 0, l = list.length; i < l && c < n; i++) {\n        var buf = list[0];\n        var cpy = Math.min(n - c, buf.length);\n        if (stringMode) ret += buf.slice(0, cpy);else buf.copy(ret, c, 0, cpy);\n        if (cpy < buf.length) list[0] = buf.slice(cpy);else list.shift();\n        c += cpy;\n      }\n    }\n  }\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState; // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n\n  if (state.length > 0) throw new Error('endReadable called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    processNextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction forEach(xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n\n  return -1;\n}","map":{"version":3,"names":["module","exports","Readable","processNextTick","require","isArray","Buffer","ReadableState","EE","EElistenerCount","emitter","type","listeners","length","Stream","_","EventEmitter","util","inherits","debugUtil","debug","undefined","debuglog","StringDecoder","Duplex","options","stream","objectMode","readableObjectMode","hwm","highWaterMark","defaultHwm","buffer","pipes","pipesCount","flowing","ended","endEmitted","reading","sync","needReadable","emittedReadable","readableListening","resumeScheduled","defaultEncoding","ranOut","awaitDrain","readingMore","decoder","encoding","_readableState","readable","read","_read","call","prototype","push","chunk","state","readableAddChunk","unshift","isPaused","addToFront","er","chunkInvalid","emit","onEofChunk","e","Error","skipAdd","write","emitReadable","maybeReadMore","needMoreData","setEncoding","enc","MAX_HWM","computeNewHighWaterMark","n","howMuchToRead","isNaN","nOrig","endReadable","doRead","ret","fromList","isBuffer","TypeError","end","emitReadable_","flow","maybeReadMore_","len","pipe","dest","pipeOpts","src","doEnd","process","stdout","stderr","endFn","onend","cleanup","once","on","onunpipe","ondrain","pipeOnDrain","cleanedUp","removeListener","onclose","onfinish","onerror","ondata","_writableState","needDrain","listenerCount","pause","unpipe","_events","error","resume","dests","_i","i","indexOf","splice","ev","fn","res","nReadingNextTick","addListener","self","resume_","wrap","paused","method","apply","arguments","events","forEach","bind","_fromList","list","stringMode","shift","join","concat","buf","slice","c","l","cpy","Math","min","copy","endReadableNT","xs","f","x"],"sources":["G:/anaconda/project/download files/last down/New folder/desktop/Samrat/protfolio/protfolio/node_modules/concat-stream/node_modules/readable-stream/lib/_stream_readable.js"],"sourcesContent":["'use strict';\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar processNextTick = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n/*<replacement>*/\nvar Buffer = require('buffer').Buffer;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\nvar EE = require('events');\n\n/*<replacement>*/\nvar EElistenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream;\n(function () {\n  try {\n    Stream = require('st' + 'ream');\n  } catch (_) {} finally {\n    if (!Stream) Stream = require('events').EventEmitter;\n  }\n})();\n/*</replacement>*/\n\nvar Buffer = require('buffer').Buffer;\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar debugUtil = require('util');\nvar debug = undefined;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nvar Duplex;\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = ~ ~this.highWaterMark;\n\n  this.buffer = [];\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // when piping, we only care about 'readable' events that happen\n  // after read()ing all the bytes and not getting any pushback.\n  this.ranOut = false;\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nvar Duplex;\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  if (options && typeof options.read === 'function') this._read = options.read;\n\n  Stream.call(this);\n}\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n\n  if (!state.objectMode && typeof chunk === 'string') {\n    encoding = encoding || state.defaultEncoding;\n    if (encoding !== state.encoding) {\n      chunk = new Buffer(chunk, encoding);\n      encoding = '';\n    }\n  }\n\n  return readableAddChunk(this, state, chunk, encoding, false);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  var state = this._readableState;\n  return readableAddChunk(this, state, chunk, '', true);\n};\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\nfunction readableAddChunk(stream, state, chunk, encoding, addToFront) {\n  var er = chunkInvalid(state, chunk);\n  if (er) {\n    stream.emit('error', er);\n  } else if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else if (state.objectMode || chunk && chunk.length > 0) {\n    if (state.ended && !addToFront) {\n      var e = new Error('stream.push() after EOF');\n      stream.emit('error', e);\n    } else if (state.endEmitted && addToFront) {\n      var e = new Error('stream.unshift() after end event');\n      stream.emit('error', e);\n    } else {\n      var skipAdd;\n      if (state.decoder && !addToFront && !encoding) {\n        chunk = state.decoder.write(chunk);\n        skipAdd = !state.objectMode && chunk.length === 0;\n      }\n\n      if (!addToFront) state.reading = false;\n\n      // Don't add to the buffer if we've decoded to an empty string chunk and\n      // we're not in object mode\n      if (!skipAdd) {\n        // if we want the data now, just emit it.\n        if (state.flowing && state.length === 0 && !state.sync) {\n          stream.emit('data', chunk);\n          stream.read(0);\n        } else {\n          // update the buffer info.\n          state.length += state.objectMode ? 1 : chunk.length;\n          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n          if (state.needReadable) emitReadable(stream);\n        }\n      }\n\n      maybeReadMore(stream, state);\n    }\n  } else if (!addToFront) {\n    state.reading = false;\n  }\n\n  return needMoreData(state);\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 8MB\nvar MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\nfunction howMuchToRead(n, state) {\n  if (state.length === 0 && state.ended) return 0;\n\n  if (state.objectMode) return n === 0 ? 0 : 1;\n\n  if (n === null || isNaN(n)) {\n    // only flow one buffer at a time\n    if (state.flowing && state.buffer.length) return state.buffer[0].length;else return state.length;\n  }\n\n  if (n <= 0) return 0;\n\n  // If we're asking for more than the target buffer level,\n  // then raise the water mark.  Bump up to the next highest\n  // power of 2, to prevent increasing it excessively in tiny\n  // amounts.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n\n  // don't have that much.  return null, unless we've ended.\n  if (n > state.length) {\n    if (!state.ended) {\n      state.needReadable = true;\n      return 0;\n    } else {\n      return state.length;\n    }\n  }\n\n  return n;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (typeof n !== 'number' || n > 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  }\n\n  if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n  }\n\n  // If _read pushed data synchronously, then `reading` will be false,\n  // and we need to re-evaluate how much data we can return to the user.\n  if (doRead && !state.reading) n = howMuchToRead(nOrig, state);\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  }\n\n  state.length -= n;\n\n  // If we have nothing in the buffer, then we want to know\n  // as soon as we *do* get something into the buffer.\n  if (state.length === 0 && !state.ended) state.needReadable = true;\n\n  // If we tried to read() past the EOF, then emit end on the next tick.\n  if (nOrig !== n && state.ended && state.length === 0) endReadable(this);\n\n  if (ret !== null) this.emit('data', ret);\n\n  return ret;\n};\n\nfunction chunkInvalid(state, chunk) {\n  var er = null;\n  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    processNextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n\n  var endFn = doEnd ? onend : cleanup;\n  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable) {\n    debug('onunpipe');\n    if (readable === src) {\n      cleanup();\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', cleanup);\n    src.removeListener('data', ondata);\n\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    var ret = dest.write(chunk);\n    if (false === ret) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      if (state.pipesCount === 1 && state.pipes[0] === dest && src.listenerCount('data') === 1 && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n  // This is a brutally ugly hack to make sure that our error handler\n  // is attached before any userland ones.  NEVER DO THIS.\n  if (!dest._events || !dest._events.error) dest.on('error', onerror);else if (isArray(dest._events.error)) dest._events.error.unshift(onerror);else dest._events.error = [onerror, dest._events.error];\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var _i = 0; _i < len; _i++) {\n      dests[_i].emit('unpipe', this);\n    }return this;\n  }\n\n  // try to find the right one.\n  var i = indexOf(state.pipes, dest);\n  if (i === -1) return this;\n\n  state.pipes.splice(i, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  // If listening to data, and it has not explicitly been paused,\n  // then call resume to start the flow of data on the next tick.\n  if (ev === 'data' && false !== this._readableState.flowing) {\n    this.resume();\n  }\n\n  if (ev === 'readable' && !this._readableState.endEmitted) {\n    var state = this._readableState;\n    if (!state.readableListening) {\n      state.readableListening = true;\n      state.emittedReadable = false;\n      state.needReadable = true;\n      if (!state.reading) {\n        processNextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this, state);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    processNextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  if (state.flowing) {\n    do {\n      var chunk = stream.read();\n    } while (null !== chunk && state.flowing);\n  }\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var state = this._readableState;\n  var paused = false;\n\n  var self = this;\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) self.push(chunk);\n    }\n\n    self.push(null);\n  });\n\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = self.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  var events = ['error', 'close', 'destroy', 'pause', 'resume'];\n  forEach(events, function (ev) {\n    stream.on(ev, self.emit.bind(self, ev));\n  });\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  self._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return self;\n};\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\nfunction fromList(n, state) {\n  var list = state.buffer;\n  var length = state.length;\n  var stringMode = !!state.decoder;\n  var objectMode = !!state.objectMode;\n  var ret;\n\n  // nothing in the list, definitely empty.\n  if (list.length === 0) return null;\n\n  if (length === 0) ret = null;else if (objectMode) ret = list.shift();else if (!n || n >= length) {\n    // read it all, truncate the array.\n    if (stringMode) ret = list.join('');else if (list.length === 1) ret = list[0];else ret = Buffer.concat(list, length);\n    list.length = 0;\n  } else {\n    // read just some of it.\n    if (n < list[0].length) {\n      // just take a part of the first list item.\n      // slice is the same for buffers and strings.\n      var buf = list[0];\n      ret = buf.slice(0, n);\n      list[0] = buf.slice(n);\n    } else if (n === list[0].length) {\n      // first list is a perfect match\n      ret = list.shift();\n    } else {\n      // complex case.\n      // we have enough to cover it, but it spans past the first buffer.\n      if (stringMode) ret = '';else ret = new Buffer(n);\n\n      var c = 0;\n      for (var i = 0, l = list.length; i < l && c < n; i++) {\n        var buf = list[0];\n        var cpy = Math.min(n - c, buf.length);\n\n        if (stringMode) ret += buf.slice(0, cpy);else buf.copy(ret, c, 0, cpy);\n\n        if (cpy < buf.length) list[0] = buf.slice(cpy);else list.shift();\n\n        c += cpy;\n      }\n    }\n  }\n\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('endReadable called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    processNextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction forEach(xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}