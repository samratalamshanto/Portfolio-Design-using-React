{"ast":null,"code":"/**\n * Node.js Bar Module\n */\nvar utils = exports;\n\nvar crypto = require('crypto');\n/**\n * Merge `a` and `b` into new object `c`\n */\n\n\nfunction merge(a, b) {\n  var c = {};\n  /**\n   * Copy all properties of a into c\n   */\n\n  if (a) {\n    for (var i in a) {\n      if (a.hasOwnProperty(i)) {\n        c[i] = a[i];\n      }\n    }\n  }\n  /**\n   * Do same with b, but merge existing properties\n   */\n\n\n  if (b) {\n    for (var i in b) {\n      if (b.hasOwnProperty(i)) {\n        c[i] = typeof b[i] === 'object' && typeof c[i] === 'object' ? merge(c[i], b[i]) : b[i];\n      }\n    }\n  }\n\n  return c;\n}\n\n;\nutils.merge = merge;\n/**\n * Saturate object with binding saturator methods\n */\n\nfunction saturate(obj, saturator) {\n  for (var i in saturator) {\n    if (typeof saturator[i] === 'function') {\n      obj[i] = saturator[i].bind(saturator);\n    }\n  }\n\n  ;\n  return obj;\n}\n\n;\nutils.saturate = saturate;\n/**\n * Calculate sha1 hash of data\n */\n\nfunction sha1(data) {\n  var hash = crypto.createHash('sha1');\n  hash.update(data);\n  return hash.digest('base64');\n}\n\n;\nutils.sha1 = sha1;","map":{"version":3,"names":["utils","exports","crypto","require","merge","a","b","c","i","hasOwnProperty","saturate","obj","saturator","bind","sha1","data","hash","createHash","update","digest"],"sources":["G:/anaconda/project/download files/last down/New folder/desktop/Samrat/protfolio/protfolio/node_modules/bar/lib/bar/utils.js"],"sourcesContent":["/**\n * Node.js Bar Module\n */\n\nvar utils = exports;\n\nvar crypto = require('crypto');\n\n/**\n * Merge `a` and `b` into new object `c`\n */\nfunction merge(a, b) {\n  var c = {};\n\n  /**\n   * Copy all properties of a into c\n   */\n  if (a) {\n    for (var i in a) {\n      if (a.hasOwnProperty(i)) {\n        c[i] = a[i];\n      }\n    }\n  }\n\n  /**\n   * Do same with b, but merge existing properties\n   */\n  if (b) {\n    for (var i in b) {\n      if (b.hasOwnProperty(i)) {\n        c[i] = typeof b[i] === 'object' &&\n               typeof c[i] === 'object' ?\n                   merge(c[i], b[i])\n                   :\n                   b[i];\n      }\n    }\n  }\n\n  return c;\n};\nutils.merge = merge;\n\n/**\n * Saturate object with binding saturator methods\n */\nfunction saturate(obj, saturator) {\n  for (var i in saturator) {\n    if (typeof saturator[i] === 'function') {\n      obj[i] = saturator[i].bind(saturator);\n    }\n  };\n\n  return obj;\n};\nutils.saturate = saturate;\n\n/**\n * Calculate sha1 hash of data\n */\nfunction sha1(data) {\n  var hash = crypto.createHash('sha1');\n\n  hash.update(data);\n\n  return hash.digest('base64');\n};\nutils.sha1 = sha1;\n"],"mappings":"AAAA;AACA;AACA;AAEA,IAAIA,KAAK,GAAGC,OAAZ;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;AAEA;AACA;AACA;;;AACA,SAASC,KAAT,CAAeC,CAAf,EAAkBC,CAAlB,EAAqB;EACnB,IAAIC,CAAC,GAAG,EAAR;EAEA;AACF;AACA;;EACE,IAAIF,CAAJ,EAAO;IACL,KAAK,IAAIG,CAAT,IAAcH,CAAd,EAAiB;MACf,IAAIA,CAAC,CAACI,cAAF,CAAiBD,CAAjB,CAAJ,EAAyB;QACvBD,CAAC,CAACC,CAAD,CAAD,GAAOH,CAAC,CAACG,CAAD,CAAR;MACD;IACF;EACF;EAED;AACF;AACA;;;EACE,IAAIF,CAAJ,EAAO;IACL,KAAK,IAAIE,CAAT,IAAcF,CAAd,EAAiB;MACf,IAAIA,CAAC,CAACG,cAAF,CAAiBD,CAAjB,CAAJ,EAAyB;QACvBD,CAAC,CAACC,CAAD,CAAD,GAAO,OAAOF,CAAC,CAACE,CAAD,CAAR,KAAgB,QAAhB,IACA,OAAOD,CAAC,CAACC,CAAD,CAAR,KAAgB,QADhB,GAEIJ,KAAK,CAACG,CAAC,CAACC,CAAD,CAAF,EAAOF,CAAC,CAACE,CAAD,CAAR,CAFT,GAIIF,CAAC,CAACE,CAAD,CAJZ;MAKD;IACF;EACF;;EAED,OAAOD,CAAP;AACD;;AAAA;AACDP,KAAK,CAACI,KAAN,GAAcA,KAAd;AAEA;AACA;AACA;;AACA,SAASM,QAAT,CAAkBC,GAAlB,EAAuBC,SAAvB,EAAkC;EAChC,KAAK,IAAIJ,CAAT,IAAcI,SAAd,EAAyB;IACvB,IAAI,OAAOA,SAAS,CAACJ,CAAD,CAAhB,KAAwB,UAA5B,EAAwC;MACtCG,GAAG,CAACH,CAAD,CAAH,GAASI,SAAS,CAACJ,CAAD,CAAT,CAAaK,IAAb,CAAkBD,SAAlB,CAAT;IACD;EACF;;EAAA;EAED,OAAOD,GAAP;AACD;;AAAA;AACDX,KAAK,CAACU,QAAN,GAAiBA,QAAjB;AAEA;AACA;AACA;;AACA,SAASI,IAAT,CAAcC,IAAd,EAAoB;EAClB,IAAIC,IAAI,GAAGd,MAAM,CAACe,UAAP,CAAkB,MAAlB,CAAX;EAEAD,IAAI,CAACE,MAAL,CAAYH,IAAZ;EAEA,OAAOC,IAAI,CAACG,MAAL,CAAY,QAAZ,CAAP;AACD;;AAAA;AACDnB,KAAK,CAACc,IAAN,GAAaA,IAAb"},"metadata":{},"sourceType":"script"}