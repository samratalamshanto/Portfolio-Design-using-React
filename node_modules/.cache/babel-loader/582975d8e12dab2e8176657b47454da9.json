{"ast":null,"code":"exports = module.exports = function (bytes) {\n  var i = 0;\n\n  while (i < bytes.length) {\n    if ( // ASCII\n    bytes[i] == 0x09 || bytes[i] == 0x0A || bytes[i] == 0x0D || 0x20 <= bytes[i] && bytes[i] <= 0x7E) {\n      i += 1;\n      continue;\n    }\n\n    if ( // non-overlong 2-byte\n    0xC2 <= bytes[i] && bytes[i] <= 0xDF && 0x80 <= bytes[i + 1] && bytes[i + 1] <= 0xBF) {\n      i += 2;\n      continue;\n    }\n\n    if ( // excluding overlongs\n    bytes[i] == 0xE0 && 0xA0 <= bytes[i + 1] && bytes[i + 1] <= 0xBF && 0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF || // straight 3-byte\n    (0xE1 <= bytes[i] && bytes[i] <= 0xEC || bytes[i] == 0xEE || bytes[i] == 0xEF) && 0x80 <= bytes[i + 1] && bytes[i + 1] <= 0xBF && 0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF || // excluding surrogates\n    bytes[i] == 0xED && 0x80 <= bytes[i + 1] && bytes[i + 1] <= 0x9F && 0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF) {\n      i += 3;\n      continue;\n    }\n\n    if ( // planes 1-3\n    bytes[i] == 0xF0 && 0x90 <= bytes[i + 1] && bytes[i + 1] <= 0xBF && 0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF && 0x80 <= bytes[i + 3] && bytes[i + 3] <= 0xBF || // planes 4-15\n    0xF1 <= bytes[i] && bytes[i] <= 0xF3 && 0x80 <= bytes[i + 1] && bytes[i + 1] <= 0xBF && 0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF && 0x80 <= bytes[i + 3] && bytes[i + 3] <= 0xBF || // plane 16\n    bytes[i] == 0xF4 && 0x80 <= bytes[i + 1] && bytes[i + 1] <= 0x8F && 0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF && 0x80 <= bytes[i + 3] && bytes[i + 3] <= 0xBF) {\n      i += 4;\n      continue;\n    }\n\n    return false;\n  }\n\n  return true;\n};","map":{"version":3,"names":["exports","module","bytes","i","length"],"sources":["G:/anaconda/project/download files/last down/New folder/desktop/Samrat/protfolio/protfolio/node_modules/is-utf8/is-utf8.js"],"sourcesContent":["\nexports = module.exports = function(bytes)\n{\n    var i = 0;\n    while(i < bytes.length)\n    {\n        if(     (// ASCII\n                    bytes[i] == 0x09 ||\n                    bytes[i] == 0x0A ||\n                    bytes[i] == 0x0D ||\n                    (0x20 <= bytes[i] && bytes[i] <= 0x7E)\n                )\n          ) {\n              i += 1;\n              continue;\n          }\n\n        if(     (// non-overlong 2-byte\n                    (0xC2 <= bytes[i] && bytes[i] <= 0xDF) &&\n                    (0x80 <= bytes[i+1] && bytes[i+1] <= 0xBF)\n                )\n          ) {\n              i += 2;\n              continue;\n          }\n\n        if(     (// excluding overlongs\n                    bytes[i] == 0xE0 &&\n                    (0xA0 <= bytes[i + 1] && bytes[i + 1] <= 0xBF) &&\n                    (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF)\n                ) ||\n                (// straight 3-byte\n                 ((0xE1 <= bytes[i] && bytes[i] <= 0xEC) ||\n                  bytes[i] == 0xEE ||\n                  bytes[i] == 0xEF) &&\n                 (0x80 <= bytes[i + 1] && bytes[i+1] <= 0xBF) &&\n                 (0x80 <= bytes[i+2] && bytes[i+2] <= 0xBF)\n                ) ||\n                (// excluding surrogates\n                 bytes[i] == 0xED &&\n                 (0x80 <= bytes[i+1] && bytes[i+1] <= 0x9F) &&\n                 (0x80 <= bytes[i+2] && bytes[i+2] <= 0xBF)\n                )\n          ) {\n              i += 3;\n              continue;\n          }\n\n        if(     (// planes 1-3\n                    bytes[i] == 0xF0 &&\n                    (0x90 <= bytes[i + 1] && bytes[i + 1] <= 0xBF) &&\n                    (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF) &&\n                    (0x80 <= bytes[i + 3] && bytes[i + 3] <= 0xBF)\n                ) ||\n                (// planes 4-15\n                 (0xF1 <= bytes[i] && bytes[i] <= 0xF3) &&\n                 (0x80 <= bytes[i + 1] && bytes[i + 1] <= 0xBF) &&\n                 (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF) &&\n                 (0x80 <= bytes[i + 3] && bytes[i + 3] <= 0xBF)\n                ) ||\n                (// plane 16\n                 bytes[i] == 0xF4 &&\n                 (0x80 <= bytes[i + 1] && bytes[i + 1] <= 0x8F) &&\n                 (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF) &&\n                 (0x80 <= bytes[i + 3] && bytes[i + 3] <= 0xBF)\n                )\n          ) {\n              i += 4;\n              continue;\n          }\n\n        return false;\n    }\n\n    return true;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}