{"ast":null,"code":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\nmodule.exports = Readable;\n/*<replacement>*/\n\nvar isArray = require('isarray');\n/*</replacement>*/\n\n/*<replacement>*/\n\n\nvar Buffer = require('buffer').Buffer;\n/*</replacement>*/\n\n\nReadable.ReadableState = ReadableState;\n\nvar EE = require('events').EventEmitter;\n/*<replacement>*/\n\n\nif (!EE.listenerCount) EE.listenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\nvar Stream = require('stream');\n/*<replacement>*/\n\n\nvar util = require('core-util-is');\n\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar StringDecoder;\nutil.inherits(Readable, Stream);\n\nfunction ReadableState(options, stream) {\n  options = options || {}; // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n\n  var hwm = options.highWaterMark;\n  this.highWaterMark = hwm || hwm === 0 ? hwm : 16 * 1024; // cast to ints.\n\n  this.highWaterMark = ~~this.highWaterMark;\n  this.buffer = [];\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = false;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false; // In streams that never have any data, and do push(null) right away,\n  // the consumer can miss the 'end' event if they do some I/O before\n  // consuming the stream.  So, we don't emit('end') until some reading\n  // happens.\n\n  this.calledRead = false; // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, becuase any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n\n  this.sync = true; // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false; // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n\n  this.objectMode = !!options.objectMode; // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // when piping, we only care about 'readable' events that happen\n  // after read()ing all the bytes and not getting any pushback.\n\n  this.ranOut = false; // the number of writers that are awaiting a drain event in .pipe()s\n\n  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled\n\n  this.readingMore = false;\n  this.decoder = null;\n  this.encoding = null;\n\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  if (!(this instanceof Readable)) return new Readable(options);\n  this._readableState = new ReadableState(options, this); // legacy\n\n  this.readable = true;\n  Stream.call(this);\n} // Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\n\n\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n\n  if (typeof chunk === 'string' && !state.objectMode) {\n    encoding = encoding || state.defaultEncoding;\n\n    if (encoding !== state.encoding) {\n      chunk = new Buffer(chunk, encoding);\n      encoding = '';\n    }\n  }\n\n  return readableAddChunk(this, state, chunk, encoding, false);\n}; // Unshift should *always* be something directly out of read()\n\n\nReadable.prototype.unshift = function (chunk) {\n  var state = this._readableState;\n  return readableAddChunk(this, state, chunk, '', true);\n};\n\nfunction readableAddChunk(stream, state, chunk, encoding, addToFront) {\n  var er = chunkInvalid(state, chunk);\n\n  if (er) {\n    stream.emit('error', er);\n  } else if (chunk === null || chunk === undefined) {\n    state.reading = false;\n    if (!state.ended) onEofChunk(stream, state);\n  } else if (state.objectMode || chunk && chunk.length > 0) {\n    if (state.ended && !addToFront) {\n      var e = new Error('stream.push() after EOF');\n      stream.emit('error', e);\n    } else if (state.endEmitted && addToFront) {\n      var e = new Error('stream.unshift() after end event');\n      stream.emit('error', e);\n    } else {\n      if (state.decoder && !addToFront && !encoding) chunk = state.decoder.write(chunk); // update the buffer info.\n\n      state.length += state.objectMode ? 1 : chunk.length;\n\n      if (addToFront) {\n        state.buffer.unshift(chunk);\n      } else {\n        state.reading = false;\n        state.buffer.push(chunk);\n      }\n\n      if (state.needReadable) emitReadable(stream);\n      maybeReadMore(stream, state);\n    }\n  } else if (!addToFront) {\n    state.reading = false;\n  }\n\n  return needMoreData(state);\n} // if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\n\n\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n} // backwards compatibility.\n\n\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n}; // Don't raise the hwm > 128MB\n\n\nvar MAX_HWM = 0x800000;\n\nfunction roundUpToNextPowerOf2(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2\n    n--;\n\n    for (var p = 1; p < 32; p <<= 1) n |= n >> p;\n\n    n++;\n  }\n\n  return n;\n}\n\nfunction howMuchToRead(n, state) {\n  if (state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return n === 0 ? 0 : 1;\n\n  if (n === null || isNaN(n)) {\n    // only flow one buffer at a time\n    if (state.flowing && state.buffer.length) return state.buffer[0].length;else return state.length;\n  }\n\n  if (n <= 0) return 0; // If we're asking for more than the target buffer level,\n  // then raise the water mark.  Bump up to the next highest\n  // power of 2, to prevent increasing it excessively in tiny\n  // amounts.\n\n  if (n > state.highWaterMark) state.highWaterMark = roundUpToNextPowerOf2(n); // don't have that much.  return null, unless we've ended.\n\n  if (n > state.length) {\n    if (!state.ended) {\n      state.needReadable = true;\n      return 0;\n    } else return state.length;\n  }\n\n  return n;\n} // you can override either this method, or the async _read(n) below.\n\n\nReadable.prototype.read = function (n) {\n  var state = this._readableState;\n  state.calledRead = true;\n  var nOrig = n;\n  var ret;\n  if (typeof n !== 'number' || n > 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.\n\n  if (n === 0 && state.ended) {\n    ret = null; // In cases where the decoder did not receive enough data\n    // to produce a full chunk, then immediately received an\n    // EOF, state.buffer will contain [<Buffer >, <Buffer 00 ...>].\n    // howMuchToRead will see this and coerce the amount to\n    // read to zero (because it's looking at the length of the\n    // first <Buffer > in state.buffer), and we'll end up here.\n    //\n    // This can only happen via state.decoder -- no other venue\n    // exists for pushing a zero-length chunk into state.buffer\n    // and triggering this behavior. In this case, we return our\n    // remaining data and end the stream, if appropriate.\n\n    if (state.length > 0 && state.decoder) {\n      ret = fromList(n, state);\n      state.length -= ret.length;\n    }\n\n    if (state.length === 0) endReadable(this);\n    return ret;\n  } // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n  // if we need a readable event, then we need to do some reading.\n\n\n  var doRead = state.needReadable; // if we currently have less than the highWaterMark, then also read some\n\n  if (state.length - n <= state.highWaterMark) doRead = true; // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n\n  if (state.ended || state.reading) doRead = false;\n\n  if (doRead) {\n    state.reading = true;\n    state.sync = true; // if the length is currently zero, then we *need* a readable event.\n\n    if (state.length === 0) state.needReadable = true; // call internal read method\n\n    this._read(state.highWaterMark);\n\n    state.sync = false;\n  } // If _read called its callback synchronously, then `reading`\n  // will be false, and we need to re-evaluate how much data we\n  // can return to the user.\n\n\n  if (doRead && !state.reading) n = howMuchToRead(nOrig, state);\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  }\n\n  state.length -= n; // If we have nothing in the buffer, then we want to know\n  // as soon as we *do* get something into the buffer.\n\n  if (state.length === 0 && !state.ended) state.needReadable = true; // If we happened to read() exactly the remaining amount in the\n  // buffer, and the EOF has been seen at this point, then make sure\n  // that we emit 'end' on the very next tick.\n\n  if (state.ended && !state.endEmitted && state.length === 0) endReadable(this);\n  return ret;\n};\n\nfunction chunkInvalid(state, chunk) {\n  var er = null;\n\n  if (!Buffer.isBuffer(chunk) && 'string' !== typeof chunk && chunk !== null && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n\n  return er;\n}\n\nfunction onEofChunk(stream, state) {\n  if (state.decoder && !state.ended) {\n    var chunk = state.decoder.end();\n\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n\n  state.ended = true; // if we've ended and we have some data left, then emit\n  // 'readable' now to make sure it gets picked up.\n\n  if (state.length > 0) emitReadable(stream);else endReadable(stream);\n} // Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\n\n\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (state.emittedReadable) return;\n  state.emittedReadable = true;\n  if (state.sync) process.nextTick(function () {\n    emitReadable_(stream);\n  });else emitReadable_(stream);\n}\n\nfunction emitReadable_(stream) {\n  stream.emit('readable');\n} // at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\n\n\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    process.nextTick(function () {\n      maybeReadMore_(stream, state);\n    });\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    stream.read(0);\n    if (len === state.length) // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n\n  state.readingMore = false;\n} // abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\n\n\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n\n  state.pipesCount += 1;\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n  var endFn = doEnd ? onend : cleanup;\n  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);\n  dest.on('unpipe', onunpipe);\n\n  function onunpipe(readable) {\n    if (readable !== src) return;\n    cleanup();\n  }\n\n  function onend() {\n    dest.end();\n  } // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n\n\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  function cleanup() {\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', cleanup); // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n\n    if (!dest._writableState || dest._writableState.needDrain) ondrain();\n  } // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n\n\n  function onerror(er) {\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EE.listenerCount(dest, 'error') === 0) dest.emit('error', er);\n  } // This is a brutally ugly hack to make sure that our error handler\n  // is attached before any userland ones.  NEVER DO THIS.\n\n\n  if (!dest._events || !dest._events.error) dest.on('error', onerror);else if (isArray(dest._events.error)) dest._events.error.unshift(onerror);else dest._events.error = [onerror, dest._events.error]; // Both close and finish should trigger unpipe, but only once.\n\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n\n  dest.once('close', onclose);\n\n  function onfinish() {\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    src.unpipe(dest);\n  } // tell the dest that it's being piped to\n\n\n  dest.emit('pipe', src); // start the flow if it hasn't been started already.\n\n  if (!state.flowing) {\n    // the handler that waits for readable events after all\n    // the data gets sucked out in flow.\n    // This would be easier to follow with a .once() handler\n    // in flow(), but that is too slow.\n    this.on('readable', pipeOnReadable);\n    state.flowing = true;\n    process.nextTick(function () {\n      flow(src);\n    });\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var dest = this;\n    var state = src._readableState;\n    state.awaitDrain--;\n    if (state.awaitDrain === 0) flow(src);\n  };\n}\n\nfunction flow(src) {\n  var state = src._readableState;\n  var chunk;\n  state.awaitDrain = 0;\n\n  function write(dest, i, list) {\n    var written = dest.write(chunk);\n\n    if (false === written) {\n      state.awaitDrain++;\n    }\n  }\n\n  while (state.pipesCount && null !== (chunk = src.read())) {\n    if (state.pipesCount === 1) write(state.pipes, 0, null);else forEach(state.pipes, write);\n    src.emit('data', chunk); // if anyone needs a drain, then we have to wait for that.\n\n    if (state.awaitDrain > 0) return;\n  } // if every destination was unpiped, either before entering this\n  // function, or in the while loop, then stop flowing.\n  //\n  // NB: This is a pretty rare edge case.\n\n\n  if (state.pipesCount === 0) {\n    state.flowing = false; // if there were data event listeners added, then switch to old mode.\n\n    if (EE.listenerCount(src, 'data') > 0) emitDataEvents(src);\n    return;\n  } // at this point, no one needed a drain, so we just ran out of data\n  // on the next readable event, start it over again.\n\n\n  state.ranOut = true;\n}\n\nfunction pipeOnReadable() {\n  if (this._readableState.ranOut) {\n    this._readableState.ranOut = false;\n    flow(this);\n  }\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState; // if we're not piping anywhere, then do nothing.\n\n  if (state.pipesCount === 0) return this; // just one destination.  most common case.\n\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n    if (!dest) dest = state.pipes; // got a match.\n\n    state.pipes = null;\n    state.pipesCount = 0;\n    this.removeListener('readable', pipeOnReadable);\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this);\n    return this;\n  } // slow case. multiple pipe destinations.\n\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    this.removeListener('readable', pipeOnReadable);\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) dests[i].emit('unpipe', this);\n\n    return this;\n  } // try to find the right one.\n\n\n  var i = indexOf(state.pipes, dest);\n  if (i === -1) return this;\n  state.pipes.splice(i, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n  dest.emit('unpipe', this);\n  return this;\n}; // set up data events if they are asked for\n// Ensure readable listeners eventually get something\n\n\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n  if (ev === 'data' && !this._readableState.flowing) emitDataEvents(this);\n\n  if (ev === 'readable' && this.readable) {\n    var state = this._readableState;\n\n    if (!state.readableListening) {\n      state.readableListening = true;\n      state.emittedReadable = false;\n      state.needReadable = true;\n\n      if (!state.reading) {\n        this.read(0);\n      } else if (state.length) {\n        emitReadable(this, state);\n      }\n    }\n  }\n\n  return res;\n};\n\nReadable.prototype.addListener = Readable.prototype.on; // pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\n\nReadable.prototype.resume = function () {\n  emitDataEvents(this);\n  this.read(0);\n  this.emit('resume');\n};\n\nReadable.prototype.pause = function () {\n  emitDataEvents(this, true);\n  this.emit('pause');\n};\n\nfunction emitDataEvents(stream, startPaused) {\n  var state = stream._readableState;\n\n  if (state.flowing) {\n    // https://github.com/isaacs/readable-stream/issues/16\n    throw new Error('Cannot switch to old mode now.');\n  }\n\n  var paused = startPaused || false;\n  var readable = false; // convert to an old-style stream.\n\n  stream.readable = true;\n  stream.pipe = Stream.prototype.pipe;\n  stream.on = stream.addListener = Stream.prototype.on;\n  stream.on('readable', function () {\n    readable = true;\n    var c;\n\n    while (!paused && null !== (c = stream.read())) stream.emit('data', c);\n\n    if (c === null) {\n      readable = false;\n      stream._readableState.needReadable = true;\n    }\n  });\n\n  stream.pause = function () {\n    paused = true;\n    this.emit('pause');\n  };\n\n  stream.resume = function () {\n    paused = false;\n    if (readable) process.nextTick(function () {\n      stream.emit('readable');\n    });else this.read(0);\n    this.emit('resume');\n  }; // now make it start, just in case it hadn't already.\n\n\n  stream.emit('readable');\n} // wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\n\n\nReadable.prototype.wrap = function (stream) {\n  var state = this._readableState;\n  var paused = false;\n  var self = this;\n  stream.on('end', function () {\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) self.push(chunk);\n    }\n\n    self.push(null);\n  });\n  stream.on('data', function (chunk) {\n    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode\n    //if (state.objectMode && util.isNullOrUndefined(chunk))\n\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n    var ret = self.push(chunk);\n\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  }); // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n\n  for (var i in stream) {\n    if (typeof stream[i] === 'function' && typeof this[i] === 'undefined') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  } // proxy certain important events.\n\n\n  var events = ['error', 'close', 'destroy', 'pause', 'resume'];\n  forEach(events, function (ev) {\n    stream.on(ev, self.emit.bind(self, ev));\n  }); // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n\n  self._read = function (n) {\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return self;\n}; // exposed for testing purposes only.\n\n\nReadable._fromList = fromList; // Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n\nfunction fromList(n, state) {\n  var list = state.buffer;\n  var length = state.length;\n  var stringMode = !!state.decoder;\n  var objectMode = !!state.objectMode;\n  var ret; // nothing in the list, definitely empty.\n\n  if (list.length === 0) return null;\n  if (length === 0) ret = null;else if (objectMode) ret = list.shift();else if (!n || n >= length) {\n    // read it all, truncate the array.\n    if (stringMode) ret = list.join('');else ret = Buffer.concat(list, length);\n    list.length = 0;\n  } else {\n    // read just some of it.\n    if (n < list[0].length) {\n      // just take a part of the first list item.\n      // slice is the same for buffers and strings.\n      var buf = list[0];\n      ret = buf.slice(0, n);\n      list[0] = buf.slice(n);\n    } else if (n === list[0].length) {\n      // first list is a perfect match\n      ret = list.shift();\n    } else {\n      // complex case.\n      // we have enough to cover it, but it spans past the first buffer.\n      if (stringMode) ret = '';else ret = new Buffer(n);\n      var c = 0;\n\n      for (var i = 0, l = list.length; i < l && c < n; i++) {\n        var buf = list[0];\n        var cpy = Math.min(n - c, buf.length);\n        if (stringMode) ret += buf.slice(0, cpy);else buf.copy(ret, c, 0, cpy);\n        if (cpy < buf.length) list[0] = buf.slice(cpy);else list.shift();\n        c += cpy;\n      }\n    }\n  }\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState; // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n\n  if (state.length > 0) throw new Error('endReadable called on non-empty stream');\n\n  if (!state.endEmitted && state.calledRead) {\n    state.ended = true;\n    process.nextTick(function () {\n      // Check that we didn't get one last unshift.\n      if (!state.endEmitted && state.length === 0) {\n        state.endEmitted = true;\n        stream.readable = false;\n        stream.emit('end');\n      }\n    });\n  }\n}\n\nfunction forEach(xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n\n  return -1;\n}","map":{"version":3,"names":["module","exports","Readable","isArray","require","Buffer","ReadableState","EE","EventEmitter","listenerCount","emitter","type","listeners","length","Stream","util","inherits","StringDecoder","options","stream","hwm","highWaterMark","buffer","pipes","pipesCount","flowing","ended","endEmitted","reading","calledRead","sync","needReadable","emittedReadable","readableListening","objectMode","defaultEncoding","ranOut","awaitDrain","readingMore","decoder","encoding","_readableState","readable","call","prototype","push","chunk","state","readableAddChunk","unshift","addToFront","er","chunkInvalid","emit","undefined","onEofChunk","e","Error","write","emitReadable","maybeReadMore","needMoreData","setEncoding","enc","MAX_HWM","roundUpToNextPowerOf2","n","p","howMuchToRead","isNaN","read","nOrig","ret","fromList","endReadable","doRead","_read","isBuffer","TypeError","end","process","nextTick","emitReadable_","maybeReadMore_","len","pipe","dest","pipeOpts","src","doEnd","stdout","stderr","endFn","onend","cleanup","once","on","onunpipe","ondrain","pipeOnDrain","removeListener","onclose","onfinish","onerror","_writableState","needDrain","unpipe","_events","error","pipeOnReadable","flow","i","list","written","forEach","emitDataEvents","dests","indexOf","splice","ev","fn","res","addListener","resume","pause","startPaused","paused","c","wrap","self","method","apply","arguments","events","bind","_fromList","stringMode","shift","join","concat","buf","slice","l","cpy","Math","min","copy","xs","f","x"],"sources":["G:/anaconda/project/download files/last down/New folder/desktop/Samrat/protfolio/protfolio/node_modules/glob-stream/node_modules/readable-stream/lib/_stream_readable.js"],"sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n\n/*<replacement>*/\nvar Buffer = require('buffer').Buffer;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\nvar EE = require('events').EventEmitter;\n\n/*<replacement>*/\nif (!EE.listenerCount) EE.listenerCount = function(emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\nvar Stream = require('stream');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nfunction ReadableState(options, stream) {\n  options = options || {};\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;\n\n  // cast to ints.\n  this.highWaterMark = ~~this.highWaterMark;\n\n  this.buffer = [];\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = false;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // In streams that never have any data, and do push(null) right away,\n  // the consumer can miss the 'end' event if they do some I/O before\n  // consuming the stream.  So, we don't emit('end') until some reading\n  // happens.\n  this.calledRead = false;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, becuase any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // when piping, we only care about 'readable' events that happen\n  // after read()ing all the bytes and not getting any pushback.\n  this.ranOut = false;\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder)\n      StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  if (!(this instanceof Readable))\n    return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  Stream.call(this);\n}\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function(chunk, encoding) {\n  var state = this._readableState;\n\n  if (typeof chunk === 'string' && !state.objectMode) {\n    encoding = encoding || state.defaultEncoding;\n    if (encoding !== state.encoding) {\n      chunk = new Buffer(chunk, encoding);\n      encoding = '';\n    }\n  }\n\n  return readableAddChunk(this, state, chunk, encoding, false);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function(chunk) {\n  var state = this._readableState;\n  return readableAddChunk(this, state, chunk, '', true);\n};\n\nfunction readableAddChunk(stream, state, chunk, encoding, addToFront) {\n  var er = chunkInvalid(state, chunk);\n  if (er) {\n    stream.emit('error', er);\n  } else if (chunk === null || chunk === undefined) {\n    state.reading = false;\n    if (!state.ended)\n      onEofChunk(stream, state);\n  } else if (state.objectMode || chunk && chunk.length > 0) {\n    if (state.ended && !addToFront) {\n      var e = new Error('stream.push() after EOF');\n      stream.emit('error', e);\n    } else if (state.endEmitted && addToFront) {\n      var e = new Error('stream.unshift() after end event');\n      stream.emit('error', e);\n    } else {\n      if (state.decoder && !addToFront && !encoding)\n        chunk = state.decoder.write(chunk);\n\n      // update the buffer info.\n      state.length += state.objectMode ? 1 : chunk.length;\n      if (addToFront) {\n        state.buffer.unshift(chunk);\n      } else {\n        state.reading = false;\n        state.buffer.push(chunk);\n      }\n\n      if (state.needReadable)\n        emitReadable(stream);\n\n      maybeReadMore(stream, state);\n    }\n  } else if (!addToFront) {\n    state.reading = false;\n  }\n\n  return needMoreData(state);\n}\n\n\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended &&\n         (state.needReadable ||\n          state.length < state.highWaterMark ||\n          state.length === 0);\n}\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function(enc) {\n  if (!StringDecoder)\n    StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n};\n\n// Don't raise the hwm > 128MB\nvar MAX_HWM = 0x800000;\nfunction roundUpToNextPowerOf2(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2\n    n--;\n    for (var p = 1; p < 32; p <<= 1) n |= n >> p;\n    n++;\n  }\n  return n;\n}\n\nfunction howMuchToRead(n, state) {\n  if (state.length === 0 && state.ended)\n    return 0;\n\n  if (state.objectMode)\n    return n === 0 ? 0 : 1;\n\n  if (n === null || isNaN(n)) {\n    // only flow one buffer at a time\n    if (state.flowing && state.buffer.length)\n      return state.buffer[0].length;\n    else\n      return state.length;\n  }\n\n  if (n <= 0)\n    return 0;\n\n  // If we're asking for more than the target buffer level,\n  // then raise the water mark.  Bump up to the next highest\n  // power of 2, to prevent increasing it excessively in tiny\n  // amounts.\n  if (n > state.highWaterMark)\n    state.highWaterMark = roundUpToNextPowerOf2(n);\n\n  // don't have that much.  return null, unless we've ended.\n  if (n > state.length) {\n    if (!state.ended) {\n      state.needReadable = true;\n      return 0;\n    } else\n      return state.length;\n  }\n\n  return n;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function(n) {\n  var state = this._readableState;\n  state.calledRead = true;\n  var nOrig = n;\n  var ret;\n\n  if (typeof n !== 'number' || n > 0)\n    state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 &&\n      state.needReadable &&\n      (state.length >= state.highWaterMark || state.ended)) {\n    emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    ret = null;\n\n    // In cases where the decoder did not receive enough data\n    // to produce a full chunk, then immediately received an\n    // EOF, state.buffer will contain [<Buffer >, <Buffer 00 ...>].\n    // howMuchToRead will see this and coerce the amount to\n    // read to zero (because it's looking at the length of the\n    // first <Buffer > in state.buffer), and we'll end up here.\n    //\n    // This can only happen via state.decoder -- no other venue\n    // exists for pushing a zero-length chunk into state.buffer\n    // and triggering this behavior. In this case, we return our\n    // remaining data and end the stream, if appropriate.\n    if (state.length > 0 && state.decoder) {\n      ret = fromList(n, state);\n      state.length -= ret.length;\n    }\n\n    if (state.length === 0)\n      endReadable(this);\n\n    return ret;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length - n <= state.highWaterMark)\n    doRead = true;\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading)\n    doRead = false;\n\n  if (doRead) {\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0)\n      state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n  }\n\n  // If _read called its callback synchronously, then `reading`\n  // will be false, and we need to re-evaluate how much data we\n  // can return to the user.\n  if (doRead && !state.reading)\n    n = howMuchToRead(nOrig, state);\n\n  if (n > 0)\n    ret = fromList(n, state);\n  else\n    ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  }\n\n  state.length -= n;\n\n  // If we have nothing in the buffer, then we want to know\n  // as soon as we *do* get something into the buffer.\n  if (state.length === 0 && !state.ended)\n    state.needReadable = true;\n\n  // If we happened to read() exactly the remaining amount in the\n  // buffer, and the EOF has been seen at this point, then make sure\n  // that we emit 'end' on the very next tick.\n  if (state.ended && !state.endEmitted && state.length === 0)\n    endReadable(this);\n\n  return ret;\n};\n\nfunction chunkInvalid(state, chunk) {\n  var er = null;\n  if (!Buffer.isBuffer(chunk) &&\n      'string' !== typeof chunk &&\n      chunk !== null &&\n      chunk !== undefined &&\n      !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\n\nfunction onEofChunk(stream, state) {\n  if (state.decoder && !state.ended) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // if we've ended and we have some data left, then emit\n  // 'readable' now to make sure it gets picked up.\n  if (state.length > 0)\n    emitReadable(stream);\n  else\n    endReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (state.emittedReadable)\n    return;\n\n  state.emittedReadable = true;\n  if (state.sync)\n    process.nextTick(function() {\n      emitReadable_(stream);\n    });\n  else\n    emitReadable_(stream);\n}\n\nfunction emitReadable_(stream) {\n  stream.emit('readable');\n}\n\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    process.nextTick(function() {\n      maybeReadMore_(stream, state);\n    });\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended &&\n         state.length < state.highWaterMark) {\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;\n    else\n      len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function(n) {\n  this.emit('error', new Error('not implemented'));\n};\n\nReadable.prototype.pipe = function(dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&\n              dest !== process.stdout &&\n              dest !== process.stderr;\n\n  var endFn = doEnd ? onend : cleanup;\n  if (state.endEmitted)\n    process.nextTick(endFn);\n  else\n    src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable) {\n    if (readable !== src) return;\n    cleanup();\n  }\n\n  function onend() {\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  function cleanup() {\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', cleanup);\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (!dest._writableState || dest._writableState.needDrain)\n      ondrain();\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EE.listenerCount(dest, 'error') === 0)\n      dest.emit('error', er);\n  }\n  // This is a brutally ugly hack to make sure that our error handler\n  // is attached before any userland ones.  NEVER DO THIS.\n  if (!dest._events || !dest._events.error)\n    dest.on('error', onerror);\n  else if (isArray(dest._events.error))\n    dest._events.error.unshift(onerror);\n  else\n    dest._events.error = [onerror, dest._events.error];\n\n\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    // the handler that waits for readable events after all\n    // the data gets sucked out in flow.\n    // This would be easier to follow with a .once() handler\n    // in flow(), but that is too slow.\n    this.on('readable', pipeOnReadable);\n\n    state.flowing = true;\n    process.nextTick(function() {\n      flow(src);\n    });\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function() {\n    var dest = this;\n    var state = src._readableState;\n    state.awaitDrain--;\n    if (state.awaitDrain === 0)\n      flow(src);\n  };\n}\n\nfunction flow(src) {\n  var state = src._readableState;\n  var chunk;\n  state.awaitDrain = 0;\n\n  function write(dest, i, list) {\n    var written = dest.write(chunk);\n    if (false === written) {\n      state.awaitDrain++;\n    }\n  }\n\n  while (state.pipesCount && null !== (chunk = src.read())) {\n\n    if (state.pipesCount === 1)\n      write(state.pipes, 0, null);\n    else\n      forEach(state.pipes, write);\n\n    src.emit('data', chunk);\n\n    // if anyone needs a drain, then we have to wait for that.\n    if (state.awaitDrain > 0)\n      return;\n  }\n\n  // if every destination was unpiped, either before entering this\n  // function, or in the while loop, then stop flowing.\n  //\n  // NB: This is a pretty rare edge case.\n  if (state.pipesCount === 0) {\n    state.flowing = false;\n\n    // if there were data event listeners added, then switch to old mode.\n    if (EE.listenerCount(src, 'data') > 0)\n      emitDataEvents(src);\n    return;\n  }\n\n  // at this point, no one needed a drain, so we just ran out of data\n  // on the next readable event, start it over again.\n  state.ranOut = true;\n}\n\nfunction pipeOnReadable() {\n  if (this._readableState.ranOut) {\n    this._readableState.ranOut = false;\n    flow(this);\n  }\n}\n\n\nReadable.prototype.unpipe = function(dest) {\n  var state = this._readableState;\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0)\n    return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes)\n      return this;\n\n    if (!dest)\n      dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    this.removeListener('readable', pipeOnReadable);\n    state.flowing = false;\n    if (dest)\n      dest.emit('unpipe', this);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    this.removeListener('readable', pipeOnReadable);\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++)\n      dests[i].emit('unpipe', this);\n    return this;\n  }\n\n  // try to find the right one.\n  var i = indexOf(state.pipes, dest);\n  if (i === -1)\n    return this;\n\n  state.pipes.splice(i, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1)\n    state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function(ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  if (ev === 'data' && !this._readableState.flowing)\n    emitDataEvents(this);\n\n  if (ev === 'readable' && this.readable) {\n    var state = this._readableState;\n    if (!state.readableListening) {\n      state.readableListening = true;\n      state.emittedReadable = false;\n      state.needReadable = true;\n      if (!state.reading) {\n        this.read(0);\n      } else if (state.length) {\n        emitReadable(this, state);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function() {\n  emitDataEvents(this);\n  this.read(0);\n  this.emit('resume');\n};\n\nReadable.prototype.pause = function() {\n  emitDataEvents(this, true);\n  this.emit('pause');\n};\n\nfunction emitDataEvents(stream, startPaused) {\n  var state = stream._readableState;\n\n  if (state.flowing) {\n    // https://github.com/isaacs/readable-stream/issues/16\n    throw new Error('Cannot switch to old mode now.');\n  }\n\n  var paused = startPaused || false;\n  var readable = false;\n\n  // convert to an old-style stream.\n  stream.readable = true;\n  stream.pipe = Stream.prototype.pipe;\n  stream.on = stream.addListener = Stream.prototype.on;\n\n  stream.on('readable', function() {\n    readable = true;\n\n    var c;\n    while (!paused && (null !== (c = stream.read())))\n      stream.emit('data', c);\n\n    if (c === null) {\n      readable = false;\n      stream._readableState.needReadable = true;\n    }\n  });\n\n  stream.pause = function() {\n    paused = true;\n    this.emit('pause');\n  };\n\n  stream.resume = function() {\n    paused = false;\n    if (readable)\n      process.nextTick(function() {\n        stream.emit('readable');\n      });\n    else\n      this.read(0);\n    this.emit('resume');\n  };\n\n  // now make it start, just in case it hadn't already.\n  stream.emit('readable');\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function(stream) {\n  var state = this._readableState;\n  var paused = false;\n\n  var self = this;\n  stream.on('end', function() {\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length)\n        self.push(chunk);\n    }\n\n    self.push(null);\n  });\n\n  stream.on('data', function(chunk) {\n    if (state.decoder)\n      chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    //if (state.objectMode && util.isNullOrUndefined(chunk))\n    if (state.objectMode && (chunk === null || chunk === undefined))\n      return;\n    else if (!state.objectMode && (!chunk || !chunk.length))\n      return;\n\n    var ret = self.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (typeof stream[i] === 'function' &&\n        typeof this[i] === 'undefined') {\n      this[i] = function(method) { return function() {\n        return stream[method].apply(stream, arguments);\n      }}(i);\n    }\n  }\n\n  // proxy certain important events.\n  var events = ['error', 'close', 'destroy', 'pause', 'resume'];\n  forEach(events, function(ev) {\n    stream.on(ev, self.emit.bind(self, ev));\n  });\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  self._read = function(n) {\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return self;\n};\n\n\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\nfunction fromList(n, state) {\n  var list = state.buffer;\n  var length = state.length;\n  var stringMode = !!state.decoder;\n  var objectMode = !!state.objectMode;\n  var ret;\n\n  // nothing in the list, definitely empty.\n  if (list.length === 0)\n    return null;\n\n  if (length === 0)\n    ret = null;\n  else if (objectMode)\n    ret = list.shift();\n  else if (!n || n >= length) {\n    // read it all, truncate the array.\n    if (stringMode)\n      ret = list.join('');\n    else\n      ret = Buffer.concat(list, length);\n    list.length = 0;\n  } else {\n    // read just some of it.\n    if (n < list[0].length) {\n      // just take a part of the first list item.\n      // slice is the same for buffers and strings.\n      var buf = list[0];\n      ret = buf.slice(0, n);\n      list[0] = buf.slice(n);\n    } else if (n === list[0].length) {\n      // first list is a perfect match\n      ret = list.shift();\n    } else {\n      // complex case.\n      // we have enough to cover it, but it spans past the first buffer.\n      if (stringMode)\n        ret = '';\n      else\n        ret = new Buffer(n);\n\n      var c = 0;\n      for (var i = 0, l = list.length; i < l && c < n; i++) {\n        var buf = list[0];\n        var cpy = Math.min(n - c, buf.length);\n\n        if (stringMode)\n          ret += buf.slice(0, cpy);\n        else\n          buf.copy(ret, c, 0, cpy);\n\n        if (cpy < buf.length)\n          list[0] = buf.slice(cpy);\n        else\n          list.shift();\n\n        c += cpy;\n      }\n    }\n  }\n\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0)\n    throw new Error('endReadable called on non-empty stream');\n\n  if (!state.endEmitted && state.calledRead) {\n    state.ended = true;\n    process.nextTick(function() {\n      // Check that we didn't get one last unshift.\n      if (!state.endEmitted && state.length === 0) {\n        state.endEmitted = true;\n        stream.readable = false;\n        stream.emit('end');\n      }\n    });\n  }\n}\n\nfunction forEach (xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n\nfunction indexOf (xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}