{"ast":null,"code":"var clone = function () {\n  'use strict';\n  /**\n   * Clones (copies) an Object using deep copying.\n   *\n   * This function supports circular references by default, but if you are certain\n   * there are no circular references in your object, you can save some CPU time\n   * by calling clone(obj, false).\n   *\n   * Caution: if `circular` is false and `parent` contains circular references,\n   * your program may enter an infinite loop and crash.\n   *\n   * @param `parent` - the object to be cloned\n   * @param `circular` - set to true if the object to be cloned may contain\n   *    circular references. (optional - true by default)\n   * @param `depth` - set to a number if the object is only to be cloned to\n   *    a particular depth. (optional - defaults to Infinity)\n   * @param `prototype` - sets the prototype to be used when cloning an object.\n   *    (optional - defaults to parent prototype).\n  */\n\n  function clone(parent, circular, depth, prototype) {\n    var filter;\n\n    if (typeof circular === 'object') {\n      depth = circular.depth;\n      prototype = circular.prototype;\n      filter = circular.filter;\n      circular = circular.circular;\n    } // maintain two arrays for circular references, where corresponding parents\n    // and children have the same index\n\n\n    var allParents = [];\n    var allChildren = [];\n    var useBuffer = typeof Buffer != 'undefined';\n    if (typeof circular == 'undefined') circular = true;\n    if (typeof depth == 'undefined') depth = Infinity; // recurse this function so we don't reset allParents and allChildren\n\n    function _clone(parent, depth) {\n      // cloning null always returns null\n      if (parent === null) return null;\n      if (depth == 0) return parent;\n      var child;\n      var proto;\n\n      if (typeof parent != 'object') {\n        return parent;\n      }\n\n      if (clone.__isArray(parent)) {\n        child = [];\n      } else if (clone.__isRegExp(parent)) {\n        child = new RegExp(parent.source, __getRegExpFlags(parent));\n        if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n      } else if (clone.__isDate(parent)) {\n        child = new Date(parent.getTime());\n      } else if (useBuffer && Buffer.isBuffer(parent)) {\n        if (Buffer.allocUnsafe) {\n          // Node.js >= 4.5.0\n          child = Buffer.allocUnsafe(parent.length);\n        } else {\n          // Older Node.js versions\n          child = new Buffer(parent.length);\n        }\n\n        parent.copy(child);\n        return child;\n      } else {\n        if (typeof prototype == 'undefined') {\n          proto = Object.getPrototypeOf(parent);\n          child = Object.create(proto);\n        } else {\n          child = Object.create(prototype);\n          proto = prototype;\n        }\n      }\n\n      if (circular) {\n        var index = allParents.indexOf(parent);\n\n        if (index != -1) {\n          return allChildren[index];\n        }\n\n        allParents.push(parent);\n        allChildren.push(child);\n      }\n\n      for (var i in parent) {\n        var attrs;\n\n        if (proto) {\n          attrs = Object.getOwnPropertyDescriptor(proto, i);\n        }\n\n        if (attrs && attrs.set == null) {\n          continue;\n        }\n\n        child[i] = _clone(parent[i], depth - 1);\n      }\n\n      return child;\n    }\n\n    return _clone(parent, depth);\n  }\n  /**\n   * Simple flat clone using prototype, accepts only objects, usefull for property\n   * override on FLAT configuration object (no nested props).\n   *\n   * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n   * works.\n   */\n\n\n  clone.clonePrototype = function clonePrototype(parent) {\n    if (parent === null) return null;\n\n    var c = function () {};\n\n    c.prototype = parent;\n    return new c();\n  }; // private utility functions\n\n\n  function __objToStr(o) {\n    return Object.prototype.toString.call(o);\n  }\n\n  ;\n  clone.__objToStr = __objToStr;\n\n  function __isDate(o) {\n    return typeof o === 'object' && __objToStr(o) === '[object Date]';\n  }\n\n  ;\n  clone.__isDate = __isDate;\n\n  function __isArray(o) {\n    return typeof o === 'object' && __objToStr(o) === '[object Array]';\n  }\n\n  ;\n  clone.__isArray = __isArray;\n\n  function __isRegExp(o) {\n    return typeof o === 'object' && __objToStr(o) === '[object RegExp]';\n  }\n\n  ;\n  clone.__isRegExp = __isRegExp;\n\n  function __getRegExpFlags(re) {\n    var flags = '';\n    if (re.global) flags += 'g';\n    if (re.ignoreCase) flags += 'i';\n    if (re.multiline) flags += 'm';\n    return flags;\n  }\n\n  ;\n  clone.__getRegExpFlags = __getRegExpFlags;\n  return clone;\n}();\n\nif (typeof module === 'object' && module.exports) {\n  module.exports = clone;\n}","map":{"version":3,"names":["clone","parent","circular","depth","prototype","filter","allParents","allChildren","useBuffer","Buffer","Infinity","_clone","child","proto","__isArray","__isRegExp","RegExp","source","__getRegExpFlags","lastIndex","__isDate","Date","getTime","isBuffer","allocUnsafe","length","copy","Object","getPrototypeOf","create","index","indexOf","push","i","attrs","getOwnPropertyDescriptor","set","clonePrototype","c","__objToStr","o","toString","call","re","flags","global","ignoreCase","multiline","module","exports"],"sources":["G:/anaconda/project/download files/last down/New folder/desktop/Samrat/protfolio/protfolio/node_modules/clone/clone.js"],"sourcesContent":["var clone = (function() {\n'use strict';\n\n/**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n*/\nfunction clone(parent, circular, depth, prototype) {\n  var filter;\n  if (typeof circular === 'object') {\n    depth = circular.depth;\n    prototype = circular.prototype;\n    filter = circular.filter;\n    circular = circular.circular\n  }\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  var allParents = [];\n  var allChildren = [];\n\n  var useBuffer = typeof Buffer != 'undefined';\n\n  if (typeof circular == 'undefined')\n    circular = true;\n\n  if (typeof depth == 'undefined')\n    depth = Infinity;\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null)\n      return null;\n\n    if (depth == 0)\n      return parent;\n\n    var child;\n    var proto;\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (clone.__isArray(parent)) {\n      child = [];\n    } else if (clone.__isRegExp(parent)) {\n      child = new RegExp(parent.source, __getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (clone.__isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      if (Buffer.allocUnsafe) {\n        // Node.js >= 4.5.0\n        child = Buffer.allocUnsafe(parent.length);\n      } else {\n        // Older Node.js versions\n        child = new Buffer(parent.length);\n      }\n      parent.copy(child);\n      return child;\n    } else {\n      if (typeof prototype == 'undefined') {\n        proto = Object.getPrototypeOf(parent);\n        child = Object.create(proto);\n      }\n      else {\n        child = Object.create(prototype);\n        proto = prototype;\n      }\n    }\n\n    if (circular) {\n      var index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    for (var i in parent) {\n      var attrs;\n      if (proto) {\n        attrs = Object.getOwnPropertyDescriptor(proto, i);\n      }\n\n      if (attrs && attrs.set == null) {\n        continue;\n      }\n      child[i] = _clone(parent[i], depth - 1);\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n}\n\n/**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */\nclone.clonePrototype = function clonePrototype(parent) {\n  if (parent === null)\n    return null;\n\n  var c = function () {};\n  c.prototype = parent;\n  return new c();\n};\n\n// private utility functions\n\nfunction __objToStr(o) {\n  return Object.prototype.toString.call(o);\n};\nclone.__objToStr = __objToStr;\n\nfunction __isDate(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Date]';\n};\nclone.__isDate = __isDate;\n\nfunction __isArray(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Array]';\n};\nclone.__isArray = __isArray;\n\nfunction __isRegExp(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';\n};\nclone.__isRegExp = __isRegExp;\n\nfunction __getRegExpFlags(re) {\n  var flags = '';\n  if (re.global) flags += 'g';\n  if (re.ignoreCase) flags += 'i';\n  if (re.multiline) flags += 'm';\n  return flags;\n};\nclone.__getRegExpFlags = __getRegExpFlags;\n\nreturn clone;\n})();\n\nif (typeof module === 'object' && module.exports) {\n  module.exports = clone;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}